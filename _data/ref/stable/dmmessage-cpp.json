{
    "elements": [
        {
            "brief": "Result enum",
            "description": "Result enum",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "= 0",
                    "name": "RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "= -1",
                    "name": "RESULT_SOCKET_EXISTS",
                    "type": ""
                },
                {
                    "doc": "= -2",
                    "name": "RESULT_SOCKET_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "= -3",
                    "name": "RESULT_SOCKET_OUT_OF_RESOURCES",
                    "type": ""
                },
                {
                    "doc": "= -4",
                    "name": "RESULT_INVALID_SOCKET_NAME",
                    "type": ""
                },
                {
                    "doc": "= -5",
                    "name": "RESULT_MALFORMED_URL",
                    "type": ""
                },
                {
                    "doc": "= -6",
                    "name": "RESULT_NAME_OK_SOCKET_NOT_FOUND",
                    "type": ""
                }
            ],
            "name": "dmMessage::Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Helper struct for parsing a string of the form \"so...",
            "description": "Helper struct for parsing a string of the form \"socket:path#fragment\"",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "The socket",
                    "name": "m_Socket",
                    "type": "const char*"
                },
                {
                    "doc": "The socket length",
                    "name": "m_SocketSize",
                    "type": "uint32_t"
                },
                {
                    "doc": "The path",
                    "name": "m_Path",
                    "type": "const char*"
                },
                {
                    "doc": "The path length",
                    "name": "m_PathSize",
                    "type": "uint32_t"
                },
                {
                    "doc": "The fragment",
                    "name": "m_Fragment",
                    "type": "const char*"
                },
                {
                    "doc": "The fragment length",
                    "name": "m_FragmentSize",
                    "type": "uint32_t"
                }
            ],
            "name": "dmMessage::StringURL",
            "notes": [
                "The sizes do not include the null character. There is no null character since the dmMessage::ParseURL is non destructive."
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "URL specifying a sender/receiver of messages",
            "description": "URL specifying a sender/receiver of messages",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMessage::URL",
            "notes": [
                "Currently has a hard limit of 32 bytes",
                "This struct is a part of the save file APi (see script_table.cpp)"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "A callback for messages that needs cleanup after b...",
            "description": "A callback for messages that needs cleanup after being dispatched. E.g. for freeing resources/memory.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMMessage::MessageDestroyCallback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Get the message fragment",
            "description": "Get the message fragment",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetFragment",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "fragment",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the message path",
            "description": "Get the message path",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetPath",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "path",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the message socket",
            "description": "Get the message socket",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetSocket",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "socket",
                    "types": [
                        "dmMessage::HSocket"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get socket name",
            "description": "Get socket name",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetSocketName",
            "notes": [],
            "parameters": [
                {
                    "doc": "Socket",
                    "is_optional": "False",
                    "name": "socket",
                    "types": [
                        "dmMessage::HSocket"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "socket name. 0 if it was not found",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get socket name hash",
            "description": "Get socket name hash",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetSocketNameHash",
            "notes": [],
            "parameters": [
                {
                    "doc": "Socket",
                    "is_optional": "False",
                    "name": "socket",
                    "types": [
                        "dmMessage::HSocket"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "socket name hash. 0 if it was not found",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Socket handle",
            "description": "Socket handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HSocket",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Tests if a socket is valid (not deleted).",
            "description": "Tests if a socket is valid (not deleted).",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsSocketValid",
            "notes": [],
            "parameters": [
                {
                    "doc": "Socket",
                    "is_optional": "False",
                    "name": "socket",
                    "types": [
                        "dmMessage::HSocket"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if the socket is valid or not",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Message",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Message data desc used at dispatch callback. When ...",
            "description": "Message data desc used at dispatch callback. When a message is posted,\nthe actual object is copied into the sockets internal buffer.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Sender uri",
                    "name": "m_Sender",
                    "type": "dmMessage::URL"
                },
                {
                    "doc": "Receiver uri",
                    "name": "m_Receiver",
                    "type": "dmMessage::URL"
                },
                {
                    "doc": "Unique id of message",
                    "name": "m_Id",
                    "type": "dmhash_t"
                },
                {
                    "doc": "User data pointer",
                    "name": "m_UserData1",
                    "type": "uintptr_t"
                },
                {
                    "doc": "User data pointer",
                    "name": "m_UserData2",
                    "type": "uintptr_t"
                },
                {
                    "doc": "User specified descriptor of the message data",
                    "name": "m_Descriptor",
                    "type": "uintptr_t"
                },
                {
                    "doc": "Size of message data in bytes",
                    "name": "m_DataSize",
                    "type": "uint32_t"
                },
                {
                    "doc": "Ptr to next message (or 0 if last)",
                    "name": "m_Next",
                    "type": "dmMessage::Message*"
                },
                {
                    "doc": "If set, will be called after each dispatch",
                    "name": "m_DestroyCallback",
                    "type": "dmMessage::MessageDestroyCallback"
                },
                {
                    "doc": "Payload",
                    "name": "m_Data",
                    "type": "uint8_t*"
                }
            ],
            "name": "Message",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Convert a string to a URL struct",
            "description": "Convert a string to a URL struct",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ParseUrl",
            "notes": [
                "No allocation occurs, thus no cleanup is needed."
            ],
            "parameters": [
                {
                    "doc": "string of the format <span class=\"socket\">][path</span>[#fragment]",
                    "is_optional": "False",
                    "name": "uri",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "url in string format, must not be 0x0",
                    "is_optional": "False",
                    "name": "out",
                    "types": [
                        "dmMessage::StringUrl"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK on success\n- RESULT_MALFORMED_URL if the uri could not be parsed",
                    "name": "-",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Resets the given URL to default values.",
            "description": "Resets the given URL to default values.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResetUrl",
            "notes": [
                "Previously the URL wasn't reset in the constructor and certain calls to ResetURL might currently be redundant"
            ],
            "parameters": [
                {
                    "doc": "URL to reset",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the message fragment",
            "description": "Set the message fragment",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetFragment",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "fragment",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the message path",
            "description": "Set the message path",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetPath",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "path",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the socket",
            "description": "Set the socket",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetSocket",
            "notes": [],
            "parameters": [
                {
                    "doc": "url",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "socket",
                    "types": [
                        "dmMessage::HSocket"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Message API documentation",
        "description": "[file:<dmsdk/dlib/message.h>]\n\nApi for sending messages",
        "file": "dmsdk/dlib/message.h",
        "language": "C++",
        "name": "Message",
        "namespace": "dmMessage",
        "notes": [],
        "path": "dmsdk/dlib/message.h",
        "type": "Defold C++"
    }
}