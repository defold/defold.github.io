{
    "elements": [
        {
            "brief": "run bob the builder program",
            "description": "Run bob the builder program\nFor the full documentation of the available commands and options, see <a href=\"https://defold.com/manuals/bob/\">the bob manual</a>.",
            "error": "",
            "examples": "Print help in the console:\n<div class=\"codehilite\"><pre><span></span><code>editor.bob({help = true})\n</code></pre></div>\n\nBundle the game for the host platform:\n<div class=\"codehilite\"><pre><span></span><code>local opts = {\n    archive = true,\n    platform = editor.platform\n}\neditor.bob(opts, &quot;distclean&quot;, &quot;resolve&quot;, &quot;build&quot;, &quot;bundle&quot;)\n</code></pre></div>\n\nUsing snake_cased and repeated options:\n<div class=\"codehilite\"><pre><span></span><code>local opts = {\n    archive = true,\n    platform = editor.platform,\n    build_server = &quot;https://build.my-company.com&quot;,\n    settings = {&quot;test.ini&quot;, &quot;headless.ini&quot;}\n}\neditor.bob(opts, &quot;distclean&quot;, &quot;resolve&quot;, &quot;build&quot;)\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "editor.bob",
            "notes": [],
            "parameters": [
                {
                    "doc": "table of command line options for bob, without the leading dashes (<code>--</code>). You can use snake_case instead of kebab-case for option keys. Only long option names are supported (i.e. <code>output</code>, not <code>o</code>). Supported value types are strings, integers and booleans. If an option takes no arguments, use a boolean (i.e. <code>true</code>). If an option may be repeated, you can use an array of values.",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "bob commands, e.g. <code>\"resolve\"</code> or <code>\"build\"</code>",
                    "is_optional": "True",
                    "name": "...commands",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "open a URL in the default browser or a registered application",
            "description": "Open a URL in the default browser or a registered application",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.browse",
            "notes": [],
            "parameters": [
                {
                    "doc": "http(s) or file URL",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "error message the signifies bundle abort that is not an error",
            "description": "Error message the signifies bundle abort that is not an error",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.abort_message",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "immutably set a key to value in a table",
            "description": "Immutably set a key to value in a table",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.assoc",
            "notes": [],
            "parameters": [
                {
                    "doc": "the table",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "the key",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "any"
                    ]
                },
                {
                    "doc": "the value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "New table if it should be changed by assoc, or the input table otherwise",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "immutably set a value to a nested path in a table",
            "description": "Immutably set a value to a nested path in a table",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.assoc_in",
            "notes": [],
            "parameters": [
                {
                    "doc": "the table",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "] the keys",
                    "is_optional": "False",
                    "name": "keys",
                    "types": [
                        "any["
                    ]
                },
                {
                    "doc": "the value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "New table if it should be changed by assoc_in, or the input table otherwise",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "helper function for creating a check box component",
            "description": "Helper function for creating a check box component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.check_box",
            "notes": [],
            "parameters": [
                {
                    "doc": "config table",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "config key for the selected value",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "check box label text",
                    "is_optional": "False",
                    "name": "text",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "extra props for <code>editor.ui.check_box</code>",
                    "is_optional": "True",
                    "name": "rest_props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "check_box",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a grid row for the common boolean settings",
            "description": "Create a grid row for the common boolean settings",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.check_boxes_grid_row",
            "notes": [],
            "parameters": [
                {
                    "doc": "config map with common boolean keys",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "] grid row",
                    "name": "row",
                    "types": [
                        "component["
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create bundle command definition",
            "description": "Create bundle command definition",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.command",
            "notes": [],
            "parameters": [
                {
                    "doc": "Command label, as presented in the UI",
                    "is_optional": "False",
                    "name": "label",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Command id, e.g. <code>\"bundle-my-platform\"</code>, used for re-bundling",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "bundle function, will receive a <code>requested_dialog</code> boolean argument",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "extra keys for the command definition, e.g. <code>active</code>",
                    "is_optional": "True",
                    "name": "rest",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a grid row for the common variant setting",
            "description": "Create a grid row for the common variant setting",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.common_variant_grid_row",
            "notes": [],
            "parameters": [
                {
                    "doc": "config map with <code>variant</code> key",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "] grid row",
                    "name": "row",
                    "types": [
                        "component["
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "prefs schema for common bundle variants",
            "description": "prefs schema for common bundle variants",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.common_variant_schema",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "get bundle config, optionally showing a dialog to edit the config",
            "description": "Get bundle config, optionally showing a dialog to edit the config",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.config",
            "notes": [],
            "parameters": [
                {
                    "doc": "whether the user explicitly requested a dialog",
                    "is_optional": "False",
                    "name": "requested_dialog",
                    "types": [
                        "boolean"
                    ]
                },
                {
                    "doc": "preference key used for loading the bundle config",
                    "is_optional": "False",
                    "name": "prefs_key",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "UI component for the dialog, will receive <code>config</code> and (optional) <code>errors</code> props",
                    "is_optional": "False",
                    "name": "dialog_component",
                    "types": [
                        "component"
                    ]
                },
                {
                    "doc": "error checking predicate, takes config as an argument; if returns truthy value, it will be passed as a prop to <code>dialog_component</code>",
                    "is_optional": "True",
                    "name": "errors_fn",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "config",
                    "types": [
                        "any"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "helper function for constructing prefs schema for new bundle dialogs",
            "description": "Helper function for constructing prefs schema for new bundle dialogs",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.config_schema",
            "notes": [],
            "parameters": [
                {
                    "doc": "bundle variant schema",
                    "is_optional": "False",
                    "name": "variant_schema",
                    "types": [
                        "schema"
                    ]
                },
                {
                    "doc": "extra config properties",
                    "is_optional": "True",
                    "name": "properties",
                    "types": [
                        "table",
                        "nil"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "full bundle schema, defines a project-scoped object schema with the following keys:<dl><dt><code>variant</code></dt><dd>the provided variant schema</dd><dt><code>texture_compression <small>string</small></code></dt><dd>either <code>enabled</code>, <code>disabled</code> or <code>editor</code></dd><dt><code>with_symbols <small>boolean</small></code></dt><dt><code>build_report <small>boolean</small></code></dt><dt><code>liveupdate <small>boolean</small></code></dt><dt><code>contentless <small>boolean</small></code></dt></dl>",
                    "name": "schema",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create bob bundle",
            "description": "Create bob bundle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.create",
            "notes": [],
            "parameters": [
                {
                    "doc": "bundle config",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "bundle output directory",
                    "is_optional": "False",
                    "name": "output_directory",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "extra bob opts, presumably produced from config",
                    "is_optional": "False",
                    "name": "extra_bob_opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a grid row for the desktop variant setting",
            "description": "Create a grid row for the desktop variant setting",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.desktop_variant_grid_row",
            "notes": [],
            "parameters": [
                {
                    "doc": "config table with <code>variant</code> key",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "] grid row",
                    "name": "row",
                    "types": [
                        "component["
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "prefs schema for desktop bundle variants",
            "description": "prefs schema for desktop bundle variants",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.desktop_variant_schema",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "helper function for creating a bundle dialog component",
            "description": "Helper function for creating a bundle dialog component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.dialog",
            "notes": [],
            "parameters": [
                {
                    "doc": "dialog heading text",
                    "is_optional": "False",
                    "name": "heading",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "config map with common boolean keys",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "dialog hint text",
                    "is_optional": "False",
                    "name": "hint",
                    "types": [
                        "string",
                        "nil"
                    ]
                },
                {
                    "doc": "dialog error text",
                    "is_optional": "False",
                    "name": "error",
                    "types": [
                        "string",
                        "nil"
                    ]
                },
                {
                    "doc": "[]] grid rows of UI elements, dialog content",
                    "is_optional": "False",
                    "name": "rows",
                    "types": [
                        "component["
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "dialog",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "helper function for creating an external file field component",
            "description": "Helper function for creating an external file field component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.external_file_field",
            "notes": [],
            "parameters": [
                {
                    "doc": "config map with common boolean keys",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "config key for the set",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "error message",
                    "is_optional": "True",
                    "name": "error",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "extra props for <code>editor.ui.external_file_field</code>",
                    "is_optional": "True",
                    "name": "rest_props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "external_file_field",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "return a 2-element array that represents a single grid row in a bundle dialog",
            "description": "Return a 2-element array that represents a single grid row in a bundle dialog",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.grid_row",
            "notes": [],
            "parameters": [
                {
                    "doc": "optional string label",
                    "is_optional": "False",
                    "name": "text",
                    "types": [
                        "string",
                        "nil"
                    ]
                },
                {
                    "doc": "] either a single UI component, or an array of components (will be laid out vertically)",
                    "is_optional": "False",
                    "name": "content",
                    "types": [
                        "component",
                        "component["
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "] a single grid row",
                    "name": "row",
                    "types": [
                        "component["
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "make stringifier function that first performs the label lookup in a provided table",
            "description": "Make stringifier function that first performs the label lookup in a provided table",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.make_to_string_lookup",
            "notes": [],
            "parameters": [
                {
                    "doc": "table from values to their corresponding string representation",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "stringifier function",
                    "name": "to_string",
                    "types": [
                        "function"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get bundle output directory, optionally showing a directory selection dialog",
            "description": "Get bundle output directory, optionally showing a directory selection dialog",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.output_directory",
            "notes": [],
            "parameters": [
                {
                    "doc": "whether the user explicitly requested a dialog",
                    "is_optional": "False",
                    "name": "requested_dialog",
                    "types": [
                        "boolean"
                    ]
                },
                {
                    "doc": "output subdir, usually a platform name",
                    "is_optional": "False",
                    "name": "output_subdir",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "helper function for creating a select box component",
            "description": "Helper function for creating a select box component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.select_box",
            "notes": [],
            "parameters": [
                {
                    "doc": "config table",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "config key for the selected value",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "] select box options",
                    "is_optional": "False",
                    "name": "options",
                    "types": [
                        "any["
                    ]
                },
                {
                    "doc": "option stringifier",
                    "is_optional": "False",
                    "name": "to_string",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "extra props for <code>editor.ui.select_box</code>",
                    "is_optional": "True",
                    "name": "rest_props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "select_box",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "helper function for creating a check box for an enum value of set config key",
            "description": "Helper function for creating a check box for an enum value of set config key",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.set_element_check_box",
            "notes": [],
            "parameters": [
                {
                    "doc": "config map with common boolean keys",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "config key for the set",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "enum value in the set",
                    "is_optional": "False",
                    "name": "element",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "check box label text",
                    "is_optional": "False",
                    "name": "text",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "error message",
                    "is_optional": "True",
                    "name": "error",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "check_box",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a grid row for the texture compression setting",
            "description": "Create a grid row for the texture compression setting",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.bundle.texture_compression_grid_row",
            "notes": [],
            "parameters": [
                {
                    "doc": "config map with <code>texture_compression</code> key",
                    "is_optional": "False",
                    "name": "config",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "config setter",
                    "is_optional": "False",
                    "name": "set_config",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "] grid row",
                    "name": "row",
                    "types": [
                        "component["
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if <code>editor.tx.add()</code> (as well as <code>editor.tx.clear()</code> and <code>editor.tx.remove()</code>) transaction with this property won't throw an error",
            "description": "Check if <code>editor.tx.add()</code> (as well as <code>editor.tx.clear()</code> and <code>editor.tx.remove()</code>) transaction with this property won't throw an error",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.can_add",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "value",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if you can get this property so <code>editor.get()</code> won't throw an error",
            "description": "Check if you can get this property so <code>editor.get()</code> won't throw an error",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.can_get",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "value",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if <code>editor.tx.reorder()</code> transaction with this property won't throw an error",
            "description": "Check if <code>editor.tx.reorder()</code> transaction with this property won't throw an error",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.can_reorder",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "value",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if <code>editor.tx.reset()</code> transaction with this property won't throw an error",
            "description": "Check if <code>editor.tx.reset()</code> transaction with this property won't throw an error",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.can_reset",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "value",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if <code>editor.tx.set()</code> transaction with this property won't throw an error",
            "description": "Check if <code>editor.tx.set()</code> transaction with this property won't throw an error",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.can_set",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "value",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create an editor command",
            "description": "Create an editor command",
            "error": "",
            "examples": "Print Git history for a file:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">editor</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">label</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">&quot;Git History&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">selection</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">&quot;resource&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">cardinality</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">&quot;one&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">editor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;git&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;log&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;--follow&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;.&quot;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"n\">editor</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"o\">.</span><span class=\"n\">selection</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">{</span><span class=\"n\">reload_resources</span><span class=\"o\">=</span><span class=\"bp\">false</span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">end</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "editor.command",
            "notes": [],
            "parameters": [
                {
                    "doc": "A table with the following keys:<dl><dt><code>label <small>string</small></code></dt><dd>required, user-visible command name</dd><dt><code>locations <small>string[]</small></code></dt><dd>required, a non-empty list of locations where the command is displayed in the editor, values are either <code>\"Edit\"</code>, <code>\"View\"</code>, <code>\"Project\"</code>, <code>\"Debug\"</code> (the editor menubar), <code>\"Assets\"</code> (the assets pane), or <code>\"Outline\"</code> (the outline pane)</dd><dt><code>query <small>table</small></code></dt><dd>optional, a query that both controls the command availability and provides additional information to the command handler functions; a table with the following keys:<dl><dt><code>selection <small>table</small></code></dt><dd>current selection, a table with the following keys:<dl><dt><code>type <small>string</small></code></dt><dd>either <code>\"resource\"</code> (selected resource) or <code>\"outline\"</code> (selected outline node)</dd><dt><code>cardinality <small>string</small></code></dt><dd>either <code>\"one\"</code> (will use first selected item) or <code>\"many\"</code> (will use all selected items)</dd></dl></dd><dt><code>argument <small>table</small></code></dt><dd>the command argument</dd></dl></dd><dt><code>id <small>string</small></code></dt><dd>optional, keyword identifier that may be used for assigning a shortcut to a command; should be a dot-separated identifier string, e.g. <code>\"my-extension.do-stuff\"</code></dd><dt><code>active <small>function</small></code></dt><dd>optional function that additionally checks if a command is active in the current context; will receive opts table with values populated by the query; should be fast to execute since the editor might invoke it in response to UI interactions (on key typed, mouse clicked)</dd><dt><code>run <small>function</small></code></dt><dd>optional function that is invoked when the user decides to execute the command; will receive opts table with values populated by the query</dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "command",
                    "types": [
                        "command"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a directory if it does not exist, and all non-existent parent directories.",
            "description": "Create a directory if it does not exist, and all non-existent parent directories.\nThrows an error if the directory can't be created.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code>editor.create_directory(&quot;/assets/gen&quot;)\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "editor.create_directory",
            "notes": [],
            "parameters": [
                {
                    "doc": "Resource path (starting with <code>/</code>)",
                    "is_optional": "False",
                    "name": "resource_path",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create resources (including non-existent parent directories).",
            "description": "Create resources (including non-existent parent directories).\nThrows an error if any of the provided resource paths already exist",
            "error": "",
            "examples": "Create a single resource from template:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">editor</span><span class=\"p\">.</span><span class=\"n\">create_resources</span><span class=\"p\">(</span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"ss\">&quot;/npc.go&quot;</span><span class=\"w\"></span>\n<span class=\"err\">}</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\nCreate multiple resources:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">editor</span><span class=\"p\">.</span><span class=\"n\">create_resources</span><span class=\"p\">(</span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"ss\">&quot;/npc.go&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"ss\">&quot;/levels/1.collection&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"ss\">&quot;/levels/2.collection&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"err\">}</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n\nCreate a resource with custom content:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">editor</span><span class=\"p\">.</span><span class=\"n\">create_resources</span><span class=\"p\">(</span><span class=\"err\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"err\">{</span><span class=\"ss\">&quot;/npc.script&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">&quot;go.property(&#39;hp&#39;, 100)&quot;</span><span class=\"err\">}</span><span class=\"w\"></span>\n<span class=\"err\">}</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "editor.create_resources",
            "notes": [],
            "parameters": [
                {
                    "doc": "] Array of resource paths (strings starting with <code>/</code>) or resource definitions, lua tables with the following keys:<dl><dt><code>1 <small>string</small></code></dt><dd>required, resource path (starting with <code>/</code>)</dd><dt><code>2 <small>string</small></code></dt><dd>optional, created resource content</dd></dl>",
                    "is_optional": "False",
                    "name": "resources",
                    "types": [
                        "string["
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "delete a directory if it exists, and all existent child directories and files.",
            "description": "Delete a directory if it exists, and all existent child directories and files.\nThrows an error if the directory can't be deleted.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code>editor.delete_directory(&quot;/assets/gen&quot;)\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "editor.delete_directory",
            "notes": [],
            "parameters": [
                {
                    "doc": "Resource path (starting with <code>/</code>)",
                    "is_optional": "False",
                    "name": "resource_path",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "a string, SHA1 of Defold editor",
            "description": "A string, SHA1 of Defold editor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.editor_sha1",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "a string, SHA1 of Defold engine",
            "description": "A string, SHA1 of Defold engine",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.engine_sha1",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "execute a shell command.",
            "description": "Execute a shell command.\nAny shell command arguments should be provided as separate argument strings to this function. If the exit code of the process is not zero, this function throws error. By default, the function returns <code>nil</code>, but it can be configured to capture the output of the shell command as string and return it \u2014 set <code>out</code> option to <code>\"capture\"</code> to do it.<br>By default, after this shell command is executed, the editor will reload resources from disk.",
            "error": "",
            "examples": "Make a directory with spaces in it:\n<div class=\"codehilite\"><pre><span></span><code>editor.execute(&quot;mkdir&quot;, &quot;new dir&quot;)\n</code></pre></div>\n\nRead the git status:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">editor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;git&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;--porcelain&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">reload_resources</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">&quot;capture&quot;</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "editor.execute",
            "notes": [],
            "parameters": [
                {
                    "doc": "Shell command name to execute",
                    "is_optional": "False",
                    "name": "command",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Optional shell command arguments",
                    "is_optional": "True",
                    "name": "...",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Optional options table. Supported entries:                                            <ul>                                              <li>                                                <span class=\"type\">boolean</span> <code>reload_resources</code>: make the editor reload the resources from disk after the command is executed, default <code>true</code>                                              </li>                                              <li>                                                <span class=\"type\">string</span> <code>out</code>: standard output mode, either:                                                <ul>                                                  <li>                                                    <code>\"pipe\"</code>: the output is piped to the editor console (this is the default behavior).                                                  </li>                                                  <li>                                                    <code>\"capture\"</code>: capture and return the output to the editor script with trailing newlines trimmed.                                                  </li>                                                  <li>                                                    <code>\"discard\"</code>: the output is discarded completely.                                                  </li>                                                </ul>                                              </li>                                              <li>                                                <span class=\"type\">string</span> <code>err</code>: standard error output mode, either:                                                <ul>                                                  <li>                                                    <code>\"pipe\"</code>: the error output is piped to the editor console (this is the default behavior).                                                  </li>                                                  <li>                                                    <code>\"stdout\"</code>: the error output is redirected to the standard output of the process.                                                  </li>                                                  <li>                                                    <code>\"discard\"</code>: the error output is discarded completely.                                                  </li>                                                </ul>                                              </li>                                            </ul>",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "If <code>out</code> option is set to <code>\"capture\"</code>, returns the output as string with trimmed trailing newlines. Otherwise, returns <code>nil</code>.",
                    "name": "result",
                    "types": [
                        "nil",
                        "string"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "query information about file system path",
            "description": "Query information about file system path",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.external_file_attributes",
            "notes": [],
            "parameters": [
                {
                    "doc": "External file path, resolved against project root if relative",
                    "is_optional": "False",
                    "name": "path",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A table with the following keys:<dl>                                                  <dt><code>path <small>string</small></code></dt>                                                  <dd>resolved file path</dd>                                                  <dt><code>exists <small>boolean</small></code></dt>                                                  <dd>whether there is a file system entry at the path</dd>                                                  <dt><code>is_file <small>boolean</small></code></dt>                                                  <dd>whether the path corresponds to a file</dd>                                                  <dt><code>is_directory <small>boolean</small></code></dt>                                                  <dd>whether the path corresponds to a directory</dd>                                                </dl>",
                    "name": "attributes",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get a value of a node property inside the editor.",
            "description": "Get a value of a node property inside the editor.\nSome properties might be read-only, and some might be unavailable in different contexts, so you should use <code>editor.can_get()</code> before reading them and <code>editor.can_set()</code> before making the editor set them.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.get",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "property value",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "open a file in a registered application",
            "description": "Open a file in a registered application",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.open_external_file",
            "notes": [],
            "parameters": [
                {
                    "doc": "file path",
                    "is_optional": "False",
                    "name": "path",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "editor platform id.",
            "description": "Editor platform id.\nA <code>string</code>, either:\n- <code>\"x86_64-win32\"</code>\n- <code>\"x86_64-macos\"</code>\n- <code>\"arm64-macos\"</code>\n- <code>\"x86_64-linux\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.platform",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "get preference value",
            "description": "Get preference value\nThe schema for the preference value should be defined beforehand.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.get",
            "notes": [],
            "parameters": [
                {
                    "doc": "dot-separated preference key path",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "current pref value or default if a schema for the key path exists, nil otherwise",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if preference value is explicitly set",
            "description": "Check if preference value is explicitly set\nThe schema for the preference value should be defined beforehand.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.is_set",
            "notes": [],
            "parameters": [
                {
                    "doc": "dot-separated preference key path",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "flag indicating if the value is explicitly set",
                    "name": "value",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array schema",
            "description": "array schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.array",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required opts: <dl><dt><code>item <small>schema</small></code></dt><dd>array item schema</dd></dl>  Optional opts: <dl><dt><code>default <small>item[]</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "boolean schema",
            "description": "boolean schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.boolean",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional opts: <dl><dt><code>default <small>boolean</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "enum value schema",
            "description": "enum value schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.enum",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required opts: <dl><dt><code>values <small>any[]</small></code></dt><dd>allowed values, must be scalar (nil, boolean, number or string)</dd></dl>  Optional opts: <dl><dt><code>default <small>any</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "integer schema",
            "description": "integer schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.integer",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional opts: <dl><dt><code>default <small>integer</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "keyword schema",
            "description": "keyword schema\nA keyword is a short string that is interned within the editor runtime, useful e.g. for identifiers",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.keyword",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional opts: <dl><dt><code>default <small>string</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "floating-point number schema",
            "description": "floating-point number schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.number",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional opts: <dl><dt><code>default <small>number</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "heterogeneous object schema",
            "description": "heterogeneous object schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.object",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required opts: <dl><dt><code>properties <small>table&lt;string, schema&gt;</small></code></dt><dd>a table from property key (string) to value schema</dd></dl>  Optional opts: <dl><dt><code>default <small>table</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "homogeneous object schema",
            "description": "homogeneous object schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.object_of",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required opts: <dl><dt><code>key <small>schema</small></code></dt><dd>table key schema</dd><dt><code>val <small>schema</small></code></dt><dd>table value schema</dd></dl>  Optional opts: <dl><dt><code>default <small>table</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "password schema",
            "description": "password schema\nA password is a string that is encrypted when stored in a preference file",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.password",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional opts: <dl><dt><code>default <small>string</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set schema",
            "description": "set schema\nSet is represented as a lua table with <code>true</code> values",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.set",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required opts: <dl><dt><code>item <small>schema</small></code></dt><dd>set item schema</dd></dl>  Optional opts: <dl><dt><code>default <small>table&lt;item, true&gt;</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "string schema",
            "description": "string schema",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.string",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional opts: <dl><dt><code>default <small>string</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "tuple schema",
            "description": "tuple schema\nA tuple is a fixed-length array where each item has its own defined type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.schema.tuple",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required opts: <dl><dt><code>items <small>schema[]</small></code></dt><dd>schemas for the items</dd></dl>  Optional opts: <dl><dt><code>default <small>any[]</small></code></dt><dd>default value</dd><dt><code>scope <small>string</small></code></dt><dd>preference scope; either: <ul><li><code>editor.prefs.SCOPE.GLOBAL</code>: same preference value is used in every project on this computer</li><li><code>editor.prefs.SCOPE.PROJECT</code>: a separate preference value per project</li></ul></dd></dl>",
                    "is_optional": "False",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Prefs schema",
                    "name": "value",
                    "types": [
                        "schema"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"global\"</code>",
            "description": "<code>\"global\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.SCOPE.GLOBAL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"project\"</code>",
            "description": "<code>\"project\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.SCOPE.PROJECT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "set preference value",
            "description": "Set preference value\nThe schema for the preference value should be defined beforehand.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.prefs.set",
            "notes": [],
            "parameters": [
                {
                    "doc": "dot-separated preference key path",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "new pref value to set",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "query information about a project resource",
            "description": "Query information about a project resource",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.resource_attributes",
            "notes": [],
            "parameters": [
                {
                    "doc": "Resource path (starting with <code>/</code>)",
                    "is_optional": "False",
                    "name": "resource_path",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A table with the following keys:<dl><dt><code>exists <small>boolean</small></code></dt><dd>whether a resource identified by the path exists in the project</dd><dt><code>is_file <small>boolean</small></code></dt><dd>whether the resource represents a file with some content</dd><dt><code>is_directory <small>boolean</small></code></dt><dd>whether the resource represents a directory</dd></dl>",
                    "name": "value",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "persist any unsaved changes to disk",
            "description": "Persist any unsaved changes to disk",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.save",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "change the editor state in a single, undoable transaction",
            "description": "Change the editor state in a single, undoable transaction",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.transact",
            "notes": [],
            "parameters": [
                {
                    "doc": "] An array of transaction steps created using <code>editor.tx.*</code> functions",
                    "is_optional": "False",
                    "name": "txs",
                    "types": [
                        "transaction_step["
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a transaction step that will add a child item to a node's list property when transacted with <code>editor.transact()</code>.",
            "description": "Create a transaction step that will add a child item to a node's list property when transacted with <code>editor.transact()</code>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.tx.add",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Added item for the property, a table from property key to either a valid <code>editor.tx.set()</code>-able value, or an array of valid <code>editor.tx.add()</code>-able values",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a transaction step that will remove all items from node's list property when transacted with <code>editor.transact()</code>.",
            "description": "Create a transaction step that will remove all items from node's list property when transacted with <code>editor.transact()</code>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.tx.clear",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A transaction step",
                    "name": "tx",
                    "types": [
                        "transaction_step"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a transaction step that will remove a child node from the node's list property when transacted with <code>editor.transact()</code>.",
            "description": "Create a transaction step that will remove a child node from the node's list property when transacted with <code>editor.transact()</code>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.tx.remove",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "child_node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A transaction step",
                    "name": "tx",
                    "types": [
                        "transaction_step"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a transaction step that reorders child nodes in a node list defined by the property if supported (see <code>editor.can_reorder()</code>)",
            "description": "Create a transaction step that reorders child nodes in a node list defined by the property if supported (see <code>editor.can_reorder()</code>)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.tx.reorder",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "array of child nodes (the same as returned by <code>editor.get(node, property)</code>) in new order",
                    "is_optional": "False",
                    "name": "child_nodes",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A transaction step",
                    "name": "tx",
                    "types": [
                        "transaction_step"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a transaction step that will reset an overridden property to its default value when transacted with <code>editor.transact()</code>.",
            "description": "Create a transaction step that will reset an overridden property to its default value when transacted with <code>editor.transact()</code>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.tx.reset",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A transaction step",
                    "name": "tx",
                    "types": [
                        "transaction_step"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create transaction step that will set the node's property to a supplied value when transacted with <code>editor.transact()</code>.",
            "description": "Create transaction step that will set the node's property to a supplied value when transacted with <code>editor.transact()</code>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.tx.set",
            "notes": [],
            "parameters": [
                {
                    "doc": "Either resource path (e.g. <code>\"/main/game.script\"</code>), or internal node id passed to the script by the editor",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "string",
                        "userdata"
                    ]
                },
                {
                    "doc": "Either <code>\"path\"</code>, <code>\"text\"</code>, or a property from the Outline view (hover the label to see its editor script name)",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "A new value for the property",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A transaction step",
                    "name": "tx",
                    "types": [
                        "transaction_step"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"bottom\"</code>",
            "description": "<code>\"bottom\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.BOTTOM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"bottom-left\"</code>",
            "description": "<code>\"bottom-left\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.BOTTOM_LEFT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"bottom-right\"</code>",
            "description": "<code>\"bottom-right\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.BOTTOM_RIGHT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"center\"</code>",
            "description": "<code>\"center\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.CENTER",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"left\"</code>",
            "description": "<code>\"left\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.LEFT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"right\"</code>",
            "description": "<code>\"right\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.RIGHT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"top\"</code>",
            "description": "<code>\"top\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.TOP",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"top-left\"</code>",
            "description": "<code>\"top-left\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.TOP_LEFT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"top-right\"</code>",
            "description": "<code>\"top-right\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ALIGNMENT.TOP_RIGHT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "button with a label and/or an icon",
            "description": "Button with a label and/or an icon",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.button",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>on_pressed <small>function</small></code></dt><dd>button press callback, will be invoked without arguments when the user presses the button</dd><dt><code>text <small>string</small></code></dt><dd>the text</dd><dt><code>text_alignment <small>string</small></code></dt><dd>text alignment within paragraph bounds; either: <ul><li><code>editor.ui.TEXT_ALIGNMENT.LEFT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.CENTER</code></li><li><code>editor.ui.TEXT_ALIGNMENT.RIGHT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.JUSTIFY</code></li></ul></dd><dt><code>icon <small>string</small></code></dt><dd>predefined icon name; either: <ul><li><code>editor.ui.ICON.OPEN_RESOURCE</code></li><li><code>editor.ui.ICON.PLUS</code></li><li><code>editor.ui.ICON.MINUS</code></li><li><code>editor.ui.ICON.CLEAR</code></li></ul></dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check box with a label",
            "description": "Check box with a label",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.check_box",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>boolean</small></code></dt><dd>determines if the checkbox should appear checked</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>change callback, will receive the new value</dd><dt><code>text <small>string</small></code></dt><dd>the text</dd><dt><code>text_alignment <small>string</small></code></dt><dd>text alignment within paragraph bounds; either: <ul><li><code>editor.ui.TEXT_ALIGNMENT.LEFT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.CENTER</code></li><li><code>editor.ui.TEXT_ALIGNMENT.RIGHT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.JUSTIFY</code></li></ul></dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"error\"</code>",
            "description": "<code>\"error\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.COLOR.ERROR",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"hint\"</code>",
            "description": "<code>\"hint\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.COLOR.HINT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"override\"</code>",
            "description": "<code>\"override\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.COLOR.OVERRIDE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"text\"</code>",
            "description": "<code>\"text\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.COLOR.TEXT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"warning\"</code>",
            "description": "<code>\"warning\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.COLOR.WARNING",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "convert a function to a UI component.",
            "description": "Convert a function to a UI component.\nThe wrapped function may call any hooks functions (<code>editor.ui.use_*</code>), but on any function invocation, the hooks calls must be the same, and in the same order. This means that hooks should not be used inside loops and conditions or after a conditional return statement.\nThe following props are supported automatically:<dl><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.component",
            "notes": [],
            "parameters": [
                {
                    "doc": "function, will receive a single table of props when called",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "decorated component function that may be invoked with a props table create component",
                    "name": "value",
                    "types": [
                        "function"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "dialog component, a top-level window component that can't be used as a child of other components",
            "description": "Dialog component, a top-level window component that can't be used as a child of other components",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.dialog",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required props: <dl><dt><code>title <small>string</small></code></dt><dd>OS dialog window title</dd></dl>  Optional props: <dl><dt><code>header <small>component</small></code></dt><dd>top part of the dialog, defaults to <code>editor.ui.heading({text = props.title})</code></dd><dt><code>content <small>component</small></code></dt><dd>content of the dialog</dd><dt><code>buttons <small>component[]</small></code></dt><dd>array of <code>editor.ui.dialog_button(...)</code> components, footer of the dialog. Defaults to a single Close button</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "dialog button shown in the footer of a dialog",
            "description": "Dialog button shown in the footer of a dialog",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.dialog_button",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required props: <dl><dt><code>text <small>string</small></code></dt><dd>button text</dd></dl>  Optional props: <dl><dt><code>result <small>any</small></code></dt><dd>value returned by <code>editor.ui.show_dialog(...)</code> if this button is pressed</dd><dt><code>default <small>boolean</small></code></dt><dd>if set, pressing <code>Enter</code> in the dialog will trigger this button</dd><dt><code>cancel <small>boolean</small></code></dt><dd>if set, pressing <code>Escape</code> in the dialog will trigger this button</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the button can be interacted with</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "input component for selecting files from the file system",
            "description": "Input component for selecting files from the file system",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.external_file_field",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>string</small></code></dt><dd>file or directory path; resolved against project root if relative</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>value change callback, will receive the absolute path of a selected file/folder or nil if the field was cleared; even though the selector dialog allows selecting only files, it's possible to receive directories and non-existent file system entries using text field input</dd><dt><code>title <small>string</small></code></dt><dd>OS window title</dd><dt><code>filters <small>table[]</small></code></dt><dd>File filters, an array of filter tables, where each filter has following keys:<dl><dt><code>description <small>string</small></code></dt><dd>string explaining the filter, e.g. <code>\"Text files (<em>.txt)\"</code></dd><dt><code>extensions <small>string[]</small></code></dt><dd>array of file extension patterns, e.g. <code>\"</em>.txt\"</code>, <code>\"<em>.</em>\"</code> or <code>\"game.project\"</code></dd></dl></dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "layout container that places its children in a 2D grid",
            "description": "Layout container that places its children in a 2D grid",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.grid",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>children <small>component[][]</small></code></dt><dd>array of arrays of child components</dd><dt><code>rows <small>table[]</small></code></dt><dd>array of row option tables, separate configuration for each row:<dl><dt><code>grow <small>boolean</small></code></dt><dd>determines if the row should grow to fill available space</dd></dl></dd><dt><code>columns <small>table[]</small></code></dt><dd>array of column option tables, separate configuration for each column:<dl><dt><code>grow <small>boolean</small></code></dt><dd>determines if the column should grow to fill available space</dd></dl></dd><dt><code>padding <small>string, number</small></code></dt><dd>empty space from the edges of the container to its children; either: <ul><li><code>editor.ui.PADDING.NONE</code></li><li><code>editor.ui.PADDING.SMALL</code></li><li><code>editor.ui.PADDING.MEDIUM</code></li><li><code>editor.ui.PADDING.LARGE</code></li><li>non-negative number, pixels</li></ul></dd><dt><code>spacing <small>string, number</small></code></dt><dd>empty space between child components, defaults to <code>editor.ui.SPACING.MEDIUM</code>; either: <ul><li><code>editor.ui.SPACING.NONE</code></li><li><code>editor.ui.SPACING.SMALL</code></li><li><code>editor.ui.SPACING.MEDIUM</code></li><li><code>editor.ui.SPACING.LARGE</code></li><li>non-negative number, pixels</li></ul></dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "a text heading",
            "description": "A text heading",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.heading",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>text <small>string</small></code></dt><dd>the text</dd><dt><code>text_alignment <small>string</small></code></dt><dd>text alignment within paragraph bounds; either: <ul><li><code>editor.ui.TEXT_ALIGNMENT.LEFT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.CENTER</code></li><li><code>editor.ui.TEXT_ALIGNMENT.RIGHT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.JUSTIFY</code></li></ul></dd><dt><code>color <small>string</small></code></dt><dd>semantic color, defaults to <code>editor.ui.COLOR.TEXT</code>; either: <ul><li><code>editor.ui.COLOR.TEXT</code></li><li><code>editor.ui.COLOR.HINT</code></li><li><code>editor.ui.COLOR.OVERRIDE</code></li><li><code>editor.ui.COLOR.WARNING</code></li><li><code>editor.ui.COLOR.ERROR</code></li></ul></dd><dt><code>word_wrap <small>boolean</small></code></dt><dd>determines if the lines of text are word-wrapped when they don't fit in the assigned bounds, defaults to true</dd><dt><code>style <small>string</small></code></dt><dd>heading style, defaults to <code>editor.ui.HEADING_STYLE.H3</code>; either: <ul><li><code>editor.ui.HEADING_STYLE.H1</code></li><li><code>editor.ui.HEADING_STYLE.H2</code></li><li><code>editor.ui.HEADING_STYLE.H3</code></li><li><code>editor.ui.HEADING_STYLE.H4</code></li><li><code>editor.ui.HEADING_STYLE.H5</code></li><li><code>editor.ui.HEADING_STYLE.H6</code></li><li><code>editor.ui.HEADING_STYLE.DIALOG</code></li><li><code>editor.ui.HEADING_STYLE.FORM</code></li></ul></dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"dialog\"</code>",
            "description": "<code>\"dialog\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.DIALOG",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"form\"</code>",
            "description": "<code>\"form\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.FORM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"h1\"</code>",
            "description": "<code>\"h1\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.H1",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"h2\"</code>",
            "description": "<code>\"h2\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.H2",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"h3\"</code>",
            "description": "<code>\"h3\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.H3",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"h4\"</code>",
            "description": "<code>\"h4\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.H4",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"h5\"</code>",
            "description": "<code>\"h5\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.H5",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"h6\"</code>",
            "description": "<code>\"h6\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.HEADING_STYLE.H6",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "layout container that places its children in a horizontal row one after another",
            "description": "Layout container that places its children in a horizontal row one after another",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.horizontal",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>children <small>component[]</small></code></dt><dd>array of child components</dd><dt><code>padding <small>string, number</small></code></dt><dd>empty space from the edges of the container to its children; either: <ul><li><code>editor.ui.PADDING.NONE</code></li><li><code>editor.ui.PADDING.SMALL</code></li><li><code>editor.ui.PADDING.MEDIUM</code></li><li><code>editor.ui.PADDING.LARGE</code></li><li>non-negative number, pixels</li></ul></dd><dt><code>spacing <small>string, number</small></code></dt><dd>empty space between child components, defaults to <code>editor.ui.SPACING.MEDIUM</code>; either: <ul><li><code>editor.ui.SPACING.NONE</code></li><li><code>editor.ui.SPACING.SMALL</code></li><li><code>editor.ui.SPACING.MEDIUM</code></li><li><code>editor.ui.SPACING.LARGE</code></li><li>non-negative number, pixels</li></ul></dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "an icon from a predefined set",
            "description": "An icon from a predefined set",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.icon",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required props: <dl><dt><code>icon <small>string</small></code></dt><dd>predefined icon name; either: <ul><li><code>editor.ui.ICON.OPEN_RESOURCE</code></li><li><code>editor.ui.ICON.PLUS</code></li><li><code>editor.ui.ICON.MINUS</code></li><li><code>editor.ui.ICON.CLEAR</code></li></ul></dd></dl>  Optional props: <dl><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"clear\"</code>",
            "description": "<code>\"clear\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ICON.CLEAR",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"minus\"</code>",
            "description": "<code>\"minus\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ICON.MINUS",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"open-resource\"</code>",
            "description": "<code>\"open-resource\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ICON.OPEN_RESOURCE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"plus\"</code>",
            "description": "<code>\"plus\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ICON.PLUS",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "integer input component based on a text field, reports changes on commit (<code>Enter</code> or focus loss)",
            "description": "Integer input component based on a text field, reports changes on commit (<code>Enter</code> or focus loss)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.integer_field",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>any</small></code></dt><dd>value</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>value change callback, will receive the new value</dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"error\"</code>",
            "description": "<code>\"error\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ISSUE_SEVERITY.ERROR",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"warning\"</code>",
            "description": "<code>\"warning\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ISSUE_SEVERITY.WARNING",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "label intended for use with input components",
            "description": "Label intended for use with input components",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.label",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>text <small>string</small></code></dt><dd>the text</dd><dt><code>text_alignment <small>string</small></code></dt><dd>text alignment within paragraph bounds; either: <ul><li><code>editor.ui.TEXT_ALIGNMENT.LEFT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.CENTER</code></li><li><code>editor.ui.TEXT_ALIGNMENT.RIGHT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.JUSTIFY</code></li></ul></dd><dt><code>color <small>string</small></code></dt><dd>semantic color, defaults to <code>editor.ui.COLOR.TEXT</code>; either: <ul><li><code>editor.ui.COLOR.TEXT</code></li><li><code>editor.ui.COLOR.HINT</code></li><li><code>editor.ui.COLOR.OVERRIDE</code></li><li><code>editor.ui.COLOR.WARNING</code></li><li><code>editor.ui.COLOR.ERROR</code></li></ul></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "number input component based on a text field, reports changes on commit (<code>Enter</code> or focus loss)",
            "description": "Number input component based on a text field, reports changes on commit (<code>Enter</code> or focus loss)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.number_field",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>any</small></code></dt><dd>value</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>value change callback, will receive the new value</dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "open a resource, either in the editor or in a third-party app",
            "description": "Open a resource, either in the editor or in a third-party app",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.open_resource",
            "notes": [],
            "parameters": [
                {
                    "doc": "Resource path (starting with <code>/</code>)",
                    "is_optional": "False",
                    "name": "resource_path",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"horizontal\"</code>",
            "description": "<code>\"horizontal\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ORIENTATION.HORIZONTAL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"vertical\"</code>",
            "description": "<code>\"vertical\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.ORIENTATION.VERTICAL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"large\"</code>",
            "description": "<code>\"large\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.PADDING.LARGE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"medium\"</code>",
            "description": "<code>\"medium\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.PADDING.MEDIUM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"none\"</code>",
            "description": "<code>\"none\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.PADDING.NONE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"small\"</code>",
            "description": "<code>\"small\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.PADDING.SMALL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "a paragraph of text",
            "description": "A paragraph of text",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.paragraph",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>text <small>string</small></code></dt><dd>the text</dd><dt><code>text_alignment <small>string</small></code></dt><dd>text alignment within paragraph bounds; either: <ul><li><code>editor.ui.TEXT_ALIGNMENT.LEFT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.CENTER</code></li><li><code>editor.ui.TEXT_ALIGNMENT.RIGHT</code></li><li><code>editor.ui.TEXT_ALIGNMENT.JUSTIFY</code></li></ul></dd><dt><code>color <small>string</small></code></dt><dd>semantic color, defaults to <code>editor.ui.COLOR.TEXT</code>; either: <ul><li><code>editor.ui.COLOR.TEXT</code></li><li><code>editor.ui.COLOR.HINT</code></li><li><code>editor.ui.COLOR.OVERRIDE</code></li><li><code>editor.ui.COLOR.WARNING</code></li><li><code>editor.ui.COLOR.ERROR</code></li></ul></dd><dt><code>word_wrap <small>boolean</small></code></dt><dd>determines if the lines of text are word-wrapped when they don't fit in the assigned bounds, defaults to true</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "input component for selecting project resources",
            "description": "Input component for selecting project resources",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.resource_field",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>string</small></code></dt><dd>resource path (must start with <code>/</code>)</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>value change callback, will receive either resource path of a selected resource or nil when the field is cleared; even though the resource selector dialog allows filtering on resource extensions, it's possible to receive resources with other extensions and non-existent resources using text field input</dd><dt><code>title <small>string</small></code></dt><dd>dialog title, defaults to <code>\"Select Resource\"</code></dd><dt><code>extensions <small>string[]</small></code></dt><dd>if specified, restricts selectable resources in the dialog to specified file extensions; e.g. <code>{\"collection\", \"go\"}</code></dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "layout container that optionally shows scroll bars if child contents overflow the assigned bounds",
            "description": "Layout container that optionally shows scroll bars if child contents overflow the assigned bounds",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.scroll",
            "notes": [],
            "parameters": [
                {
                    "doc": "Required props: <dl><dt><code>content <small>component</small></code></dt><dd>content component</dd></dl>  Optional props: <dl><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "dropdown select box with an array of options",
            "description": "Dropdown select box with an array of options",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.select_box",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>any</small></code></dt><dd>selected value</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>change callback, will receive the selected value</dd><dt><code>options <small>any[]</small></code></dt><dd>array of selectable options</dd><dt><code>to_string <small>function</small></code></dt><dd>function that converts an item to a string, defaults to <code>tostring</code></dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "thin line for visual content separation, by default horizontal and aligned to center",
            "description": "Thin line for visual content separation, by default horizontal and aligned to center",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.separator",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>orientation <small>string</small></code></dt><dd>separator line orientation, <code>editor.ui.ORIENTATION.VERTICAL</code> or <code>editor.ui.ORIENTATION.HORIZONTAL</code>; either: <ul><li><code>editor.ui.ORIENTATION.VERTICAL</code></li><li><code>editor.ui.ORIENTATION.HORIZONTAL</code></li></ul></dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "show a modal dialog and await a result",
            "description": "Show a modal dialog and await a result",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.show_dialog",
            "notes": [],
            "parameters": [
                {
                    "doc": "a component that resolves to <code>editor.ui.dialog(...)</code>",
                    "is_optional": "False",
                    "name": "dialog",
                    "types": [
                        "component"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "dialog result, the value used as a <code>result</code> prop in a <code>editor.ui.dialog_button({...})</code> selected by the user, or <code>nil</code> if the dialog was closed and there was no <code>cancel = true</code> dialog button with <code>result</code> prop set",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "show a modal OS directory selection dialog and await a result",
            "description": "Show a modal OS directory selection dialog and await a result",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.show_external_directory_dialog",
            "notes": [],
            "parameters": [
                {
                    "doc": "<dl><dt><code>path <small>string</small></code></dt><dd>initial file or directory path used by the dialog; resolved against project root if relative</dd><dt><code>title <small>string</small></code></dt><dd>OS window title</dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "either absolute directory path or nil if user canceled directory selection",
                    "name": "value",
                    "types": [
                        "string",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "show a modal OS file selection dialog and await a result",
            "description": "Show a modal OS file selection dialog and await a result",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.show_external_file_dialog",
            "notes": [],
            "parameters": [
                {
                    "doc": "<dl><dt><code>path <small>string</small></code></dt><dd>initial file or directory path used by the dialog; resolved against project root if relative</dd><dt><code>title <small>string</small></code></dt><dd>OS window title</dd><dt><code>filters <small>table[]</small></code></dt><dd>File filters, an array of filter tables, where each filter has following keys:<dl><dt><code>description <small>string</small></code></dt><dd>string explaining the filter, e.g. <code>\"Text files (*.txt)\"</code></dd><dt><code>extensions <small>string[]</small></code></dt><dd>array of file extension patterns, e.g. <code>\"*.txt\"</code>, <code>\"*.*\"</code> or <code>\"game.project\"</code></dd></dl></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "either absolute file path or nil if user canceled file selection",
                    "name": "value",
                    "types": [
                        "string",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "show a modal resource selection dialog and await a result",
            "description": "Show a modal resource selection dialog and await a result",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.show_resource_dialog",
            "notes": [],
            "parameters": [
                {
                    "doc": "<dl><dt><code>extensions <small>string[]</small></code></dt><dd>if specified, restricts selectable resources in the dialog to specified file extensions; e.g. <code>{\"collection\", \"go\"}</code></dd><dt><code>selection <small>string</small></code></dt><dd>either <code>\"single\"</code> or <code>\"multiple\"</code>, defaults to <code>\"single\"</code></dd><dt><code>title <small>string</small></code></dt><dd>dialog title, defaults to <code>\"Select Resource\"</code></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "|nil] if user made no selection, returns <code>nil</code>. Otherwise, if selection mode is <code>\"single\"</code>, returns selected resource path; otherwise returns a non-empty array of selected resource paths.",
                    "name": "value",
                    "types": [
                        "string",
                        "string["
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"large\"</code>",
            "description": "<code>\"large\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.SPACING.LARGE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"medium\"</code>",
            "description": "<code>\"medium\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.SPACING.MEDIUM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"none\"</code>",
            "description": "<code>\"none\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.SPACING.NONE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"small\"</code>",
            "description": "<code>\"small\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.SPACING.SMALL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "string input component based on a text field, reports changes on commit (<code>Enter</code> or focus loss)",
            "description": "String input component based on a text field, reports changes on commit (<code>Enter</code> or focus loss)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.string_field",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>value <small>any</small></code></dt><dd>value</dd><dt><code>on_value_changed <small>function</small></code></dt><dd>value change callback, will receive the new value</dd><dt><code>issue <small>table</small></code></dt><dd>issue related to the input; table with the following keys (all required):<dl><dt><code>severity <small>string</small></code></dt><dd>either <code>editor.ui.ISSUE_SEVERITY.WARNING</code> or <code>editor.ui.ISSUE_SEVERITY.ERROR</code></dd><dt><code>message <small>string</small></code></dt><dd>issue message, will be shown in a tooltip</dd></dl></dd><dt><code>tooltip <small>string</small></code></dt><dd>tooltip message, shown on hover</dd><dt><code>enabled <small>boolean</small></code></dt><dd>determines if the input component can be interacted with</dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"center\"</code>",
            "description": "<code>\"center\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.TEXT_ALIGNMENT.CENTER",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"justify\"</code>",
            "description": "<code>\"justify\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.TEXT_ALIGNMENT.JUSTIFY",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"left\"</code>",
            "description": "<code>\"left\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.TEXT_ALIGNMENT.LEFT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"right\"</code>",
            "description": "<code>\"right\"</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.TEXT_ALIGNMENT.RIGHT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "a hook that caches the result of a computation between re-renders.",
            "description": "A hook that caches the result of a computation between re-renders.\nSee <code>editor.ui.component</code> for hooks caveats and rules. If any of the arguments to <code>use_memo</code> change during a component refresh (checked with <code>==</code>), the value will be recomputed.",
            "error": "",
            "examples": "<pre><code>local function increment(n)\n    return n + 1\nend\n\nlocal function make_listener(set_count)\n    return function()\n        set_count(increment)\n    end\nend\n\nlocal counter_button = editor.ui.component(function(props)\n    local count, set_count = editor.ui.use_state(props.count)\n    local on_pressed = editor.ui.use_memo(make_listener, set_count)\n    return editor.ui.text_button {\n        text = tostring(count),\n        on_pressed = on_pressed\n    }\nend)</code></pre>",
            "language": "",
            "members": [],
            "name": "editor.ui.use_memo",
            "notes": [],
            "parameters": [
                {
                    "doc": "function that will be used to compute the cached value",
                    "is_optional": "False",
                    "name": "compute",
                    "types": [
                        "function"
                    ]
                },
                {
                    "doc": "args to the computation function",
                    "is_optional": "True",
                    "name": "...",
                    "types": [
                        "...any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "all returned values of the compute function",
                    "name": "values",
                    "types": [
                        "...any"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "a hook that adds local state to the component.",
            "description": "A hook that adds local state to the component.\nSee <code>editor.ui.component</code> for hooks caveats and rules. If any of the arguments to <code>use_state</code> change during a component refresh (checked with <code>==</code>), the current state will be reset to the initial one.",
            "error": "",
            "examples": "<pre><code>local function increment(n)\n  return n + 1\nend\n\nlocal counter_button = editor.ui.component(function(props)\n  local count, set_count = editor.ui.use_state(props.count)\n  return editor.ui.text_button {\n    text = tostring(count),\n    on_pressed = function()\n      set_count(increment)\n    end\n  }\nend)</code></pre>",
            "language": "",
            "members": [],
            "name": "editor.ui.use_state",
            "notes": [],
            "parameters": [
                {
                    "doc": "local state initializer, either initial data structure or function that produces the data structure",
                    "is_optional": "False",
                    "name": "init",
                    "types": [
                        "any",
                        "function"
                    ]
                },
                {
                    "doc": "used when <code>init</code> is a function, the args are passed to the initializer function",
                    "is_optional": "True",
                    "name": "...",
                    "types": [
                        "...any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "current local state, starts with initial state, then may be changed using the returned <code>set_state</code> function",
                    "name": "state",
                    "types": [
                        "any"
                    ]
                },
                {
                    "doc": "function that changes the local state and causes the component to refresh. The function may be used in 2 ways:                         <ul>                           <li>to set the state to some other data structure: pass the data structure as a value</li>                           <li>to replace the state using updater function: pass a function to <code>set_state</code> \u2014 it will be invoked with the current state, as well as with the rest of the arguments passed to <code>set_state</code> after the updater function. The state will be set to the value returned from the updater function</lia>                         </ul>",
                    "name": "set_state",
                    "types": [
                        "function"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "layout container that places its children in a vertical column one after another",
            "description": "Layout container that places its children in a vertical column one after another",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.ui.vertical",
            "notes": [],
            "parameters": [
                {
                    "doc": "Optional props: <dl><dt><code>children <small>component[]</small></code></dt><dd>array of child components</dd><dt><code>padding <small>string, number</small></code></dt><dd>empty space from the edges of the container to its children; either: <ul><li><code>editor.ui.PADDING.NONE</code></li><li><code>editor.ui.PADDING.SMALL</code></li><li><code>editor.ui.PADDING.MEDIUM</code></li><li><code>editor.ui.PADDING.LARGE</code></li><li>non-negative number, pixels</li></ul></dd><dt><code>spacing <small>string, number</small></code></dt><dd>empty space between child components, defaults to <code>editor.ui.SPACING.MEDIUM</code>; either: <ul><li><code>editor.ui.SPACING.NONE</code></li><li><code>editor.ui.SPACING.SMALL</code></li><li><code>editor.ui.SPACING.MEDIUM</code></li><li><code>editor.ui.SPACING.LARGE</code></li><li>non-negative number, pixels</li></ul></dd><dt><code>alignment <small>string</small></code></dt><dd>alignment of the component content within its assigned bounds, defaults to <code>editor.ui.ALIGNMENT.TOP_LEFT</code>; either: <ul><li><code>editor.ui.ALIGNMENT.TOP_LEFT</code></li><li><code>editor.ui.ALIGNMENT.TOP</code></li><li><code>editor.ui.ALIGNMENT.TOP_RIGHT</code></li><li><code>editor.ui.ALIGNMENT.LEFT</code></li><li><code>editor.ui.ALIGNMENT.CENTER</code></li><li><code>editor.ui.ALIGNMENT.RIGHT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_LEFT</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM</code></li><li><code>editor.ui.ALIGNMENT.BOTTOM_RIGHT</code></li></ul></dd><dt><code>grow <small>boolean</small></code></dt><dd>determines if the component should grow to fill available space in a <code>horizontal</code> or <code>vertical</code> layout container</dd><dt><code>row_span <small>integer</small></code></dt><dd>how many rows the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd><dt><code>column_span <small>integer</small></code></dt><dd>how many columns the component spans inside a grid container, must be positive. This prop is only useful for components inside a <code>grid</code> container.</dd></dl>",
                    "is_optional": "False",
                    "name": "props",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UI component",
                    "name": "value",
                    "types": [
                        "component"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "a string, version name of Defold",
            "description": "A string, version name of Defold",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "editor.version",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "perform an HTTP request",
            "description": "Perform an HTTP request",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.request",
            "notes": [],
            "parameters": [
                {
                    "doc": "request URL",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Additional request options, a table with the following keys:<dl><dt><code>method <small>string</small></code></dt><dd>request method, defaults to <code>\"GET\"</code></dd><dt><code>headers <small>table</small></code></dt><dd>request headers, a table with string keys and values</dd><dt><code>body <small>string</small></code></dt><dd>request body</dd><dt><code>as <small>string</small></code></dt><dd>response body converter, either <code>\"string\"</code> or <code>\"json\"</code></dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "HTTP response, a table with the following keys:<dl><dt><code>status <small>integer</small></code></dt><dd>response code</dd><dt><code>headers <small>table</small></code></dt><dd>response headers, a table where each key is a lower-cased string, and each value is either a string or an array of strings if the header was repeated</dd><dt><code>body <small>string, any, nil</small></code></dt><dd>response body, present only when <code>as</code> option was provided, either a string or a parsed json value</dd></dl>",
                    "name": "response",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create HTTP response that will stream the content of a file defined by the path",
            "description": "Create HTTP response that will stream the content of a file defined by the path",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.external_file_response",
            "notes": [],
            "parameters": [
                {
                    "doc": "External file path, resolved against project root if relative",
                    "is_optional": "False",
                    "name": "path",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "HTTP status code, an integer, default 200",
                    "is_optional": "True",
                    "name": "status",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "HTTP response headers, a table from lower-case header names to header values",
                    "is_optional": "True",
                    "name": "headers",
                    "types": [
                        "table&lt;string,string&gt;"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "HTTP response value, userdata",
                    "name": "response",
                    "types": [
                        "response"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create HTTP response with a JSON value",
            "description": "Create HTTP response with a JSON value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.json_response",
            "notes": [],
            "parameters": [
                {
                    "doc": "Any Lua value that may be represented as JSON",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                },
                {
                    "doc": "HTTP status code, an integer, default 200",
                    "is_optional": "True",
                    "name": "status",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "HTTP response headers, a table from lower-case header names to header values",
                    "is_optional": "True",
                    "name": "headers",
                    "types": [
                        "table&lt;string,string&gt;"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "HTTP response value, userdata",
                    "name": "response",
                    "types": [
                        "response"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "editor's HTTP server local url",
            "description": "Editor's HTTP server local url",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.local_url",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "editor's HTTP server port",
            "description": "Editor's HTTP server port",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.port",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "create HTTP response that will stream the content of a resource defined by the resource path",
            "description": "Create HTTP response that will stream the content of a resource defined by the resource path",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.resource_response",
            "notes": [],
            "parameters": [
                {
                    "doc": "Resource path (starting with <code>/</code>)",
                    "is_optional": "False",
                    "name": "resource_path",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "HTTP status code, an integer, default 200",
                    "is_optional": "True",
                    "name": "status",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "HTTP response headers, a table from lower-case header names to header values",
                    "is_optional": "True",
                    "name": "headers",
                    "types": [
                        "table&lt;string,string&gt;"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "HTTP response value, userdata",
                    "name": "response",
                    "types": [
                        "response"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create HTTP response",
            "description": "Create HTTP response",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.response",
            "notes": [],
            "parameters": [
                {
                    "doc": "HTTP status code, an integer, default 200",
                    "is_optional": "True",
                    "name": "status",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "HTTP response headers, a table from lower-case header names to header values",
                    "is_optional": "True",
                    "name": "headers",
                    "types": [
                        "table&lt;string,string&gt;"
                    ]
                },
                {
                    "doc": "HTTP response body",
                    "is_optional": "True",
                    "name": "body",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "HTTP response value, userdata",
                    "name": "response",
                    "types": [
                        "response"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create route definition for the editor's HTTP server",
            "description": "Create route definition for the editor's HTTP server",
            "error": "",
            "examples": "Receive JSON and respond with JSON:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">http</span>.<span class=\"nv\">server</span>.<span class=\"nv\">route</span><span class=\"ss\">(</span>\n  <span class=\"s2\">&quot;</span><span class=\"s\">/json</span><span class=\"s2\">&quot;</span>, <span class=\"s2\">&quot;</span><span class=\"s\">POST</span><span class=\"s2\">&quot;</span>, <span class=\"s2\">&quot;</span><span class=\"s\">json</span><span class=\"s2\">&quot;</span>,\n  <span class=\"nv\">function</span><span class=\"ss\">(</span><span class=\"nv\">request</span><span class=\"ss\">)</span>\n    <span class=\"nv\">pprint</span><span class=\"ss\">(</span><span class=\"nv\">request</span>.<span class=\"nv\">body</span><span class=\"ss\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">200</span>\n  <span class=\"k\">end</span>\n<span class=\"ss\">)</span>\n</code></pre></div>\n\nExtract parts of the path:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">http</span>.<span class=\"nv\">server</span>.<span class=\"nv\">route</span><span class=\"ss\">(</span>\n  <span class=\"s2\">&quot;</span><span class=\"s\">/users/{user}/orders</span><span class=\"s2\">&quot;</span>,\n  <span class=\"nv\">function</span><span class=\"ss\">(</span><span class=\"nv\">request</span><span class=\"ss\">)</span>\n    <span class=\"nv\">print</span><span class=\"ss\">(</span><span class=\"nv\">request</span>.<span class=\"nv\">user</span><span class=\"ss\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"ss\">)</span>\n</code></pre></div>\n\nSimple file server:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nv\">http</span>.<span class=\"nv\">server</span>.<span class=\"nv\">route</span><span class=\"ss\">(</span>\n  <span class=\"s2\">&quot;</span><span class=\"s\">/files/{*file}</span><span class=\"s2\">&quot;</span>,\n  <span class=\"nv\">function</span><span class=\"ss\">(</span><span class=\"nv\">request</span><span class=\"ss\">)</span>\n    <span class=\"nv\">local</span> <span class=\"nv\">attrs</span> <span class=\"o\">=</span> <span class=\"nv\">editor</span>.<span class=\"nv\">external_file_attributes</span><span class=\"ss\">(</span><span class=\"nv\">request</span>.<span class=\"nv\">file</span><span class=\"ss\">)</span>\n    <span class=\"k\">if</span> <span class=\"nv\">attrs</span>.<span class=\"nv\">is_file</span> <span class=\"k\">then</span>\n      <span class=\"k\">return</span> <span class=\"nv\">http</span>.<span class=\"nv\">server</span>.<span class=\"nv\">external_file_response</span><span class=\"ss\">(</span><span class=\"nv\">request</span>.<span class=\"nv\">file</span><span class=\"ss\">)</span>\n    <span class=\"k\">elseif</span> <span class=\"nv\">attrs</span>.<span class=\"nv\">is_directory</span> <span class=\"k\">then</span>\n      <span class=\"k\">return</span> <span class=\"mi\">400</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">return</span> <span class=\"mi\">404</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"ss\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "http.server.route",
            "notes": [],
            "parameters": [
                {
                    "doc": "HTTP URI path, starts with <code>/</code>; may include path patterns (<code>{name}</code> for a single segment and <code>{*name}</code> for the rest of the request path) that will be extracted from the path and provided to the handler as a part of the request",
                    "is_optional": "False",
                    "name": "path",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "HTTP request method, default <code>\"GET\"</code>",
                    "is_optional": "True",
                    "name": "method",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Request body converter, either <code>\"string\"</code> or <code>\"json\"</code>; the body will be discarded if not specified",
                    "is_optional": "True",
                    "name": "as",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "Request handler function, will receive request argument, a table with the following keys:<dl><dt><code>path <small>string</small></code></dt><dd>full matched path, a string starting with <code>/</code></dd><dt><code>method <small>string</small></code></dt><dd>HTTP request method, e.g. <code>\"POST\"</code></dd><dt><code>headers <small>table&lt;string,(string|string[])&gt;</small></code></dt><dd>HTTP request headers, a table from lower-case header names to header values</dd><dt><code>query <small>string</small></code></dt><dd>optional query string</dd><dt><code>body <small>string, any</small></code></dt><dd>optional request body, depends on the <code>as</code> argument</dd></dl> Handler function should return either a single response value, or 0 or more arguments to the <code>http.server.response()</code> function",
                    "is_optional": "False",
                    "name": "handler",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "HTTP server route",
                    "name": "route",
                    "types": [
                        "route"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "editor's HTTP server url",
            "description": "Editor's HTTP server url",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "http.server.url",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "decode JSON string to Lua value",
            "description": "Decode JSON string to Lua value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "json.decode",
            "notes": [],
            "parameters": [
                {
                    "doc": "json data",
                    "is_optional": "False",
                    "name": "json",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "A table with the following keys:<dl><dt><code>all <small>boolean</small></code></dt><dd>if <code>true</code>, decodes all json values in a string and returns an array</dd></dl>",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "encode Lua value to JSON string",
            "description": "Encode Lua value to JSON string",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "json.encode",
            "notes": [],
            "parameters": [
                {
                    "doc": "any Lua value that may be represented as JSON",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "pretty-print a Lua value",
            "description": "Pretty-print a Lua value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "pprint",
            "notes": [],
            "parameters": [
                {
                    "doc": "any Lua value to pretty-print",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "remove all tiles",
            "description": "Remove all tiles",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.clear",
            "notes": [],
            "parameters": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "is_optional": "False",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get full information from a tile at a particular coordinate",
            "description": "Get full information from a tile at a particular coordinate",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.get_info",
            "notes": [],
            "parameters": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "is_optional": "False",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                },
                {
                    "doc": "x coordinate of a tile",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "y coordinate of a tile",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "integer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "full tile information table with the following keys:<dl><dt><code>index <small>integer</small></code></dt><dd>1-indexed tile index of a tilemap's tilesource</dd><dt><code>h_flip <small>boolean</small></code></dt><dd>horizontal flip</dd><dt><code>v_flip <small>boolean</small></code></dt><dd>vertical flip</dd><dt><code>rotate_90 <small>boolean</small></code></dt><dd>whether the tile is rotated 90 degrees clockwise</dd></dl>",
                    "name": "info",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get a tile index at a particular coordinate",
            "description": "Get a tile index at a particular coordinate",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.get_tile",
            "notes": [],
            "parameters": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "is_optional": "False",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                },
                {
                    "doc": "x coordinate of a tile",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "y coordinate of a tile",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "integer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "1-indexed tile index of a tilemap's tilesource",
                    "name": "tile_index",
                    "types": [
                        "integer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create an iterator over all tiles in a tiles data structure",
            "description": "Create an iterator over all tiles in a tiles data structure\nWhen iterating using for loop, each iteration returns x, y and tile index of a tile in a tile map",
            "error": "",
            "examples": "Iterate over all tiles in a tile map:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">local</span><span class=\"w\"> </span><span class=\"n\">layers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">editor</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"ss\">&quot;/level.tilemap&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">&quot;layers&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">#layers</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">local</span><span class=\"w\"> </span><span class=\"n\">tiles</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">editor</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">&quot;tiles&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"n\">tilemap</span><span class=\"p\">.</span><span class=\"n\">tiles</span><span class=\"p\">.</span><span class=\"n\">iterator</span><span class=\"p\">(</span><span class=\"n\">tiles</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">do</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">end</span><span class=\"w\"></span>\n<span class=\"k\">end</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.iterator",
            "notes": [],
            "parameters": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "is_optional": "False",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "iterator",
                    "name": "iter",
                    "types": [
                        "function"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a new unbounded 2d grid data structure for storing tilemap layer tiles",
            "description": "Create a new unbounded 2d grid data structure for storing tilemap layer tiles",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.new",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "remove a tile at a particular coordinate",
            "description": "Remove a tile at a particular coordinate",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.remove",
            "notes": [],
            "parameters": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "is_optional": "False",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                },
                {
                    "doc": "x coordinate of a tile",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "y coordinate of a tile",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "integer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set a tile at a particular coordinate",
            "description": "Set a tile at a particular coordinate",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "tilemap.tiles.set",
            "notes": [],
            "parameters": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "is_optional": "False",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                },
                {
                    "doc": "x coordinate of a tile",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "y coordinate of a tile",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "integer"
                    ]
                },
                {
                    "doc": "Either 1-indexed tile index of a tilemap's tilesource or full tile information table with the following keys:<dl><dt><code>index <small>integer</small></code></dt><dd>1-indexed tile index of a tilemap's tilesource</dd><dt><code>h_flip <small>boolean</small></code></dt><dd>horizontal flip</dd><dt><code>v_flip <small>boolean</small></code></dt><dd>vertical flip</dd><dt><code>rotate_90 <small>boolean</small></code></dt><dd>whether the tile is rotated 90 degrees clockwise</dd></dl>",
                    "is_optional": "False",
                    "name": "tile_or_info",
                    "types": [
                        "integer",
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "unbounded 2d grid of tiles",
                    "name": "tiles",
                    "types": [
                        "tiles"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<code>\"deflated\"</code> compression method",
            "description": "<code>\"deflated\"</code> compression method",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "zip.METHOD.DEFLATED",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "<code>\"stored\"</code> compression method, i.e. no compression",
            "description": "<code>\"stored\"</code> compression method, i.e. no compression",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "zip.METHOD.STORED",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "VARIABLE"
        },
        {
            "brief": "create a ZIP archive",
            "description": "Create a ZIP archive",
            "error": "",
            "examples": "Archive a file and a folder:\n<div class=\"codehilite\"><pre><span></span><code>zip.pack(&quot;build.zip&quot;, {&quot;build&quot;, &quot;game.project&quot;})\n</code></pre></div>\n\nChange the location of the files within the archive:\n<div class=\"codehilite\"><pre><span></span><code>zip.pack(&quot;build.zip&quot;, {\n  {&quot;build/wasm-web&quot;, &quot;.&quot;},\n  {&quot;configs/prod.json&quot;, &quot;config.json&quot;}\n})\n</code></pre></div>\n\nCreate archive without compression (much faster to create the archive, bigger archive file size, allows mmap access):\n<div class=\"codehilite\"><pre><span></span><code>zip.pack(&quot;build.zip&quot;, {method = zip.METHOD.STORED}, {\n  &quot;build&quot;,\n  &quot;resources&quot;\n})\n</code></pre></div>\n\nDon't compress one of the folders:\n<div class=\"codehilite\"><pre><span></span><code>zip.pack(&quot;build.zip&quot;, {\n  {&quot;assets&quot;, method = zip.METHOD.STORED},\n  &quot;build/wasm-web&quot;\n})\n</code></pre></div>\n\nInclude files from outside the project:\n<div class=\"codehilite\"><pre><span></span><code>zip.pack(&quot;build.zip&quot;, {\n  &quot;build&quot;,\n  {&quot;../secrets/auth-key.txt&quot;, &quot;auth-key.txt&quot;}\n})\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "zip.pack",
            "notes": [],
            "parameters": [
                {
                    "doc": "output zip file path, resolved against project root if relative",
                    "is_optional": "False",
                    "name": "output_path",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "compression options, a table with the following keys:<dl><dt><code>method <small>string</small></code></dt><dd>compression method, either <code>zip.METHOD.DEFLATED</code> (default) or <code>zip.METHOD.STORED</code></dd><dt><code>level <small>integer</small></code></dt><dd>compression level, an integer between 0 and 9, only useful when the compression method is <code>zip.METHOD.DEFLATED</code>; defaults to 6</dd></dl>",
                    "is_optional": "True",
                    "name": "opts",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "entries to compress, either a string (relative path to file or folder to include) or a table with the following keys:<dl><dt><code>1 <small>string</small></code></dt><dd>required; source file or folder path to include, resolved against project root if relative</dd><dt><code>2 <small>string</small></code></dt><dd>optional; target file or folder path in the zip archive. May be omitted if source is a relative path that does not go above the project directory.</dd><dt><code>method <small>string</small></code></dt><dd>compression method, either <code>zip.METHOD.DEFLATED</code> (default) or <code>zip.METHOD.STORED</code></dd><dt><code>level <small>integer</small></code></dt><dd>compression level, an integer between 0 and 9, only useful when the compression method is <code>zip.METHOD.DEFLATED</code>; defaults to 6</dd></dl>",
                    "is_optional": "False",
                    "name": "entries",
                    "types": [
                        "string",
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Editor scripting documentation",
        "description": "Editor scripting documentation",
        "file": "",
        "language": "Lua",
        "name": "Editor",
        "namespace": "editor",
        "notes": [],
        "path": "",
        "type": "Defold Lua"
    }
}