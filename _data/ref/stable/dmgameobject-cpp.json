{
    "elements": [
        {
            "brief": "Retrieve an instance index from the index pool for...",
            "description": "Retrieve an instance index from the index pool for the collection.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AcquireInstanceIndex",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection from which to retrieve the instance index.",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HColleciton"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "index from the index pool of collection.",
                    "name": "instance",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Assign an index to the instance, only if the insta...",
            "description": "Assign an index to the instance, only if the instance is not null.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AssignInstanceIndex",
            "notes": [],
            "parameters": [
                {
                    "doc": "The index to assign.",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The instance that should be assigned the index.",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Component add to update function. Only components ...",
            "description": "Component add to update function. Only components called with this function should be included in the update passes.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentAddToUpdate",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentAddToUpdateParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentAddToUpdate callback.",
            "description": "Parameters to ComponentAddToUpdate callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentAddToUpdateParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component create function. Should allocate all nec...",
            "description": "Component create function. Should allocate all necessary resources for the component.\nThe game object instance is guaranteed to have its id, scene hierarchy and transform data updated when this is called.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentCreate",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentCreateParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentCreate callback.",
            "description": "Parameters to ComponentCreate callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Local component position",
                    "name": "m_Position",
                    "type": "dmVMath::Point3"
                },
                {
                    "doc": "Local component rotation",
                    "name": "m_Rotation",
                    "type": "dmVMath::Quat"
                },
                {
                    "doc": "Local component scale",
                    "name": "m_Scale",
                    "type": "dmVMath::Vector3"
                },
                {
                    "doc": "Set of properties",
                    "name": "m_PropertySet",
                    "type": "PropertySet"
                },
                {
                    "doc": "Component resource",
                    "name": "m_Resource",
                    "type": "void*"
                },
                {
                    "doc": "Component world, as created in the ComponentNewWorld callback",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                },
                {
                    "doc": "Index of the component type being created (among all component types)",
                    "name": "m_ComponentIndex",
                    "type": "uint16_t"
                }
            ],
            "name": "ComponentCreateParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component world destroy function",
            "description": "Component world destroy function",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentDeleteWorld",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentDeleteWorldParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentDeleteWorld callback.",
            "description": "Parameters to ComponentDeleteWorld callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "[type void*] Context for the component type",
                    "name": "m_Context",
                    "type": ""
                },
                {
                    "doc": "[type void*] The pointer to the world to destroy",
                    "name": "m_World",
                    "type": ""
                }
            ],
            "name": "ComponentDeleteWorldParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component destroy function. Should deallocate all ...",
            "description": "Component destroy function. Should deallocate all necessary resources.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentDestroy",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentDestroyParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentDestroy callback.",
            "description": "Parameters to ComponentDestroy callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentDestroyParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component finalize function. Should clean up as it...",
            "description": "Component finalize function. Should clean up as it is called when the component is disabled.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentFinal",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentFinalParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentFinal callback.",
            "description": "Parameters to ComponentFinal callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentFinalParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "A simple way to get the component instance from th...",
            "description": "A simple way to get the component instance from the user_data (which was set during creation)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentGet",
            "notes": [],
            "parameters": [
                {
                    "doc": "Update parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentGetParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The internal component pointer",
                    "name": "component",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentGet callback.",
            "description": "Parameters to ComponentGet callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "HComponentWorld"
                },
                {
                    "doc": "Component internal representation",
                    "name": "m_UserData",
                    "type": "HComponentInternal"
                }
            ],
            "name": "ComponentGetParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Callback for retrieving a property value of the co...",
            "description": "Callback for retrieving a property value of the component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentGetProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentGetPropertyParams&"
                    ]
                },
                {
                    "doc": "(out) the property",
                    "is_optional": "False",
                    "name": "out_value",
                    "types": [
                        "dmGameObject::PropertyDesc&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "PROPERTY_RESULT_OK if retrieving the property was ok",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentGetProperty callback.",
            "description": "Parameters to ComponentGetProperty callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Context for the component type",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Id of the property",
                    "name": "m_PropertyId",
                    "type": "dmhash_t"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                },
                {
                    "doc": "Options for getting the property",
                    "name": "m_Options",
                    "type": "PropertyOptions"
                }
            ],
            "name": "ComponentGetPropertyParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component init function. Should set the components...",
            "description": "Component init function. Should set the components initial state as it is called when the component is enabled.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentInit",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentInitParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentInit callback.",
            "description": "Parameters to ComponentInit callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentInitParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Callback when iterating over the properties for a ...",
            "description": "Callback when iterating over the properties for a component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentIterProperties",
            "notes": [
                "This function is only available/used in debug builds, when traversing the scene graph in order to export\nthis data for external tools (e.g. external testing libraries like Poco)"
            ],
            "parameters": [
                {
                    "doc": "the property iterator",
                    "is_optional": "False",
                    "name": "pit",
                    "types": [
                        "dmGameObject::SceneNodePropertyIterator"
                    ]
                },
                {
                    "doc": "the scene node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGameObject::SceneNode*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Component world create function",
            "description": "Component world create function",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentNewWorld",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentNewWorldParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "CREATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "CreateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentNewWorld callback.",
            "description": "Parameters to ComponentNewWorld callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Context for the component type",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "Component type index that can be used later with GetWorld()",
                    "name": "m_ComponentIndex",
                    "type": "uint8_t"
                },
                {
                    "doc": "Max component game object instance count (if applicable)",
                    "name": "m_MaxInstances",
                    "type": "uint32_t"
                },
                {
                    "doc": "Out-parameter of the pointer in which to store the created world",
                    "name": "m_World",
                    "type": "void**"
                },
                {
                    "doc": "Max components count of this type in current collection counted at the build stage.\n                                        If component in factory then value is 0xFFFFFFFF",
                    "name": "m_MaxComponentInstances",
                    "type": "uint32_t"
                }
            ],
            "name": "ComponentNewWorldParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component on-input function. Called when input is ...",
            "description": "Component on-input function. Called when input is sent to this component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentOnInput",
            "notes": [],
            "parameters": [
                {
                    "doc": "Input parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentOnInputParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "How the component handled the input",
                    "name": "result",
                    "types": [
                        "InputResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentOnInput callback.",
            "description": "Parameters to ComponentOnInput callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Instance handle",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Information about the input that occurred (note that input being released is also treated as input)",
                    "name": "m_InputAction",
                    "type": "const InputAction*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentOnInputParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component on-message function. Called when message...",
            "description": "Component on-message function. Called when message is sent to this component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentOnMessage",
            "notes": [],
            "parameters": [
                {
                    "doc": "Update parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentOnMessageParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UPDATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "UpdateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentOnMessage callback.",
            "description": "Parameters to ComponentOnMessage callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Instance handle",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "World",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                },
                {
                    "doc": "Message",
                    "name": "m_Message",
                    "type": "dmMessage::Message*"
                }
            ],
            "name": "ComponentOnMessageParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Called when the resource the component is based on...",
            "description": "Called when the resource the component is based on has been reloaded.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentOnReload",
            "notes": [],
            "parameters": [
                {
                    "doc": "the parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentOnReloadParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Parameters to ComponentOnReload callback.",
            "description": "Parameters to ComponentOnReload callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Instance handle",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Resource that was reloaded",
                    "name": "m_Resource",
                    "type": "void*"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentOnReloadParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Set a property set for the component.",
            "description": "Set a property set for the component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentSetProperties",
            "notes": [],
            "parameters": [
                {
                    "doc": "the parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentSetPropertiesParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "PROPERTY_RESULT_OK if property was set",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentSetProperties callback.",
            "description": "Parameters to ComponentSetProperties callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Instance handle",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Property set to use",
                    "name": "m_PropertySet",
                    "type": "PropertySet"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                }
            ],
            "name": "ComponentSetPropertiesParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Callback for setting a property value of the compo...",
            "description": "Callback for setting a property value of the component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentSetProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentSetPropertyParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "PROPERTY_RESULT_OK if property was set",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentSetProperty callback.",
            "description": "Parameters to ComponentSetProperty callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Context for the component type",
                    "name": "m_Context",
                    "type": "void*"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "Game object instance",
                    "name": "m_Instance",
                    "type": "HInstance"
                },
                {
                    "doc": "Id of the property",
                    "name": "m_PropertyId",
                    "type": "dmhash_t"
                },
                {
                    "doc": "User data storage pointer",
                    "name": "m_UserData",
                    "type": "uintptr_t*"
                },
                {
                    "doc": "New value of the property",
                    "name": "m_Value",
                    "type": "PropertyVar"
                },
                {
                    "doc": "Options for setting the property",
                    "name": "m_Options",
                    "type": "PropertyOptions"
                }
            ],
            "name": "ComponentSetPropertyParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component fixed update function. Updates all compo...",
            "description": "Component fixed update function. Updates all component of this type for all game objects",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentsFixedUpdate",
            "notes": [],
            "parameters": [
                {
                    "doc": "Update parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentsUpdateParams&"
                    ]
                },
                {
                    "doc": "(out) Update result",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "dmGameObject::ComponentsUpdateResult&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UPDATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "UpdateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Component post update function. The component stat...",
            "description": "Component post update function. The component state should never be modified in this function.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentsPostUpdate",
            "notes": [],
            "parameters": [
                {
                    "doc": "Update parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentsPostUpdateParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UPDATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "UpdateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters for ComponentsPostUpdate callback.",
            "description": "Parameters for ComponentsPostUpdate callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                }
            ],
            "name": "ComponentsPostUpdateParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component render function.",
            "description": "Component render function.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentsRender",
            "notes": [],
            "parameters": [
                {
                    "doc": "Update parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentsRenderParams&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UPDATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "UpdateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentsRender callback.",
            "description": "Parameters to ComponentsRender callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                }
            ],
            "name": "ComponentsRenderParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Component update function. Updates all component o...",
            "description": "Component update function. Updates all component of this type for all game objects",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentsUpdate",
            "notes": [],
            "parameters": [
                {
                    "doc": "Update parameters",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "const dmGameObject::ComponentsUpdateParams&"
                    ]
                },
                {
                    "doc": "(out) Update result",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "dmGameObject::ComponentsUpdateResult&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "UPDATE_RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "UpdateResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Parameters to ComponentsUpdate callback.",
            "description": "Parameters to ComponentsUpdate callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Collection handle",
                    "name": "m_Collection",
                    "type": "HCollection"
                },
                {
                    "doc": "Update context",
                    "name": "m_UpdateContext",
                    "type": "const UpdateContext*"
                },
                {
                    "doc": "Component world",
                    "name": "m_World",
                    "type": "void*"
                },
                {
                    "doc": "User context",
                    "name": "m_Context",
                    "type": "void*"
                }
            ],
            "name": "ComponentsUpdateParams",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Parameters to ComponentsUpdate callback.",
            "description": "Parameters to ComponentsUpdate callback.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "True if a component type updated any game object transforms",
                    "name": "m_TransformsUpdated",
                    "type": "bool"
                }
            ],
            "name": "ComponentsUpdateResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Context used when registering a new component type",
            "description": "Context used when registering a new component type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "The config file",
                    "name": "m_Config",
                    "type": "dmConfigFile::HConfig"
                },
                {
                    "doc": "The resource factory",
                    "name": "m_Factory",
                    "type": "dmResource::HFactory"
                },
                {
                    "doc": "The game object registry",
                    "name": "m_Register",
                    "type": "dmGameObject::HRegister"
                },
                {
                    "doc": "The shared script context",
                    "name": "m_Script",
                    "type": "dmScript::HContext"
                },
                {
                    "doc": "Mappings between names and contextx",
                    "name": "m_Contexts",
                    "type": "dmHashTable64<void*>"
                }
            ],
            "name": "ComponentTypeCreateCtx",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "get the component type global context",
            "description": "get the component type global context",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeGetContext",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "component type global context",
                    "name": "context",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the component type index. Used for with e.g. d...",
            "description": "Get the component type index. Used for with e.g. dmGameObject::GetWorld()/GetContext()",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeGetTypeIndex",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The type index.",
                    "name": "type_index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component add-to-update callback",
            "description": "Set the component add-to-update callback. Called for each component instal, when the game object is spawned.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetAddToUpdateFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentAddToUpdate"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component child iterator function",
            "description": "set the component child iterator function. Called during inspection",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetChildIteratorFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "child iterator function",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "dmGameObject::FIteratorChildren"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component type global context",
            "description": "Set the component type global context. Usually set when registering the component type.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetContext",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "component type global context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component create callback",
            "description": "Set the component create callback. Called when a component instance is created.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetCreateFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentCreate"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the world destroy callback",
            "description": "Set the world destroy callback. Called when a collection (i.e. a \"world\") is destroyed.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetDeleteWorldFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentDeleteWorld"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component destroy callback",
            "description": "Set the component destroy callback. Called when a component instance is destroyed.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetDestroyFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentDestroy"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component finalize callback",
            "description": "Set the component finalize callback. Called on each gameobject's components, during a gameobject's finalization.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetFinalFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentFinal"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component update callback",
            "description": "Set the component update callback. Called when it's time to update all component instances.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetFixedUpdateFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentsFixedUpdate"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component get callback",
            "description": "Set the component get callback. Called when the scripts want to retrieve the individual component user data given an url.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetGetFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentGet"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component get property callback",
            "description": "Set the component get property callback. Called when accessing a property via <code>go.get()</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetGetPropertyFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentGetProperty"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component type need for a per component instance user data",
            "description": "Set the component type need for a per component instance user data. Defaults to true.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetHasUserData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "does each component instance need user data",
                    "is_optional": "False",
                    "name": "has_user_data",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component init callback",
            "description": "Set the component init callback. Called on each gameobject's components, during a gameobject's initialization.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetInitFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentInit"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the new world callback",
            "description": "Set the new world callback. Called when a collection (i.e. a \"world\") is created.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetNewWorldFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentNewWorld"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component on-input callback",
            "description": "Set the component on-input callback. Called once per frame, before the Update function.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetOnInputFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentOnInput"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component on-message callback",
            "description": "Set the component on-message callback. Called multiple times per frame, to flush messages.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetOnMessageFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentOnMessage"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component on-reload callback",
            "description": "Set the component on-reload callback. Called when the resource of a component instance is reloaded.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetOnReloadFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentOnReload"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component post update callback",
            "description": "Set the component post update callback. Called for each collection after the update, before the render.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetPostUpdateFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentsPostUpdate"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component type prio order",
            "description": "Set the component type prio order. Defines the update order of the component types.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetPrio",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "prio order",
                    "is_optional": "False",
                    "name": "prio",
                    "types": [
                        "uint16_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component property iterator function",
            "description": "set the component property iterator function. Called during inspection",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetPropertyIteratorFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "property iterator function",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "dmGameObject::FIteratorProperties"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component type transform dependency flag",
            "description": "Set the component type transform dependency flag.\nIf this flag is set, it might trigger an dmGameObject::UpdateTransforms() (if there are dirty transforms)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetReadsTransforms",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "transform dependency flag",
                    "is_optional": "False",
                    "name": "reads_transforms",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component render callback",
            "description": "Set the component render callback. Called when it's time to render all component instances.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetRenderFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentsRender"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component set properties callback",
            "description": "Set the component set properties callback. Called when the component instance is being spwned.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetSetPropertiesFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentSetProperties"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component set property callback",
            "description": "Set the component set property callback. Called when accessing a property via <code>go.set()</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetSetPropertyFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentSetProperty"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the component update callback",
            "description": "Set the component update callback. Called when it's time to update all component instances.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ComponentTypeSetUpdateFn",
            "notes": [],
            "parameters": [
                {
                    "doc": "the type",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "HComponentType"
                    ]
                },
                {
                    "doc": "callback",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "ComponentsUpdate"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Creates a new unique instance ID and returns its h...",
            "description": "Creates a new unique instance ID and returns its hash.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CreateInstanceId",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash of the new unique instance id",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create result enum",
            "description": "Create result enum.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::CREATE_RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::CREATE_RESULT_UNKNOWN_ERROR",
                    "type": ""
                }
            ],
            "name": "CreateResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Delete gameobject instance",
            "description": "Delete gameobject instance",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Delete",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject collection",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HCollection"
                    ]
                },
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "If true, delete child hierarchy recursively in child to parent order (leaf first)",
                    "is_optional": "False",
                    "name": "recursive",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Recursively delete all instances flagged as bones ...",
            "description": "Recursively delete all instances flagged as bones under the given parent instance.\nThe order of deletion is depth-first, so that the children are deleted before the parents.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DeleteBones",
            "notes": [],
            "parameters": [
                {
                    "doc": "Parent instance of the hierarchy",
                    "is_optional": "False",
                    "name": "parent",
                    "types": [
                        "HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Register a new component type",
            "description": "Register a new component type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_DECLARE_COMPONENT_TYPE",
            "notes": [],
            "parameters": [
                {
                    "doc": "The unique C++ symbol name",
                    "is_optional": "False",
                    "name": "symbol",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "name of the component type (i.e. the resource suffix)",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The type configuration function. May not be 0.",
                    "is_optional": "False",
                    "name": "create_fn",
                    "types": [
                        "dmGameObject::Result (*fn)(const ComponentTypeCreateCtx* ctx, HComponentType type)"
                    ]
                },
                {
                    "doc": "The type destruction function. May be 0.",
                    "is_optional": "False",
                    "name": "destroy_fn",
                    "types": [
                        "dmGameObject::Result (*fn)(const ComponentTypeCreateCtx* ctx, HComponentType type)"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "Get absolute identifier relative to instance. The ...",
            "description": "Get absolute identifier relative to instance. The returned identifier is the\nrepresentation of the qualified name, i.e. the path from root-collection to\nthe sub-collection which the instance belongs to.\nExample: if the instance is part of a sub-collection in the root-collection\nnamed \"sub\" and id == \"a\" the returned identifier represents the path \"sub.a\"",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetAbsoluteIdentifier",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance to get absolute identifier to",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "Identifier relative to instance",
                    "is_optional": "False",
                    "name": "identifier",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Absolute identifier.",
                    "name": "",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve a collection from the specified instance",
            "description": "Retrieve a collection from the specified instance",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetCollection",
            "notes": [],
            "parameters": [
                {
                    "doc": "Game object instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The collection the specified instance belongs to",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve a collection by socket name hash\nNote: in...",
            "description": "Retrieve a collection by socket name hash\nNote: in native extensions, the register can be retrieved during init using dmEngine::GetGameObjectRegister(dmExtension::AppParams *params)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetCollectionByHash",
            "notes": [],
            "parameters": [
                {
                    "doc": "Register",
                    "is_optional": "False",
                    "name": "regist",
                    "types": [
                        "dmGameObject::HRegister"
                    ]
                },
                {
                    "doc": "The socket name",
                    "is_optional": "False",
                    "name": "socket_name",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The collection if successful. 0 otherwise.",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HCollection"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the component, component type and its world",
            "description": "Get the component, component type and its world",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetComponent",
            "notes": [],
            "parameters": [
                {
                    "doc": "Instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "Component id",
                    "is_optional": "False",
                    "name": "component_id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "(out) Component type. Used for validation.",
                    "is_optional": "False",
                    "name": "component_type",
                    "types": [
                        "uint32_t*"
                    ]
                },
                {
                    "doc": "(out) The component.",
                    "is_optional": "False",
                    "name": "component",
                    "types": [
                        "HComponent*"
                    ]
                },
                {
                    "doc": "(out) The component world. May be 0.",
                    "is_optional": "False",
                    "name": "world",
                    "types": [
                        "HComponentWorld*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if the component was found",
                    "name": "result",
                    "types": [
                        "dmGameObject::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get component id from component index.",
            "description": "Get component id from component index.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetComponentId",
            "notes": [],
            "parameters": [
                {
                    "doc": "Instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "Component index",
                    "is_optional": "False",
                    "name": "component_index",
                    "types": [
                        "uint16_t"
                    ]
                },
                {
                    "doc": "Component id as out-argument",
                    "is_optional": "False",
                    "name": "component_id",
                    "types": [
                        "dmhash_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if the component was found",
                    "name": "result",
                    "types": [
                        "dmGameObject::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the component type index",
            "description": "Get the component type index",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetComponentTypeIndex",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection handle",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "HCollection"
                    ]
                },
                {
                    "doc": "The hashed name of the registered component type (e.g. dmHashString(\"guic\"))",
                    "is_optional": "False",
                    "name": "type_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The component type index. 0xFFFFFFFF if not found",
                    "name": "type_index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve the context for a component type",
            "description": "Retrieve the context for a component type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetContext",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection handle",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "HCollection"
                    ]
                },
                {
                    "doc": "index of the component type",
                    "is_optional": "False",
                    "name": "component_type_index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the context, 0x0 if not found",
                    "name": "context",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get instance identifier",
            "description": "Get instance identifier",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetIdentifier",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Identifier. dmGameObject::UNNAMED_IDENTIFIER if not set.",
                    "name": "",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get instance from identifier",
            "description": "Get instance from identifier",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetInstanceFromIdentifier",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HCollection"
                    ]
                },
                {
                    "doc": "Identifier",
                    "is_optional": "False",
                    "name": "identifier",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Instance. NULL if instance isn't found.",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve the message socket for the specified coll...",
            "description": "Retrieve the message socket for the specified collection.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetMessageSocket",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection handle",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HCollection"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The message socket of the specified collection",
                    "name": "socket",
                    "types": [
                        "dmMessage::HSocket"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get position",
            "description": "Get gameobject instance position",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetPosition",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Position",
                    "name": "",
                    "types": [
                        "dmGameObject::Point3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get rotation",
            "description": "Get gameobject instance rotation",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRotation",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "rotation",
                    "name": "",
                    "types": [
                        "dmGameObject::Quat"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get scale",
            "description": "Get gameobject instance scale",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Non-uniform scale",
                    "name": "",
                    "types": [
                        "dmGameObject::Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get uniform scale",
            "description": "Get gameobject instance uniform scale",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetUniformScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Uniform scale",
                    "name": "",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Retrieve the world in the collection connected to ...",
            "description": "Retrieve the world in the collection connected to the supplied component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorld",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection handle",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "HCollection"
                    ]
                },
                {
                    "doc": "index of the component type",
                    "is_optional": "False",
                    "name": "component_type_index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The pointer to the world, 0x0 if not found",
                    "name": "world",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get world matrix",
            "description": "Get game object instance world transform as Matrix4.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorldMatrix",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "World transform matrix.",
                    "name": "",
                    "types": [
                        "dmGameObject::MAtrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get world position",
            "description": "Get gameobject instance world position",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorldPosition",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "World position",
                    "name": "",
                    "types": [
                        "dmGameObject::Point3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get world rotation",
            "description": "Get gameobject instance world rotation",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorldRotation",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "World rotation",
                    "name": "",
                    "types": [
                        "dmGameObject::Quat"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get world scale",
            "description": "Get game object instance world transform",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorldScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "World scale",
                    "name": "",
                    "types": [
                        "dmGameObject::Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get world transform",
            "description": "Get game object instance world transform",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorldTransform",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "World transform",
                    "name": "",
                    "types": [
                        "dmTransform::Transform"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get world uniform scale",
            "description": "Get game object instance uniform scale",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetWorldUniformScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "World uniform scale",
                    "name": "",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gameobject collection handle",
            "description": "Gameobject collection handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HCollection",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Opaque handle to component instance",
            "description": "Opaque handle to component instance",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HComponent",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Opaque handle to internal representation of a comp...",
            "description": "Opaque handle to internal representation of a component instance",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HComponentInternal",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Component type handle. It holds the life time func...",
            "description": "Component type handle. It holds the life time functions for a type.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HComponentType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Opaque handle to a component world",
            "description": "Opaque handle to a component world",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HComponentWorld",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Gameobject instance handle",
            "description": "Gameobject instance handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HInstance",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Gameobject properties handle",
            "description": "Gameobject properties handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HProperties",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Handle to a list of properties (gameobject_props.h...",
            "description": "Handle to a list of properties (gameobject_props.h)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HPropertyContainer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Opaque handle to a list of properties",
            "description": "Opaque handle to a list of properties",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HPropertyContainer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Opaque handle to a property container builder",
            "description": "Opaque handle to a property container builder",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HPropertyContainerBuilder",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Gameobject prototype handle",
            "description": "Gameobject prototype handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HPrototype",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Collection register.",
            "description": "Collection register.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HRegister",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Script handle",
            "description": "Script handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HScript",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Script instance handle",
            "description": "Script instance handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HScriptInstance",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Container of input related information.",
            "description": "Container of input related information.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "InputAction",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Input result enum",
            "description": "Input result enum",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "= 0",
                    "name": "INPUT_RESULT_IGNORED",
                    "type": ""
                },
                {
                    "doc": "= 1",
                    "name": "INPUT_RESULT_CONSUMED",
                    "type": ""
                },
                {
                    "doc": "= -1000",
                    "name": "INPUT_RESULT_UNKNOWN_ERROR",
                    "type": ""
                }
            ],
            "name": "InputResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Used for mapping instance ids from a collection de...",
            "description": "Used for mapping instance ids from a collection definition to newly spawned instances",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "InstanceIdMap",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Contains property containers for game objects to b...",
            "description": "Contains property containers for game objects to be spawned",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "InstancePropertyContainers",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Value for an invalid instance index, this must be ...",
            "description": "Value for an invalid instance index, this must be the same as defined in gamesys_ddf.proto for Create#index.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "INVALID_INSTANCE_POOL_INDEX",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Check whether the instance is flagged as a bone.",
            "description": "Check whether the instance is flagged as a bone.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsBone",
            "notes": [],
            "parameters": [
                {
                    "doc": "Instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if flagged as a bone",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create a new gameobject instance",
            "description": "Create a new gameobject instance",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "New",
            "notes": [
                "Calling this function during update is not permitted. Use #Spawn instead for deferred creation"
            ],
            "parameters": [
                {
                    "doc": "Gameobject collection",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HCollection"
                    ]
                },
                {
                    "doc": "Prototype file name. May be 0.",
                    "is_optional": "False",
                    "name": "prototype_name",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "New gameobject instance. NULL if any error occured",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Playback type enum",
            "description": "Playback type enum",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Playback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Sends a script message",
            "description": "Sends a script message. Wraps the message in a dmGameSystemDDF::ScriptMessage struct.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PostDDF",
            "notes": [],
            "parameters": [
                {
                    "doc": "The ddf message to send",
                    "is_optional": "False",
                    "name": "message",
                    "types": [
                        "T*"
                    ]
                },
                {
                    "doc": "The sender",
                    "is_optional": "False",
                    "name": "sender",
                    "types": [
                        "dmMessage::Message*"
                    ]
                },
                {
                    "doc": "The receiver",
                    "is_optional": "False",
                    "name": "receiver",
                    "types": [
                        "dmMessage::Message*"
                    ]
                },
                {
                    "doc": "The function ref. 0 wil cause the \"on_message\" to be called",
                    "is_optional": "False",
                    "name": "function_ref",
                    "types": [
                        "int"
                    ]
                },
                {
                    "doc": "call dmScript::UnrefInInstance on the function_ref after the dmScript::PCall is made",
                    "is_optional": "False",
                    "name": "unref_function_after_call",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if successful",
                    "name": "success",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [
                {
                    "doc": "",
                    "name": "T",
                    "type": ""
                }
            ],
            "type": "FUNCTION"
        },
        {
            "brief": "Sends an unref script message",
            "description": "Sends a script message to unreference a script object",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PostScriptUnrefMessage",
            "notes": [],
            "parameters": [
                {
                    "doc": "The sender",
                    "is_optional": "False",
                    "name": "sender",
                    "types": [
                        "dmMessage::Message*"
                    ]
                },
                {
                    "doc": "The receiver",
                    "is_optional": "False",
                    "name": "receiver",
                    "types": [
                        "dmMessage::Message*"
                    ]
                },
                {
                    "doc": "The reference to remove",
                    "is_optional": "False",
                    "name": "reference",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "success",
                    "types": [
                        "Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "PropertyContainerBuilderParams\nHelper struct to c...",
            "description": "PropertyContainerBuilderParams\nHelper struct to create a property container builder.\nIt is required to fill out how many items of each type that is wanted.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerBuilderParams",
            "notes": [],
            "parameters": [
                {
                    "doc": "Number of items of type float",
                    "is_optional": "False",
                    "name": "m_NumberCount",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type dmhash_t",
                    "is_optional": "False",
                    "name": "m_HashCount",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type const char*",
                    "is_optional": "False",
                    "name": "m_URLStringCount",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Size of all url strings combined, including null terminators",
                    "is_optional": "False",
                    "name": "m_URLStringSize",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type dmMessage::URL",
                    "is_optional": "False",
                    "name": "m_URLCount",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type vector3 (float[3])",
                    "is_optional": "False",
                    "name": "m_Vector3Count",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type vector4 (float[4])",
                    "is_optional": "False",
                    "name": "m_Vector4Count",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type quaternion (float[4])",
                    "is_optional": "False",
                    "name": "m_QuatCount",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "Number of items of type bool",
                    "is_optional": "False",
                    "name": "m_BoolCount",
                    "types": [
                        "int32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Allocates and copies a property container",
            "description": "Allocates and copies a property container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerCopy",
            "notes": [],
            "parameters": [
                {
                    "doc": "The original property container",
                    "is_optional": "False",
                    "name": "original",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The new property container",
                    "name": "container",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Creates the final property container",
            "description": "Creates the final property container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerCreate",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The property container",
                    "name": "container",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create a property container builder with memory pr...",
            "description": "Create a property container builder with memory preallocated",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerCreateBuilder",
            "notes": [],
            "parameters": [
                {
                    "doc": "The params holding the memory requirements",
                    "is_optional": "False",
                    "name": "params",
                    "types": [
                        "PropertyContainerBuilderParams"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The builder",
                    "name": "container",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Creates a property container from a lua table",
            "description": "Creates a property container from a lua table",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerCreateFromLua",
            "notes": [],
            "parameters": [
                {
                    "doc": "The lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "The lua stack index of the lua table",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The property container",
                    "name": "container",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Deallocates a property container",
            "description": "Deallocates a property container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerDestroy",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property container",
                    "is_optional": "False",
                    "name": "container",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Merges two containers into a newly allocated conta...",
            "description": "Merges two containers into a newly allocated container\nThe properties in the <code>overrides</code> container will take presedence.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerMerge",
            "notes": [],
            "parameters": [
                {
                    "doc": "The original property container",
                    "is_optional": "False",
                    "name": "original",
                    "types": [
                        "HPropertyContainer"
                    ]
                },
                {
                    "doc": "The container with override properties",
                    "is_optional": "False",
                    "name": "overrides",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The merged property container",
                    "name": "container",
                    "types": [
                        "HPropertyContainer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type bool to the container",
            "description": "Add a property of type bool to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushBool",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type float to the container",
            "description": "Add a property of type float to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushFloat",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "float"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type dmhash_t to the container",
            "description": "Add a property of type dmhash_t to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushHash",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type float4 to the container",
            "description": "Add a property of type float4 to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushQuat",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property (4 floats)",
                    "is_optional": "False",
                    "name": "values",
                    "types": [
                        "float*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type dmMessage::URL to the conta...",
            "description": "Add a property of type dmMessage::URL to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushURL",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "dmMessage::URL"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type (url) string to the contain...",
            "description": "Add a property of type (url) string to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushURLString",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type float3 to the container",
            "description": "Add a property of type float3 to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushVector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property (3 floats)",
                    "is_optional": "False",
                    "name": "values",
                    "types": [
                        "float*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Add a property of type float4 to the container",
            "description": "Add a property of type float4 to the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropertyContainerPushVector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "The container builder",
                    "is_optional": "False",
                    "name": "builder",
                    "types": [
                        "HPropertyContainerBuilder"
                    ]
                },
                {
                    "doc": "The id of the property",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The value of the property (4 floats)",
                    "is_optional": "False",
                    "name": "values",
                    "types": [
                        "float*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Description of a property",
            "description": "Description of a property.\nIf the property is externally mutable, m_ValuePtr points to the value and its length is m_ElementCount.\nm_Variant always reflects the value.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "For composite properties (float arrays), these ids name each element",
                    "name": "m_ElementIds",
                    "type": "dmhash_t"
                },
                {
                    "doc": "Variant holding the value",
                    "name": "m_Variant",
                    "type": "PropertyVar"
                },
                {
                    "doc": "Pointer to the value, only set for mutable values. The actual data type is described by the variant.",
                    "name": "m_ValuePtr",
                    "type": "float*"
                },
                {
                    "doc": "Determines whether we are permitted to write to this property.",
                    "name": "m_ReadOnly",
                    "type": "uint16_t"
                },
                {
                    "doc": "Indicates type of the property (of type PropertyValueType).",
                    "name": "m_ValueType",
                    "type": "uint16_t"
                },
                {
                    "doc": "Number of array entries, if the property is an array and zero otherwise. Max supported length is 2^14 (16384 elements)",
                    "name": "m_ArrayLength",
                    "type": "uint16_t"
                }
            ],
            "name": "PropertyDesc",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Property Options",
            "description": "Parameters variant that holds key or index for a propertys data structure.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "The index of the property to set, only applicable if property is array.",
                    "name": "m_Index",
                    "type": "int32_t"
                },
                {
                    "doc": "The key of the property to set, only applicable if property is hashtable.",
                    "name": "m_Key",
                    "type": "dmhash_t"
                },
                {
                    "doc": "A flag if structure contain m_Key value (it can't contain both)",
                    "name": "m_HasKey",
                    "type": "uint8_t"
                }
            ],
            "name": "PropertyOptions",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "property result",
            "description": "Property result.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_INVALID_FORMAT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_UNSUPPORTED_TYPE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_TYPE_MISMATCH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_COMP_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_INVALID_INSTANCE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_BUFFER_OVERFLOW",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_UNSUPPORTED_VALUE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_UNSUPPORTED_OPERATION",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_RESOURCE_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_INVALID_INDEX",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_INVALID_KEY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_RESULT_READ_ONLY",
                    "type": ""
                }
            ],
            "name": "PropertyResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "property types",
            "description": "Property types.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_NUMBER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_HASH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_URL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_VECTOR3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_VECTOR4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_QUAT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_BOOLEAN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROPERTY_TYPE_COUNT",
                    "type": ""
                }
            ],
            "name": "PropertyType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Type of property value",
            "description": "Type of property value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::PROP_VALUE_ARRAY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::PROP_VALUE_HASHTABLE",
                    "type": ""
                }
            ],
            "name": "PropertyValueType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "property variant",
            "description": "Property variant that holds the data for a variable",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "property type",
                    "name": "m_Type",
                    "type": "dmGameObject::PropertyType"
                },
                {
                    "doc": "A floating point value (union)",
                    "name": "m_Number",
                    "type": "double"
                },
                {
                    "doc": "A hash value (union)",
                    "name": "m_Hash",
                    "type": "dmhash_t"
                },
                {
                    "doc": "An URL value (union)",
                    "name": "m_Url",
                    "type": "const uin8_t*"
                },
                {
                    "doc": "A vector4 value (union)",
                    "name": "m_V4",
                    "type": "float"
                },
                {
                    "doc": "A boolean value (union)",
                    "name": "m_Bool",
                    "type": "bool"
                }
            ],
            "name": "PropertyVar",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "result enumeration",
            "description": "Result enumeration.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_OUT_OF_RESOURCES",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_ALREADY_REGISTERED",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_IDENTIFIER_IN_USE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_IDENTIFIER_ALREADY_SET",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_COMPONENT_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_MAXIMUM_HIEARCHICAL_DEPTH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_INVALID_OPERATION",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_RESOURCE_TYPE_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_BUFFER_OVERFLOW",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_IDENTIFIER_INVALID",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_RESOURCE_ERROR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_CHILD_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_INVALID_PROPERTIES",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_UNABLE_TO_CREATE_COMPONENTS",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_UNABLE_TO_INIT_INSTANCE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::RESULT_UNKNOWN_ERROR",
                    "type": ""
                }
            ],
            "name": "Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "scene graph traversal node",
            "description": "Opaque struct that holds info about the current node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SceneNode",
            "notes": [
                "The concept of a `scene node` only exists here, for the purposes of inspecting the scene graph for inspection and testing purposes only."
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "scene graph traversal iterator",
            "description": "Opaque struct that holds info about the current position when traversing the scene",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SceneNodeIterator",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "scene traversal node property",
            "description": "Struct that holds info about the current position when traversing the scene",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "name",
                    "name": "m_NameHash",
                    "type": "dmhash_t"
                },
                {
                    "doc": "type",
                    "name": "m_Type",
                    "type": "dmGameObject::SceneNodePropertyType"
                },
                {
                    "doc": "value\n\n`m_Number`\n: [type:double] floating point number\n\n`m_Hash`\n: [type:dmhash_t] The hashed value.\n\n`m_URL`\n: [type:char[1024]] The text representation of the url (if reverse hashes are enabled)\n\n`m_V4`\n: [type:float[4]] Used for Vector3, Vector4 and Quat\n\n`m_Bool`\n: [type:bool] A boolean value\n\n`m_Text`\n: [type:const char*] Text from a text property",
                    "name": "m_Value",
                    "type": "union"
                }
            ],
            "name": "SceneNodeProperty",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "scene traversal node property",
            "description": "Holds the property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "property",
                    "name": "m_Property",
                    "type": "dmGameObject::SceneNodeProperty"
                }
            ],
            "name": "SceneNodePropertyIterator",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "scene node property types",
            "description": "scene node property types",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_NUMBER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_HASH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_URL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_VECTOR3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_VECTOR4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_QUAT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_BOOLEAN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_TEXT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::SCENE_NODE_PROPERTY_TYPE_COUNT",
                    "type": ""
                }
            ],
            "name": "SceneNodePropertyType",
            "notes": [
                "Since we don't support text properties, we'll keep a separate enum here for now"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Set whether the instance should be flagged as a bo...",
            "description": "Set whether the instance should be flagged as a bone.\nInstances flagged as bones can have their transforms updated in a batch through SetBoneTransforms.\nUsed for animated skeletons.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetBone",
            "notes": [],
            "parameters": [
                {
                    "doc": "Instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "HInstance"
                    ]
                },
                {
                    "doc": "true if the instance is a bone",
                    "is_optional": "False",
                    "name": "bone",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the local transforms recursively of all instan...",
            "description": "Set the local transforms recursively of all instances flagged as bones, starting with component with id.\nThe order of the transforms is depth-first.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetBoneTransforms",
            "notes": [],
            "parameters": [
                {
                    "doc": "First Instance of the hierarchy to set",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "HInstance"
                    ]
                },
                {
                    "doc": "the transform for component root",
                    "is_optional": "False",
                    "name": "component_transform",
                    "types": [
                        "dmTransform::Transform"
                    ]
                },
                {
                    "doc": "Array of transforms to set depth-first for the bone instances",
                    "is_optional": "False",
                    "name": "transforms",
                    "types": [
                        "dmTransform::Transform*"
                    ]
                },
                {
                    "doc": "Size of the transforms array",
                    "is_optional": "False",
                    "name": "transform_count",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "of instances found",
                    "name": "Number",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set instance identifier. Must be unique within the...",
            "description": "Set instance identifier. Must be unique within the collection.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetIdentifier",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "dmGameObject::HCollection"
                    ]
                },
                {
                    "doc": "Instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "Identifier",
                    "is_optional": "False",
                    "name": "identifier",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK on success",
                    "name": "result",
                    "types": [
                        "dmGameObject::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set position",
            "description": "Set gameobject instance position",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetPosition",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "New Position",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "dmVMath::Point3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set rotation",
            "description": "Set gameobject instance rotation",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetRotation",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "New rotation",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "dmVmath::Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set uniform scale",
            "description": "Set gameobject instance uniform scale",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "New uniform scale",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "float"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set scale",
            "description": "Set gameobject instance non-uniform scale",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject instance",
                    "is_optional": "False",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                },
                {
                    "doc": "New non-uniform scale",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "dmVmath::Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "spawn a new game object",
            "description": "Spawns a new gameobject instance. The actual creation is performed after the update is completed.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Spawn",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gameobject collection",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "HCollection"
                    ]
                },
                {
                    "doc": "Prototype",
                    "is_optional": "False",
                    "name": "prototype",
                    "types": [
                        "HPrototype"
                    ]
                },
                {
                    "doc": "Prototype file name (.goc)",
                    "is_optional": "False",
                    "name": "prototype_name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Id of the spawned instance",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "Container with override properties",
                    "is_optional": "False",
                    "name": "properties",
                    "types": [
                        "HPropertyContainer"
                    ]
                },
                {
                    "doc": "Position of the spawed object",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "dmVMath::Vector3"
                    ]
                },
                {
                    "doc": "Rotation of the spawned object",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "dmVMath::Quat"
                    ]
                },
                {
                    "doc": "Scale of the spawned object\nreturn instance <span class=\"type\"> HInstance</span> the spawned instance, 0 at failure",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "dmVMath::Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the top node of the whole game (the main coll...",
            "description": "Gets the top node of the whole game (the main collection)",
            "error": "",
            "examples": "The following examples show how to iterate over currently loaded scene graph\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">OutputNode</span><span class=\"p\">(</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNode</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNodeIterator</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseIterateChildren</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseIterateNext</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">OutputProperties</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">m_Node</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// see dmGameObject::TraverseIterateProperties()</span>\n<span class=\"w\">        </span><span class=\"n\">OutputNode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">m_Node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"nf\">OutputScene</span><span class=\"p\">(</span><span class=\"n\">HRegister</span><span class=\"w\"> </span><span class=\"n\">regist</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNode</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseGetRoot</span><span class=\"p\">(</span><span class=\"n\">regist</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">root</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">OutputNode</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "TraverseGetRoot",
            "notes": [
                "The dmGameObject::HRegister is obtained from the `dmEngine::GetGameObjectRegister(dmExtension::AppParams)`",
                "Traversing the scene like this is not efficient. These functions are here for inspection and testing purposes only."
            ],
            "parameters": [
                {
                    "doc": "the full gameobject register",
                    "is_optional": "False",
                    "name": "regist",
                    "types": [
                        "dmGameObject::HRegister"
                    ]
                },
                {
                    "doc": "the node to inspect",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGameObject::HRegister"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if successful",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get a scene node iterator for the nodes' children",
            "description": "Get a scene node iterator for the nodes' children",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "TraverseIterateChildren",
            "notes": [],
            "parameters": [
                {
                    "doc": "the parent node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGameObject::SceneNode*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the iterator",
                    "name": "iterator",
                    "types": [
                        "dmGameObject::SceneNodeIterator"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Step a scene node iterator to the next sibling",
            "description": "Step a scene node iterator to the next sibling",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "TraverseIterateNext",
            "notes": [],
            "parameters": [
                {
                    "doc": "the iterator",
                    "is_optional": "False",
                    "name": "it",
                    "types": [
                        "dmGameObject::SceneNodeIterator*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if successful. false if the iterator is finished",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create a scene node traversal property iterator",
            "description": "Create a scene node traversal property iterator",
            "error": "",
            "examples": "The following examples show how to iterate over the properties of a node\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">SceneNodePropertyIterator</span><span class=\"w\"> </span><span class=\"n\">pit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TraverseIterateProperties</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">TraverseIteratePropertiesNext</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">pit</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmHashReverseSafe64</span><span class=\"p\">(</span><span class=\"n\">pit</span><span class=\"p\">.</span><span class=\"n\">m_Property</span><span class=\"p\">.</span><span class=\"n\">m_NameHash</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"n\">pit</span><span class=\"p\">.</span><span class=\"n\">m_Property</span><span class=\"p\">.</span><span class=\"n\">m_Type</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"no\">dmGameObject</span><span class=\"o\">::</span><span class=\"no\">SCENE_NODE_PROPERTY_TYPE_NUMBER</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "TraverseIterateProperties",
            "notes": [
                "Getting the properties like this is not efficient. These functions are here for inspection and testing purposes only.",
                "Reverse hashes via `dmHashReverseSafe64()` isn't available in release builds."
            ],
            "parameters": [
                {
                    "doc": "the node to inspect",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGameObject::SceneNode*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the property iterator",
                    "name": "iterator",
                    "types": [
                        "dmGameObject::SceneNodePropertyIterator"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Steps the scene node traversal property iterator t...",
            "description": "Steps the scene node traversal property iterator to the next property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "TraverseIteratePropertiesNext",
            "notes": [],
            "parameters": [
                {
                    "doc": "the iterator",
                    "is_optional": "False",
                    "name": "it",
                    "types": [
                        "dmGameObject::SceneNodePropertyIterator*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if the iterator it valid, false if the iterator is finished.",
                    "name": "finished",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Update context",
            "description": "Update context",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "the scaling factor what was applied on the dt (i.e. the collection update time scale)",
                    "name": "m_TimeScale",
                    "type": "float"
                },
                {
                    "doc": "the delta time elapsed since last frame (seconds)",
                    "name": "m_DT",
                    "type": "float"
                },
                {
                    "doc": "Number of of calls per second to the FixedUpdate of each component",
                    "name": "m_FixedUpdateFrequency",
                    "type": "uint32_t"
                }
            ],
            "name": "UpdateContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Update result enum",
            "description": "Update result enum.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmGameObject::UPDATE_RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmGameObject::UPDATE_RESULT_UNKNOWN_ERROR",
                    "type": ""
                }
            ],
            "name": "UpdateResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        }
    ],
    "info": {
        "brief": "SDK Component API documentation",
        "description": "[file:<dmsdk/gameobject/component.h>]\n\nApi for manipulating game object components (WIP)",
        "description_html": "<p>[file:<dmsdk/gameobject/component.h>]</p>\n<p>Api for manipulating game object components (WIP)</p>",
        "file": "dmsdk/gameobject/component.h",
        "language": "C++",
        "name": "Component",
        "namespace": "dmGameObject",
        "notes": [],
        "path": "dmsdk/gameobject/component.h",
        "type": "Defold C++"
    }
}