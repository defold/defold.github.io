{
    "elements": [
        {
            "brief": "hashes a string",
            "description": "All ids in the engine are represented as hashes, so a string needs to be hashed\nbefore it can be compared with an id.",
            "error": "",
            "examples": "To compare a message_id in an on-message callback function:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_message&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- Act on the message here</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "hash",
            "notes": [],
            "parameters": [
                {
                    "doc": "string to hash",
                    "is_optional": "False",
                    "name": "s",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "a hashed string",
                    "name": "hash",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get hex representation of a hash value as a string",
            "description": "Returns a hexadecimal representation of a hash value.\nThe returned string is always padded with leading zeros.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_hash&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">hexstr</span> <span class=\"o\">=</span> <span class=\"n\">hash_to_hex</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hexstr</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; a2bc06d97f580aab</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "hash_to_hex",
            "notes": [],
            "parameters": [
                {
                    "doc": "hash value to get hex string for",
                    "is_optional": "False",
                    "name": "h",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hex representation of the hash",
                    "name": "hex",
                    "types": [
                        "string"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "pretty printing",
            "description": "Pretty printing of Lua values. This function prints Lua values\nin a manner similar to +print()+, but will also recurse into tables\nand pretty print them. There is a limit to how deep the function\nwill recurse.",
            "error": "",
            "examples": "Pretty printing a Lua table with a nested table:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"p\">}</span>\n<span class=\"kd\">local</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">,</span> <span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">key3</span> <span class=\"o\">=</span> <span class=\"n\">t2</span> <span class=\"p\">}</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</code></pre></div>\n\nResulting in the following output (note that the key order in non array\nLua tables is undefined):\n<div class=\"codehilite\"><pre><span></span><code>{\n  key3 = {\n    1 = 1,\n    2 = 2,\n    3 = 3,\n    4 = 4,\n  }\n  key2 = 1234,\n  key = value,\n}\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "pprint",
            "notes": [],
            "parameters": [
                {
                    "doc": "value to print",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Built-ins API documentation",
        "description": "Built-in scripting functions.",
        "description_html": "<p>Built-in scripting functions.</p>",
        "file": "script.cpp",
        "language": "Lua",
        "name": "Built-ins",
        "namespace": "builtins",
        "notes": [],
        "path": "engine/script/src/script.cpp",
        "type": "Defold Lua"
    }
}