{
    "elements": [
        {
            "brief": "macro for scope lifetime optional mutex locking",
            "description": "If mutex is not null, Will lock the mutex and automatically unlock it at the end of the scope.\nSince using threads is optional, we want to make it easy to switch on/off the mutex behavior",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_MUTEX_OPTIONAL_SCOPED_LOCK",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mutex handle to lock, or null.",
                    "is_optional": "False",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "macro for scope lifetime Mutex locking",
            "description": "Will lock a Mutex and automatically unlock it at the end of the scope.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_MUTEX_SCOPED_LOCK",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mutex handle to lock.",
                    "is_optional": "False",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "delete Mutex.",
            "description": "Deletes a HMutex.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMutex::Delete",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mutex handle to delete.",
                    "is_optional": "False",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "HMutex type definition",
            "description": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Mutex</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">HMutex</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMutex::HMutex",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "lock Mutex.",
            "description": "Lock a HMutex, will block until mutex is unlocked if already locked elsewhere.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMutex::Lock",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mutex handle to lock.",
                    "is_optional": "False",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create Mutex",
            "description": "Creates a new HMutex.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMutex::New",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A new Mutex handle.",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "non-blocking lock of Mutex.",
            "description": "Tries to lock a HMutex, if mutex is already locked it will return false and\ncontinue without locking the mutex.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMutex::TryLock",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mutex handle to lock.",
                    "is_optional": "False",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if mutex was successfully locked, false otherwise.",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "unlock Mutex.",
            "description": "Unlock a HMutex.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmMutex::Unlock",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mutex handle to unlock.",
                    "is_optional": "False",
                    "name": "mutex",
                    "types": [
                        "dmMutex::HMutex"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "SDK Mutex API documentation",
        "description": "API for platform independent mutex synchronization primitive.",
        "description_html": "<p>API for platform independent mutex synchronization primitive.</p>",
        "file": "mutex.h",
        "include": "dmsdk/dlib/mutex.h",
        "language": "C++",
        "name": "Mutex",
        "namespace": "dmMutex",
        "notes": [],
        "path": "dmsdk/dlib/mutex.h",
        "type": "Defold C++"
    }
}