{
    "elements": [
        {
            "brief": "creates a new coroutine thread",
            "description": "Creates a new coroutine, with body f.\nf must be a Lua function.\nReturns this new coroutine,\nan object with type <code>\"thread\"</code>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "coroutine.create",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "f",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "start or resume a thread",
            "description": "Starts or continues the execution of coroutine co.\nThe first time you resume a coroutine,\nit starts running its body.\nThe values val1, ... are passed\nas the arguments to the body function.\nIf the coroutine has yielded,\nresume restarts it;\nthe values val1, ... are passed\nas the results from the yield.\nIf the coroutine runs without any errors,\nresume returns <span class=\"type\"> true</span> plus any values passed to yield\n(if the coroutine yields) or any values returned by the body function\n(if the coroutine terminates).\nIf there is any error,\nresume returns <span class=\"type\"> false</span> plus the error message.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "coroutine.resume",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "co",
                    "types": [
                        "thread"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "val1",
                    "types": [
                        "any"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "...",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns the running coroutine",
            "description": "Returns the running coroutine,\nor <span class=\"type\"> nil</span> when called by the main thread.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "coroutine.running",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns the status of a thread",
            "description": "Returns the status of coroutine co, as a string:\n<code>\"running\"</code>,\nif the coroutine is running (that is, it called status);\n<code>\"suspended\"</code>, if the coroutine is suspended in a call to yield,\nor if it has not started running yet;\n<code>\"normal\"</code> if the coroutine is active but not running\n(that is, it has resumed another coroutine);\nand <code>\"dead\"</code> if the coroutine has finished its body function,\nor if it has stopped with an error.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "coroutine.status",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "co",
                    "types": [
                        "thread"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a thread and returns a function to resume it",
            "description": "Creates a new coroutine, with body f.\nf must be a Lua function.\nReturns a function that resumes the coroutine each time it is called.\nAny arguments passed to the function behave as the\nextra arguments to resume.\nReturns the same values returned by resume,\nexcept the first boolean.\nIn case of error, propagates the error.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "coroutine.wrap",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "f",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "yields execution of thread back to the caller",
            "description": "Suspends the execution of the calling coroutine.\nThe coroutine cannot be running a C function,\na metamethod, or an iterator.\nAny arguments to yield are passed as extra results to resume.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "coroutine.yield",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "...",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Lua coroutine standard library",
        "description": "Documentation for the Lua coroutine standard library.\n\nFrom [Lua 5.1 Reference Manual](https://www.lua.org/manual/5.1/)\nby Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.\n\nCopyright &copy; 2006-2012 Lua.org, PUC-Rio.\n\nFreely available under the terms of the [Lua license](https://www.lua.org/license.html).",
        "file": "",
        "language": "Lua",
        "name": "Coroutine",
        "namespace": "coroutine",
        "notes": [],
        "path": "lua_coroutine.doc_h",
        "type": "Defold Lua"
    }
}