{
  "elements": [
    {
      "type": "VARIABLE",
      "name": "physics.JOINT_TYPE_SPRING",
      "brief": "spring joint type",
      "description": "The following properties are available when connecting a joint of <code>JOINT_TYPE_SPRING</code> type:",
      "returnvalues": [],
      "parameters": [
        {
          "name": "length",
          "doc": "The natural length between the anchor points.",
          "types": [
            "number"
          ]
        },
        {
          "name": "frequency",
          "doc": "The mass-spring-damper frequency in Hertz. A value of 0 disables softness.",
          "types": [
            "number"
          ]
        },
        {
          "name": "damping",
          "doc": "The damping ratio. 0 = no damping, 1 = critical damping.",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "physics.JOINT_TYPE_FIXED",
      "brief": "fixed joint type",
      "description": "The following properties are available when connecting a joint of <code>JOINT_TYPE_FIXED</code> type:",
      "returnvalues": [],
      "parameters": [
        {
          "name": "max_length",
          "doc": "The maximum length of the rope.",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "physics.JOINT_TYPE_HINGE",
      "brief": "hinge joint type",
      "description": "The following properties are available when connecting a joint of <code>JOINT_TYPE_HINGE</code> type:",
      "returnvalues": [],
      "parameters": [
        {
          "name": "reference_angle",
          "doc": "The bodyB angle minus bodyA angle in the reference state (radians).",
          "types": [
            "number"
          ]
        },
        {
          "name": "lower_angle",
          "doc": "The lower angle for the joint limit (radians).",
          "types": [
            "number"
          ]
        },
        {
          "name": "upper_angle",
          "doc": "The upper angle for the joint limit (radians).",
          "types": [
            "number"
          ]
        },
        {
          "name": "max_motor_torque",
          "doc": "The maximum motor torque used to achieve the desired motor speed. Usually in N-m.",
          "types": [
            "number"
          ]
        },
        {
          "name": "motor_speed",
          "doc": "The desired motor speed. Usually in radians per second.",
          "types": [
            "number"
          ]
        },
        {
          "name": "enable_limit",
          "doc": "A flag to enable joint limits.",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "enable_motor",
          "doc": "A flag to enable the joint motor.",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "joint_angle",
          "doc": "<span class=\"mark\">READ ONLY</span>Current joint angle in radians.\n(Read only field, available from <code>physics.get_joint_properties()</code>)",
          "types": [
            "number"
          ]
        },
        {
          "name": "joint_speed",
          "doc": "<span class=\"mark\">READ ONLY</span>Current joint angle speed in radians per second.\n(Read only field, available from <code>physics.get_joint_properties()</code>)",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "physics.JOINT_TYPE_SLIDER",
      "brief": "slider joint type",
      "description": "The following properties are available when connecting a joint of <code>JOINT_TYPE_SLIDER</code> type:",
      "returnvalues": [],
      "parameters": [
        {
          "name": "local_axis_a",
          "doc": "The local translation unit axis in bodyA.",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "reference_angle",
          "doc": "The constrained angle between the bodies: bodyB_angle - bodyA_angle.",
          "types": [
            "number"
          ]
        },
        {
          "name": "enable_limit",
          "doc": "Enable/disable the joint limit.",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "lower_translation",
          "doc": "The lower translation limit, usually in meters.",
          "types": [
            "number"
          ]
        },
        {
          "name": "upper_translation",
          "doc": "The upper translation limit, usually in meters.",
          "types": [
            "number"
          ]
        },
        {
          "name": "enable_motor",
          "doc": "Enable/disable the joint motor.",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "max_motor_force",
          "doc": "The maximum motor torque, usually in N-m.",
          "types": [
            "number"
          ]
        },
        {
          "name": "motor_speed",
          "doc": "The desired motor speed in radians per second.",
          "types": [
            "number"
          ]
        },
        {
          "name": "joint_translation",
          "doc": "<span class=\"mark\">READ ONLY</span>Current joint translation, usually in meters.\n(Read only field, available from <code>physics.get_joint_properties()</code>)",
          "types": [
            "number"
          ]
        },
        {
          "name": "joint_speed",
          "doc": "<span class=\"mark\">READ ONLY</span>Current joint translation speed, usually in meters per second.\n(Read only field, available from <code>physics.get_joint_properties()</code>)",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "physics.JOINT_TYPE_WELD",
      "brief": "weld joint type",
      "description": "The following properties are available when connecting a joint of <code>JOINT_TYPE_WELD</code> type:",
      "returnvalues": [],
      "parameters": [
        {
          "name": "reference_angle",
          "doc": "<span class=\"mark\">READ ONLY</span>The bodyB angle minus bodyA angle in the reference state (radians).",
          "types": [
            "number"
          ]
        },
        {
          "name": "frequency",
          "doc": "The mass-spring-damper frequency in Hertz. Rotation only. Disable softness with a value of 0.",
          "types": [
            "number"
          ]
        },
        {
          "name": "damping",
          "doc": "The damping ratio. 0 = no damping, 1 = critical damping.",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "VARIABLE",
      "name": "physics.JOINT_TYPE_WHEEL",
      "brief": "wheel joint type",
      "description": "The following properties are available when connecting a joint of <code>JOINT_TYPE_WHEEL</code> type:",
      "returnvalues": [],
      "parameters": [
        {
          "name": "local_axis_a",
          "doc": "The local translation unit axis in bodyA.",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "max_motor_torque",
          "doc": "The maximum motor torque used to achieve the desired motor speed. Usually in N-m.",
          "types": [
            "number"
          ]
        },
        {
          "name": "motor_speed",
          "doc": "The desired motor speed in radians per second.",
          "types": [
            "number"
          ]
        },
        {
          "name": "enable_motor",
          "doc": "Enable/disable the joint motor.",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "frequency",
          "doc": "The mass-spring-damper frequency in Hertz. Rotation only. Disable softness with a value of 0.",
          "types": [
            "number"
          ]
        },
        {
          "name": "damping",
          "doc": "The spring damping ratio. 0 = no damping, 1 = critical damping.",
          "types": [
            "number"
          ]
        },
        {
          "name": "joint_translation",
          "doc": "<span class=\"mark\">READ ONLY</span>Current joint translation, usually in meters.\n(Read only field, available from <code>physics.get_joint_properties()</code>)",
          "types": [
            "number"
          ]
        },
        {
          "name": "joint_speed",
          "doc": "<span class=\"mark\">READ ONLY</span>Current joint translation speed, usually in meters per second.\n(Read only field, available from <code>physics.get_joint_properties()</code>)",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "mass",
      "brief": "<span class=\"type\">number</span> collision object mass",
      "description": "<span class=\"mark\">READ ONLY</span> Returns the defined physical mass of the collision object component as a number.",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to query a collision object component's mass:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- get mass from collision object component &quot;boulder&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">mass</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#boulder&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mass&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- do something useful</span>\n<span class=\"nb\">assert</span><span class=\"p\">(</span><span class=\"n\">mass</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "linear_velocity",
      "brief": "<span class=\"type\">vector3</span> collision object linear velocity",
      "description": "The current linear velocity of the collision object component as a vector3.\nThe velocity is measured in units/s (pixels/s).",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to query and modify a collision object component's linear velocity:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- get linear velocity from collision object &quot;collisionobject&quot; in gameobject &quot;ship&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ship#collisionobject&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"s2\">&quot;linear_velocity&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- decrease it by 10%</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"s2\">&quot;linear_velocity&quot;</span><span class=\"p\">,</span> <span class=\"n\">velocity</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n<span class=\"c1\">-- apply the velocity on target game object &quot;boulder&quot;&#39;s collision object as a force</span>\n<span class=\"kd\">local</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;boulder#collisionobject&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_position</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s2\">&quot;apply_force&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"n\">force</span> <span class=\"o\">=</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">pos</span> <span class=\"p\">})</span>\n</code></pre></div>",
      "replaces": "request_velocity and velocity_response",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "angular_velocity",
      "brief": "<span class=\"type\">vector3</span> collision object angular velocity",
      "description": "The current angular velocity of the collision object component as a <span class=\"type\">vector3</span>.\nThe velocity is measured as a rotation around the vector with a speed equivalent to the vector length\nin radians/s.",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to query and modify a collision object component's angular velocity:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- get angular velocity from collision object &quot;collisionobject&quot; in gameobject &quot;boulder&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;boulder#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;angular_velocity&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- do something interesting</span>\n<span class=\"kr\">if</span> <span class=\"n\">velocity</span><span class=\"p\">.</span><span class=\"n\">z</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- clockwise rotation</span>\n    <span class=\"p\">...</span>\n<span class=\"kr\">else</span>\n    <span class=\"c1\">-- counter clockwise rotation</span>\n    <span class=\"p\">...</span>\n<span class=\"kr\">end</span>\n<span class=\"c1\">-- decrease it by 10%</span>\n<span class=\"n\">velocity</span><span class=\"p\">.</span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">velocity</span><span class=\"p\">.</span><span class=\"n\">z</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;boulder#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;angular_velocity&quot;</span><span class=\"p\">,</span> <span class=\"n\">velocity</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "request_velocity and velocity_response",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "linear_damping",
      "brief": "<span class=\"type\">number</span> collision object linear damping",
      "description": "The linear damping value for the collision object. Setting this value alters the damping of\nlinear motion of the object. Valid values are between 0 (no damping) and 1 (full damping).",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to increase a collision object component's linear damping:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- get linear damping from collision object &quot;collisionobject&quot; in gameobject &quot;floater&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;floater#collisionobject&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">damping</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s2\">&quot;linear_damping&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- increase it by 10% if it&#39;s below 0.9</span>\n<span class=\"kr\">if</span> <span class=\"n\">damping</span> <span class=\"o\">&lt;=</span> <span class=\"mf\">0.9</span> <span class=\"kr\">then</span>\n    <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s2\">&quot;linear_damping&quot;</span><span class=\"p\">,</span> <span class=\"n\">damping</span> <span class=\"o\">*</span> <span class=\"mf\">1.1</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "PROPERTY",
      "name": "angular_damping",
      "brief": "<span class=\"type\">number</span> collision object angular damping",
      "description": "The angular damping value for the collision object. Setting this value alters the damping of\nangular motion of the object (rotation). Valid values are between 0 (no damping) and 1 (full damping).",
      "returnvalues": [],
      "parameters": [],
      "examples": "How to decrease a collision object component's angular damping:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- get angular damping from collision object &quot;collisionobject&quot; in gameobject &quot;floater&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;floater#collisionobject&quot;</span>\n<span class=\"kd\">local</span> <span class=\"n\">damping</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s2\">&quot;angular_damping&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- decrease it by 10%</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s2\">&quot;angular_damping&quot;</span><span class=\"p\">,</span> <span class=\"n\">damping</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.raycast_async",
      "brief": "requests a ray cast to be performed",
      "description": "Ray casts are used to test for intersections against collision objects in the physics world.\nCollision objects of types kinematic, dynamic and static are tested against. Trigger objects\ndo not intersect with ray casts.\nWhich collision objects to hit is filtered by their collision groups and can be configured\nthrough <code>groups</code>.\nThe actual ray cast will be performed during the physics-update.\n<ul>\n<li>If an object is hit, the result will be reported via a <a href=\"#ray_cast_response\">ray_cast_response</a> message.</li>\n<li>If there is no object hit, the result will be reported via a <a href=\"#ray_cast_missed\">ray_cast_missed</a> message.</li>\n</ul>",
      "returnvalues": [],
      "parameters": [
        {
          "name": "from",
          "doc": "the world position of the start of the ray",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "to",
          "doc": "the world position of the end of the ray",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "groups",
          "doc": "a lua table containing the hashed groups for which to test collisions against",
          "types": [
            "table"
          ]
        },
        {
          "name": "[request_id]",
          "doc": "a number between [0,-255]. It will be sent back in the response for identification, 0 by default",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "How to perform a ray cast asynchronously:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_groups</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_group1&quot;</span><span class=\"p\">),</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_group2&quot;</span><span class=\"p\">)}</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- request ray cast</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">raycast_async</span><span class=\"p\">(</span><span class=\"n\">my_start</span><span class=\"p\">,</span> <span class=\"n\">my_end</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_groups</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for the response</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;ray_cast_response&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- act on the hit</span>\n    <span class=\"kr\">elseif</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;ray_cast_missed&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- act on the miss</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.raycast",
      "brief": "requests a ray cast to be performed",
      "description": "Ray casts are used to test for intersections against collision objects in the physics world.\nCollision objects of types kinematic, dynamic and static are tested against. Trigger objects\ndo not intersect with ray casts.\nWhich collision objects to hit is filtered by their collision groups and can be configured\nthrough <code>groups</code>.",
      "returnvalues": [
        {
          "name": "result",
          "doc": "It returns a list. If missed it returns <code>nil</code>. See <a href=\"#ray_cast_response\">ray_cast_response</a> for details on the returned values.",
          "types": [
            "table",
            "nil"
          ]
        }
      ],
      "parameters": [
        {
          "name": "from",
          "doc": "the world position of the start of the ray",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "to",
          "doc": "the world position of the end of the ray",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "groups",
          "doc": "a lua table containing the hashed groups for which to test collisions against",
          "types": [
            "table"
          ]
        },
        {
          "name": "options",
          "doc": "a lua table containing options for the raycast.\n<dl>\n<dt><code>all</code></dt>\n<dd><span class=\"type\">boolean</span> Set to <code>true</code> to return all ray cast hits. If <code>false</code>, it will only return the closest hit.</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to perform a ray cast synchronously:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;world&quot;</span><span class=\"p\">),</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;enemy&quot;</span><span class=\"p\">)}</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- request ray cast</span>\n    <span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">raycast</span><span class=\"p\">(</span><span class=\"n\">from</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">groups</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">all</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">})</span>\n    <span class=\"kr\">if</span> <span class=\"n\">result</span> <span class=\"o\">~=</span> <span class=\"kc\">nil</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- act on the hit (see &#39;ray_cast_response&#39;)</span>\n        <span class=\"kr\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span><span class=\"n\">result</span> <span class=\"kr\">in</span> <span class=\"nb\">ipairs</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span> <span class=\"kr\">do</span>\n            <span class=\"n\">handle_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.create_joint",
      "brief": "create a physics joint",
      "description": "Create a physics joint between two collision object components.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "joint_type",
          "doc": "the joint type",
          "types": [
            "number"
          ]
        },
        {
          "name": "collisionobject_a",
          "doc": "first collision object",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "joint_id",
          "doc": "id of the joint",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "position_a",
          "doc": "local position where to attach the joint on the first collision object",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "collisionobject_b",
          "doc": "second collision object",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "position_b",
          "doc": "local position where to attach the joint on the second collision object",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "[properties]",
          "doc": "optional joint specific properties table\nSee each joint type for possible properties field. The one field that is accepted for all joint types is:\n- <span class=\"type\">boolean</span> <code>collide_connected</code>: Set this flag to true if the attached bodies should collide.",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.destroy_joint",
      "brief": "destroy a physics joint",
      "description": "Destroy an already physics joint. The joint has to be created before a\ndestroy can be issued.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "collisionobject",
          "doc": "collision object where the joint exist",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "joint_id",
          "doc": "id of the joint",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_joint_properties",
      "brief": "get properties for a joint",
      "description": "Get a table for properties for a connected joint. The joint has to be created before\nproperties can be retrieved.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [
        {
          "name": "properties",
          "doc": "properties table. See the joint types for what fields are available, the only field available for all types is:\n<ul>\n<li><span class=\"type\">boolean</span> <code>collide_connected</code>: Set this flag to true if the attached bodies should collide.</li>\n</ul>",
          "types": [
            "table"
          ]
        }
      ],
      "parameters": [
        {
          "name": "collisionobject",
          "doc": "collision object where the joint exist",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "joint_id",
          "doc": "id of the joint",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_joint_properties",
      "brief": "set properties for a joint",
      "description": "Updates the properties for an already connected joint. The joint has to be created before\nproperties can be changed.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "collisionobject",
          "doc": "collision object where the joint exist",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "joint_id",
          "doc": "id of the joint",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "properties",
          "doc": "joint specific properties table\nNote: The <code>collide_connected</code> field cannot be updated/changed after a connection has been made.",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_joint_reaction_force",
      "brief": "get the reaction force for a joint",
      "description": "Get the reaction force for a joint. The joint has to be created before\nthe reaction force can be calculated.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [
        {
          "name": "force",
          "doc": "reaction force for the joint",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [
        {
          "name": "collisionobject",
          "doc": "collision object where the joint exist",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "joint_id",
          "doc": "id of the joint",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_joint_reaction_torque",
      "brief": "get the reaction torque for a joint",
      "description": "Get the reaction torque for a joint. The joint has to be created before\nthe reaction torque can be calculated.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [
        {
          "name": "torque",
          "doc": "the reaction torque on bodyB in N*m.",
          "types": [
            "float"
          ]
        }
      ],
      "parameters": [
        {
          "name": "collisionobject",
          "doc": "collision object where the joint exist",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "joint_id",
          "doc": "id of the joint",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_gravity",
      "brief": "set the gravity for collection",
      "description": "Set the gravity in runtime. The gravity change is not global, it will only affect\nthe collection that the function is called from.\nNote: For 2D physics the z component of the gravity vector will be ignored.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "gravity",
          "doc": "the new gravity vector",
          "types": [
            "vector3"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Set &quot;upside down&quot; gravity for this collection.</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_gravity</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_gravity",
      "brief": "get the gravity for collection",
      "description": "Get the gravity in runtime. The gravity returned is not global, it will return\nthe gravity for the collection that the function is called from.\nNote: For 2D physics the z component will always be zero.",
      "returnvalues": [
        {
          "name": "gravity",
          "doc": "gravity vector of collection",
          "types": [
            "vector3"
          ]
        }
      ],
      "parameters": [],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">get_gravity</span><span class=\"p\">()</span>\n    <span class=\"c1\">-- Inverse gravity!</span>\n    <span class=\"n\">gravity</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">gravity</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_gravity</span><span class=\"p\">(</span><span class=\"n\">gravity</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_hflip",
      "brief": "flip the geometry horizontally for a collision object",
      "description": "Flips the collision shapes horizontally for a collision object",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object that should flip its shapes",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "flip",
          "doc": "<code>true</code> if the collision object should flip its shapes, <code>false</code> if not",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fliph</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">-- set on some condition</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_hflip</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">fliph</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_vflip",
      "brief": "flip the geometry vertically for a collision object",
      "description": "Flips the collision shapes vertically for a collision object",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object that should flip its shapes",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "flip",
          "doc": "<code>true</code> if the collision object should flip its shapes, <code>false</code> if not",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">flipv</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">-- set on some condition</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_vflip</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">flipv</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.wakeup",
      "brief": "explicitly wakeup a collision object",
      "description": "Collision objects tend to fall asleep when inactive for a small period of time for\nefficiency reasons. This function wakes them up.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object to wake.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;test&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">pressed</span> <span class=\"kr\">then</span>\n        <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">wakeup</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "string",
            "hash",
            "url"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_group",
      "brief": "change the group of a collision object",
      "description": "Updates the group property of a collision object to the specified\nstring value. The group name should exist i.e. have been used in\na collision object in the editor.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object affected.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "group",
          "doc": "the new group name to be assigned.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">change_collision_group</span><span class=\"p\">()</span>\n     <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_group</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;enemy&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_group",
      "brief": "returns the group of a collision object",
      "description": "Returns the group name of a collision object as a hash.",
      "returnvalues": [
        {
          "name": "group",
          "doc": "hash value of the group.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">check_is_enemy</span><span class=\"p\">()</span>\n    <span class=\"kd\">local</span> <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">get_group</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">return</span> <span class=\"n\">group</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;enemy&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "hash"
          ]
        }
      ],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object to return the group of.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_maskbit",
      "brief": "updates the mask of a collision object",
      "description": "Sets or clears the masking of a group (maskbit) in a collision object.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object to change the mask of.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "group",
          "doc": "the name of the group (maskbit) to modify in the mask.",
          "types": [
            "string"
          ]
        },
        {
          "name": "maskbit",
          "doc": "boolean value of the new maskbit. 'true' to enable, 'false' to disable.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">make_invincible</span><span class=\"p\">()</span>\n    <span class=\"c1\">-- no longer collide with the &quot;bullet&quot; group</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_maskbit</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bullet&quot;</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "boolean"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_maskbit",
      "brief": "checks the presense of a group in the mask (maskbit) of a collision object",
      "description": "Returns true if the specified group is set in the mask of a collision\nobject, false otherwise.",
      "returnvalues": [
        {
          "name": "maskbit",
          "doc": "boolean value of the maskbit. 'true' if present, 'false' otherwise.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">is_invincible</span><span class=\"p\">()</span>\n    <span class=\"c1\">-- check if the collisionobject would collide with the &quot;bullet&quot; group</span>\n    <span class=\"kd\">local</span> <span class=\"n\">invincible</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">get_maskbit</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bullet&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">return</span> <span class=\"n\">invincible</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "boolean"
          ]
        }
      ],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object to check the mask of.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "group",
          "doc": "the name of the group to check for.",
          "types": [
            "string"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.get_shape",
      "brief": "get collision shape info",
      "description": "Gets collision shape data from a collision object",
      "returnvalues": [
        {
          "name": "table",
          "doc": "A table containing meta data about the physics shape\n<dl>\n<dt><code>type</code></dt>\n<dd><span class=\"type\">number</span> The shape type. Supported values:</dd>\n</dl>\n<ul>\n<li><code>physics.SHAPE_TYPE_SPHERE</code></li>\n<li><code>physics.SHAPE_TYPE_BOX</code></li>\n<li><code>physics.SHAPE_TYPE_CAPSULE</code> <em>Only supported for 3D physics</em></li>\n<li><code>physics.SHAPE_TYPE_HULL</code></li>\n</ul>\nThe returned table contains different fields depending on which type the shape is.\nIf the shape is a sphere:\n<dl>\n<dt><code>diameter</code></dt>\n<dd><span class=\"type\">number</span> the diameter of the sphere shape</dd>\n</dl>\nIf the shape is a box:\n<dl>\n<dt><code>dimensions</code></dt>\n<dd><span class=\"type\">vector3</span> a <code>vmath.vector3</code> of the box dimensions</dd>\n</dl>\nIf the shape is a capsule:\n<dl>\n<dt><code>diameter</code></dt>\n<dd><span class=\"type\">number</span> the diameter of the capsule poles</dd>\n<dt><code>height</code></dt>\n<dd><span class=\"type\">number</span> the height of the capsule</dd>\n</dl>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">get_shape_meta</span><span class=\"p\">()</span>\n    <span class=\"kd\">local</span> <span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">get_shape</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_sphere_shape&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- returns a table with sphere.diameter</span>\n    <span class=\"kr\">return</span> <span class=\"n\">sphere</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "table"
          ]
        }
      ],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "shape",
          "doc": "the name of the shape to get data for.",
          "types": [
            "string",
            "hash"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_shape",
      "brief": "set collision shape data",
      "description": "Sets collision shape data for a collision object. Please note that updating data in 3D\ncan be quite costly for box and capsules. Because of the physics engine, the cost\ncomes from having to recreate the shape objects when certain shapes needs to be updated.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "url",
          "doc": "the collision object.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "shape",
          "doc": "the name of the shape to get data for.",
          "types": [
            "string",
            "hash"
          ]
        },
        {
          "name": "table",
          "doc": "the shape data to update the shape with.\nSee <a href=\"/ref/physics#physics.get_shape\">physics.get_shape</a> for a detailed description of each field in the data table.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">set_shape_data</span><span class=\"p\">()</span>\n    <span class=\"c1\">-- set capsule shape data</span>\n    <span class=\"kd\">local</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">diameter</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_shape</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_capsule_shape&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">-- set sphere shape data</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">diameter</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_shape</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_sphere_shape&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">-- set box shape data</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">dimensions</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_shape</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_box_shape&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.set_listener",
      "brief": "sets a physics world event listener. If a function is set, physics messages will no longer be sent.",
      "description": "sets a physics world event listener. If a function is set, physics messages will no longer be sent.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "callback",
          "doc": "A callback that receives information about all the physics interactions in this physics world.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The calling script</dd>\n<dt><code>event</code></dt>\n<dd><span class=\"type\">constant</span> The type of event. Can be one of these messages:</dd>\n</dl>\n<ul>\n<li><a href=\"#contact_point_event\">contact_point_event</a></li>\n<li><a href=\"#collision_event\">collision_event</a></li>\n<li><a href=\"#trigger_event\">trigger_event</a></li>\n<li><a href=\"#ray_cast_response\">ray_cast_response</a></li>\n<li><a href=\"#ray_cast_missed\">ray_cast_missed</a></li>\n</ul>\n<dl>\n<dt><code>data</code></dt>\n<dd><span class=\"type\">table</span> The callback value data is a table that contains event-related data. See the documentation for details on the messages.</dd>\n</dl>",
          "types": [
            "function(self, event, data)",
            "nil"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">physics_world_listener</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;contact_point_event&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- {</span>\n    <span class=\"c1\">--  distance = 0.0714111328125,</span>\n    <span class=\"c1\">--  applied_impulse = 310.00769042969,</span>\n    <span class=\"c1\">--  a = {</span>\n    <span class=\"c1\">--      position = vmath.vector3(446, 371, 0),</span>\n    <span class=\"c1\">--      relative_velocity = vmath.vector3(1.1722083854693e-06, -20.667181015015, -0),</span>\n    <span class=\"c1\">--      mass = 0,</span>\n    <span class=\"c1\">--      group = hash: [default],</span>\n    <span class=\"c1\">--      id = hash: [/flat],</span>\n    <span class=\"c1\">--      normal = vmath.vector3(-0, -1, -0)</span>\n    <span class=\"c1\">--  },</span>\n    <span class=\"c1\">--  b = {</span>\n    <span class=\"c1\">--      position = vmath.vector3(185, 657.92858886719, 0),</span>\n    <span class=\"c1\">--      relative_velocity = vmath.vector3(-1.1722083854693e-06, 20.667181015015, 0),</span>\n    <span class=\"c1\">--      mass = 10,</span>\n    <span class=\"c1\">--      group = hash: [default],</span>\n    <span class=\"c1\">--      id = hash: [/go2],</span>\n    <span class=\"c1\">--      normal = vmath.vector3(0, 1, 0)</span>\n    <span class=\"c1\">--  }</span>\n    <span class=\"c1\">-- }</span>\n  <span class=\"kr\">elseif</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;collision_event&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- {</span>\n    <span class=\"c1\">--  a = {</span>\n    <span class=\"c1\">--          group = hash: [default],</span>\n    <span class=\"c1\">--          position = vmath.vector3(183, 666, 0),</span>\n    <span class=\"c1\">--          id = hash: [/go1]</span>\n    <span class=\"c1\">--      },</span>\n    <span class=\"c1\">--  b = {</span>\n    <span class=\"c1\">--          group = hash: [default],</span>\n    <span class=\"c1\">--          position = vmath.vector3(185, 704.05865478516, 0),</span>\n    <span class=\"c1\">--          id = hash: [/go2]</span>\n    <span class=\"c1\">--      }</span>\n    <span class=\"c1\">-- }</span>\n  <span class=\"kr\">elseif</span> <span class=\"n\">event</span> <span class=\"o\">==</span>  <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;trigger_event&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- {</span>\n    <span class=\"c1\">--  enter = true,</span>\n    <span class=\"c1\">--  b = {</span>\n    <span class=\"c1\">--      group = hash: [default],</span>\n    <span class=\"c1\">--      id = hash: [/go2]</span>\n    <span class=\"c1\">--  },</span>\n    <span class=\"c1\">--  a = {</span>\n    <span class=\"c1\">--      group = hash: [default],</span>\n    <span class=\"c1\">--      id = hash: [/go1]</span>\n    <span class=\"c1\">--  }</span>\n    <span class=\"c1\">-- },</span>\n  <span class=\"kr\">elseif</span> <span class=\"n\">event</span> <span class=\"o\">==</span>  <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;ray_cast_response&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"c1\">--{</span>\n    <span class=\"c1\">--  group = hash: [default],</span>\n    <span class=\"c1\">--  request_id = 0,</span>\n    <span class=\"c1\">--  position = vmath.vector3(249.92222595215, 249.92222595215, 0),</span>\n    <span class=\"c1\">--  fraction = 0.68759721517563,</span>\n    <span class=\"c1\">--  normal = vmath.vector3(0, 1, 0),</span>\n    <span class=\"c1\">--  id = hash: [/go]</span>\n    <span class=\"c1\">-- }</span>\n  <span class=\"kr\">elseif</span> <span class=\"n\">event</span> <span class=\"o\">==</span>  <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;ray_cast_missed&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- {</span>\n    <span class=\"c1\">--  request_id = 0</span>\n    <span class=\"c1\">--},</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_listener</span><span class=\"p\">(</span><span class=\"n\">physics_world_listener</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "FUNCTION",
      "name": "physics.update_mass",
      "brief": "updates the mass of a dynamic 2D collision object in the physics world.",
      "description": "The function recalculates the density of each shape based on the total area of all shapes and the specified mass, then updates the mass of the body accordingly.\nNote: Currently only supported in 2D physics.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "collisionobject",
          "doc": "the collision object whose mass needs to be updated.",
          "types": [
            "string",
            "hash",
            "url"
          ]
        },
        {
          "name": "mass",
          "doc": "the new mass value to set for the collision object.",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "<div class=\"codehilite\"><pre><span></span><code> <span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">update_mass</span><span class=\"p\">(</span><span class=\"s2\">&quot;#collisionobject&quot;</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "apply_force",
      "brief": "applies a force on a collision object",
      "description": "Post this message to a collision-object-component to apply the specified force on the collision object.\nThe collision object must be dynamic.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "force",
          "doc": "the force to be applied on the collision object, measured in Newton",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "position",
          "doc": "the position where the force should be applied",
          "types": [
            "vector3"
          ]
        }
      ],
      "examples": "Assuming the instance of the script has a collision-object-component with id \"co\":\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- apply a force of 1 Newton towards world-x at the center of the game object instance</span>\n<span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;#co&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;apply_force&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">force</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_position</span><span class=\"p\">()})</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "collision_response",
      "brief": "reports a collision between two collision objects",
      "description": "This message is broadcasted to every component of an instance that has a collision object,\nwhen the collision object collides with another collision object. For a script to take action\nwhen such a collision happens, it should check for this message in its <code>on_message</code> callback\nfunction.\nThis message only reports that a collision actually happened and will only be sent once per\ncolliding pair and frame.\nTo retrieve more detailed information, check for the <code>contact_point_response</code> instead.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "other_id",
          "doc": "the id of the instance the collision object collided with",
          "types": [
            "hash"
          ]
        },
        {
          "name": "other_position",
          "doc": "the world position of the instance the collision object collided with",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "other_group",
          "doc": "the collision group of the other collision object",
          "types": [
            "hash"
          ]
        },
        {
          "name": "own_group",
          "doc": "the collision group of the own collision object",
          "types": [
            "hash"
          ]
        }
      ],
      "examples": "How to take action when a collision occurs:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for the message</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;collision_response&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- take action</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "contact_point_response",
      "brief": "reports a contact point between two collision objects",
      "description": "This message is broadcasted to every component of an instance that has a collision object,\nwhen the collision object has contact points with respect to another collision object.\nFor a script to take action when such contact points occur, it should check for this message\nin its <code>on_message</code> callback function.\nSince multiple contact points can occur for two colliding objects, this message can be sent\nmultiple times in the same frame for the same two colliding objects. To only be notified once\nwhen the collision occurs, check for the <code>collision_response</code> message instead.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "position",
          "doc": "world position of the contact point",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "normal",
          "doc": "normal in world space of the contact point, which points from the other object towards the current object",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "relative_velocity",
          "doc": "the relative velocity of the collision object as observed from the other object",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "distance",
          "doc": "the penetration distance between the objects, which is always positive",
          "types": [
            "number"
          ]
        },
        {
          "name": "applied_impulse",
          "doc": "the impulse the contact resulted in",
          "types": [
            "number"
          ]
        },
        {
          "name": "life_time",
          "doc": "life time of the contact, <strong>not currently used</strong>",
          "types": [
            "number"
          ]
        },
        {
          "name": "mass",
          "doc": "the mass of the current collision object in kg",
          "types": [
            "number"
          ]
        },
        {
          "name": "other_mass",
          "doc": "the mass of the other collision object in kg",
          "types": [
            "number"
          ]
        },
        {
          "name": "other_id",
          "doc": "the id of the instance the collision object is in contact with",
          "types": [
            "hash"
          ]
        },
        {
          "name": "other_position",
          "doc": "the world position of the other collision object",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "other_group",
          "doc": "the collision group of the other collision object",
          "types": [
            "hash"
          ]
        },
        {
          "name": "own_group",
          "doc": "the collision group of the own collision object",
          "types": [
            "hash"
          ]
        }
      ],
      "examples": "How to take action when a contact point occurs:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for the message</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;contact_point_response&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- take action</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "trigger_response",
      "brief": "reports interaction (enter/exit) between a trigger collision object and another collision object",
      "description": "This message is broadcasted to every component of an instance that has a collision object,\nwhen the collision object interacts with another collision object and one of them is a trigger.\nFor a script to take action when such an interaction happens, it should check for this message\nin its <code>on_message</code> callback function.\nThis message only reports that an interaction actually happened and will only be sent once per\ncolliding pair and frame. To retrieve more detailed information, check for the\n<code>contact_point_response</code> instead.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "other_id",
          "doc": "the id of the instance the collision object collided with",
          "types": [
            "hash"
          ]
        },
        {
          "name": "enter",
          "doc": "if the interaction was an entry or not",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "other_group",
          "doc": "the collision group of the triggering collision object",
          "types": [
            "hash"
          ]
        },
        {
          "name": "own_group",
          "doc": "the collision group of the own collision object",
          "types": [
            "hash"
          ]
        }
      ],
      "examples": "How to take action when a trigger interaction occurs:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for the message</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;trigger_response&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"kr\">if</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">enter</span> <span class=\"kr\">then</span>\n            <span class=\"c1\">-- take action for entry</span>\n        <span class=\"kr\">else</span>\n            <span class=\"c1\">-- take action for exit</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "ray_cast_response",
      "brief": "reports a ray cast hit",
      "description": "This message is sent back to the sender of a <a href=\"#ray_cast_request\">ray_cast_request</a>, or to the physics world listener\nif it is set (see <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>), if the ray hits a collision object.\nSee <a href=\"/ref/physics#physics.raycast_async\">physics.raycast_async</a> for examples of how to use it.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "fraction",
          "doc": "the fraction of the hit measured along the ray, where 0 is the start of the ray and 1 is the end",
          "types": [
            "number"
          ]
        },
        {
          "name": "position",
          "doc": "the world position of the hit",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "normal",
          "doc": "the normal of the surface of the collision object where it was hit",
          "types": [
            "vector3"
          ]
        },
        {
          "name": "id",
          "doc": "the instance id of the hit collision object",
          "types": [
            "hash"
          ]
        },
        {
          "name": "group",
          "doc": "the collision group of the hit collision object as a hashed name",
          "types": [
            "hash"
          ]
        },
        {
          "name": "request_id",
          "doc": "id supplied when the ray cast was requested",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "ray_cast_missed",
      "brief": "reports a ray cast miss",
      "description": "This message is sent back to the sender of a <a href=\"#ray_cast_request\">ray_cast_request</a>, or to the physics world listener\nif it is set (see <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>), if the ray didn't hit any collision object.\nSee <a href=\"/ref/physics#physics.raycast_async\">physics.raycast_async</a> for examples of how to use it.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "request_id",
          "doc": "id supplied when the ray cast was requested",
          "types": [
            "number"
          ]
        }
      ],
      "examples": "",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "contact_point_event",
      "brief": "reports a contact point between two collision objects in cases where a listener is specified.",
      "description": "See <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>.\nThis message is sent to a function specified in <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a> when\na collision object has contact points with another collision object.\nSince multiple contact points can occur for two colliding objects, this event can be sent\nmultiple times in the same frame for the same two colliding objects. To only be notified once\nwhen the collision occurs, check for the <a href=\"#collision_event\">collision_event</a> event instead.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "applied_impulse",
          "doc": "the impulse the contact resulted in",
          "types": [
            "number"
          ]
        },
        {
          "name": "distance",
          "doc": "the penetration distance between the objects, which is always positive",
          "types": [
            "number"
          ]
        },
        {
          "name": "a",
          "doc": "contact point information for object A\n<dl>\n<dt><code>position</code></dt>\n<dd><span class=\"type\">vector3</span> The world position of object A</dd>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The ID of object A</dd>\n<dt><code>group</code></dt>\n<dd><span class=\"type\">hash</span> The collision group of object A</dd>\n<dt><code>relative_velocity</code></dt>\n<dd><span class=\"type\">vector3</span> The relative velocity of the collision object A as observed from B object</dd>\n<dt><code>mass</code></dt>\n<dd><span class=\"type\">number</span> The mass of the collision object A in kg</dd>\n<dt><code>normal</code></dt>\n<dd><span class=\"type\">vector3</span> normal in world space of the contact point, which points from B object towards A object</dd>\n</dl>",
          "types": [
            "table"
          ]
        },
        {
          "name": "b",
          "doc": "contact point information for object B\n<dl>\n<dt><code>position</code></dt>\n<dd><span class=\"type\">vector3</span> The world position of object B</dd>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The ID of object B</dd>\n<dt><code>group</code></dt>\n<dd><span class=\"type\">hash</span> The collision group of object B</dd>\n<dt><code>relative_velocity</code></dt>\n<dd><span class=\"type\">vector3</span> The relative velocity of the collision object B as observed from A object</dd>\n<dt><code>mass</code></dt>\n<dd><span class=\"type\">number</span> The mass of the collision object B in kg</dd>\n<dt><code>normal</code></dt>\n<dd><span class=\"type\">vector3</span> normal in world space of the contact point, which points from A object towards B object</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to take action when a contact point occurs:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_listener</span><span class=\"p\">(</span><span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n <span class=\"kr\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;contact_point_event&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n     <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n     <span class=\"c1\">-- {</span>\n     <span class=\"c1\">--  applied_impulse = 310.00769042969,</span>\n     <span class=\"c1\">--  distance = 0.0714111328125,</span>\n     <span class=\"c1\">--  a = {</span>\n     <span class=\"c1\">--      position = vmath.vector3(446, 371, 0),</span>\n     <span class=\"c1\">--      relative_velocity = vmath.vector3(1.1722083854693e-06, -20.667181015015, -0),</span>\n     <span class=\"c1\">--      mass = 0,</span>\n     <span class=\"c1\">--      group = hash: [default],</span>\n     <span class=\"c1\">--      id = hash: [/flat],</span>\n     <span class=\"c1\">--      normal = vmath.vector3(-0, -1, -0)</span>\n     <span class=\"c1\">--  },</span>\n     <span class=\"c1\">--  b = {</span>\n     <span class=\"c1\">--      position = vmath.vector3(185, 657.92858886719, 0),</span>\n     <span class=\"c1\">--      relative_velocity = vmath.vector3(-1.1722083854693e-06, 20.667181015015, 0),</span>\n     <span class=\"c1\">--      mass = 10,</span>\n     <span class=\"c1\">--      group = hash: [default],</span>\n     <span class=\"c1\">--      id = hash: [/go2],</span>\n     <span class=\"c1\">--      normal = vmath.vector3(0, 1, 0)</span>\n     <span class=\"c1\">--  },</span>\n     <span class=\"c1\">-- }</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "collision_event",
      "brief": "reports a collision between two collision objects in cases where a listener is specified.",
      "description": "See <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>.\nThis message is sent to a function specified in <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>\nwhen two collision objects collide.\nThis message only reports that a collision has occurred and will be sent once per frame and per colliding pair.\nFor more detailed information, check for the <a href=\"#contact_point_event\">contact_point_event</a>.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "a",
          "doc": "collision information for object A\n<dl>\n<dt><code>position</code></dt>\n<dd><span class=\"type\">vector3</span> The world position of object A</dd>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The ID of object A</dd>\n<dt><code>group</code></dt>\n<dd><span class=\"type\">hash</span> The collision group of object A</dd>\n</dl>",
          "types": [
            "table"
          ]
        },
        {
          "name": "b",
          "doc": "collision information for object B\n<dl>\n<dt><code>position</code></dt>\n<dd><span class=\"type\">vector3</span> The world position of object B</dd>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The ID of object B</dd>\n<dt><code>group</code></dt>\n<dd><span class=\"type\">hash</span> The collision group of object B</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to take action when a collision occurs:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_listener</span><span class=\"p\">(</span><span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;collision_event&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n      <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n      <span class=\"c1\">-- {</span>\n      <span class=\"c1\">--  a = {</span>\n      <span class=\"c1\">--          group = hash: [default],</span>\n      <span class=\"c1\">--          position = vmath.vector3(183, 666, 0),</span>\n      <span class=\"c1\">--          id = hash: [/go1]</span>\n      <span class=\"c1\">--      },</span>\n      <span class=\"c1\">--  b = {</span>\n      <span class=\"c1\">--          group = hash: [default],</span>\n      <span class=\"c1\">--          position = vmath.vector3(185, 704.05865478516, 0),</span>\n      <span class=\"c1\">--          id = hash: [/go2]</span>\n      <span class=\"c1\">--      }</span>\n      <span class=\"c1\">-- }</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    },
    {
      "type": "MESSAGE",
      "name": "trigger_event",
      "brief": "reports interaction (enter/exit) between a trigger collision object and another collision object",
      "description": "See <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>.\nThis message is sent to a function specified in <a href=\"/ref/physics#physics.set_listener\">physics.set_listener</a>\nwhen a collision object interacts with another collision object and one of them is a trigger.\nThis message only reports that an interaction actually happened and will be sent once per colliding pair and frame.\nFor more detailed information, check for the <a href=\"#contact_point_event\">contact_point_event</a>.",
      "returnvalues": [],
      "parameters": [
        {
          "name": "enter",
          "doc": "if the interaction was an entry or not",
          "types": [
            "boolean"
          ]
        },
        {
          "name": "a",
          "doc": "<dl>\n<dt>interaction information for object A</dt>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The ID of object A</dd>\n<dt><code>group</code></dt>\n<dd><span class=\"type\">hash</span> The collision group of object A</dd>\n</dl>",
          "types": [
            "table"
          ]
        },
        {
          "name": "b",
          "doc": "collision information for object B\n<dl>\n<dt><code>id</code></dt>\n<dd><span class=\"type\">hash</span> The ID of object B</dd>\n<dt><code>group</code></dt>\n<dd><span class=\"type\">hash</span> The collision group of object B</dd>\n</dl>",
          "types": [
            "table"
          ]
        }
      ],
      "examples": "How to take action when a trigger interaction occurs:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">physics</span><span class=\"p\">.</span><span class=\"n\">set_listener</span><span class=\"p\">(</span><span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n <span class=\"kr\">if</span> <span class=\"n\">event</span> <span class=\"o\">==</span>  <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;trigger_event&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n     <span class=\"kr\">if</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">enter</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- take action for entry</span>\n     <span class=\"kr\">else</span>\n        <span class=\"c1\">-- take action for exit</span>\n     <span class=\"kr\">end</span>\n     <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n     <span class=\"c1\">-- {</span>\n     <span class=\"c1\">--  enter = true,</span>\n     <span class=\"c1\">--  b = {</span>\n     <span class=\"c1\">--      group = hash: [default],</span>\n     <span class=\"c1\">--      id = hash: [/go2]</span>\n     <span class=\"c1\">--  },</span>\n     <span class=\"c1\">--  a = {</span>\n     <span class=\"c1\">--      group = hash: [default],</span>\n     <span class=\"c1\">--      id = hash: [/go1]</span>\n     <span class=\"c1\">--  }</span>\n     <span class=\"c1\">-- },</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>",
      "replaces": "",
      "error": "",
      "tparams": [],
      "members": [],
      "notes": []
    }
  ],
  "info": {
    "namespace": "physics",
    "name": "Collision object",
    "brief": "Collision object physics API documentation",
    "description": "Collision object physics API documentation",
    "path": "",
    "file": "",
    "notes": [],
    "group": "SYSTEM"
  }
}