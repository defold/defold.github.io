{
    "elements": [
        {
            "brief": "encryption algorithm enumeration",
            "description": "encryption algorithm enumeration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmCrypt::ALGORITHM_XTEA",
                    "type": ""
                }
            ],
            "name": "Algorithm",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Base64 decode a buffer",
            "description": "Base64 decode a buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::Base64Decode",
            "notes": [
                "Call this function with *dst_len = 0 to obtain the required buffer size in *dst_len"
            ],
            "parameters": [
                {
                    "doc": "The source data to encode",
                    "is_optional": "False",
                    "name": "src",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key The length of source data in bytes",
                    "is_optional": "False",
                    "name": "src_len",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The destination buffer",
                    "is_optional": "False",
                    "name": "dst",
                    "types": [
                        "uint8_t*"
                    ]
                },
                {
                    "doc": "In: The length of the destination in bytes. Out: The length of the decoded string.",
                    "is_optional": "False",
                    "name": "dst_len[in,out]",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the decoding went ok",
                    "name": "success",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Base64 encode a buffer",
            "description": "Base64 encode a buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::Base64Encode",
            "notes": [
                "Call this function with *dst_len = 0 to obtain the required buffer size in *dst_len"
            ],
            "parameters": [
                {
                    "doc": "The source data to encode",
                    "is_optional": "False",
                    "name": "src",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key The length of source data in bytes",
                    "is_optional": "False",
                    "name": "src_len",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The destination buffer",
                    "is_optional": "False",
                    "name": "dst",
                    "types": [
                        "uint8_t*"
                    ]
                },
                {
                    "doc": "In: The length of the destination in bytes. Out: The length of the encoded string.",
                    "is_optional": "False",
                    "name": "dst_len[in,out]",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the encoding went ok",
                    "name": "success",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Decrypt data in place",
            "description": "Decrypt data in place",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::Decrypt",
            "notes": [],
            "parameters": [
                {
                    "doc": "algorithm",
                    "is_optional": "False",
                    "name": "algo",
                    "types": [
                        "dmCrypt::Algorithm"
                    ]
                },
                {
                    "doc": "data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "data length in bytes",
                    "is_optional": "False",
                    "name": "datalen",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "key",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key length",
                    "is_optional": "False",
                    "name": "keylen",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the decryption result",
                    "name": "result",
                    "types": [
                        "dmCrypt::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Encrypt data in place",
            "description": "Encrypt data in place",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::Encrypt",
            "notes": [],
            "parameters": [
                {
                    "doc": "algorithm",
                    "is_optional": "False",
                    "name": "algo",
                    "types": [
                        "dmCrypt::Algorithm"
                    ]
                },
                {
                    "doc": "data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "data length in bytes",
                    "is_optional": "False",
                    "name": "datalen",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "key",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key length",
                    "is_optional": "False",
                    "name": "keylen",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the encryption result",
                    "name": "result",
                    "types": [
                        "dmCrypt::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Hash buffer using MD5",
            "description": "Hash buffer using MD5",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::HashMd5",
            "notes": [],
            "parameters": [
                {
                    "doc": "The source data to hash",
                    "is_optional": "False",
                    "name": "buf",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key The length of source data in bytes",
                    "is_optional": "False",
                    "name": "buflen",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The destination buffer (16 bytes)",
                    "is_optional": "False",
                    "name": "digest",
                    "types": [
                        "const uint8_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Hash buffer using SHA1",
            "description": "Hash buffer using SHA1",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::HashSha1",
            "notes": [],
            "parameters": [
                {
                    "doc": "The source data to hash",
                    "is_optional": "False",
                    "name": "buf",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "The length of source data in bytes",
                    "is_optional": "False",
                    "name": "buflen",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The destination buffer (20 bytes)",
                    "is_optional": "False",
                    "name": "digest",
                    "types": [
                        "uint8_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Hash buffer using SHA256",
            "description": "Hash buffer using SHA256",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::HashSha256",
            "notes": [],
            "parameters": [
                {
                    "doc": "The source data to hash",
                    "is_optional": "False",
                    "name": "buf",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key The length of source data in bytes",
                    "is_optional": "False",
                    "name": "buflen",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The destination buffer (32 bytes)",
                    "is_optional": "False",
                    "name": "digest",
                    "types": [
                        "uint8_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Hash buffer using SHA512",
            "description": "Hash buffer using SHA512",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmCrypt::HashSha512",
            "notes": [],
            "parameters": [
                {
                    "doc": "The source data to hash",
                    "is_optional": "False",
                    "name": "buf",
                    "types": [
                        "const uint8_t*"
                    ]
                },
                {
                    "doc": "key The length of source data in bytes",
                    "is_optional": "False",
                    "name": "buflen",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The destination buffer (64 bytes)",
                    "is_optional": "False",
                    "name": "digest",
                    "types": [
                        "uint8_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "result enumeration",
            "description": "result enumeration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "= 0",
                    "name": "dmCrypt::RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "= 1",
                    "name": "dmCrypt::RESULT_ERROR",
                    "type": ""
                }
            ],
            "name": "Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        }
    ],
    "info": {
        "brief": "SDK Crypt API documentation",
        "description": "[file:<dmsdk/dlib/crypt.h>]\n\nVarious hash and encode/decode functions.",
        "description_html": "<p>[file:<dmsdk/dlib/crypt.h>]</p>\n<p>Various hash and encode/decode functions.</p>",
        "file": "crypt.h",
        "include": "dmsdk/dlib/crypt.h",
        "language": "C++",
        "name": "Crypt",
        "namespace": "dmCrypt",
        "notes": [],
        "path": "dmsdk/dlib/crypt.h",
        "type": "Defold C++"
    }
}