{
    "elements": [
        {
            "brief": "called when a gui component is finalized",
            "description": "This is a callback-function, which is called by the engine when a gui component is finalized (destroyed). It can\nbe used to e.g. take some last action, report the finalization to other game object instances\nor release user input focus (see <code>release_input_focus</code>). There is no use in starting any animations or similar\nfrom this function since the gui component is about to be destroyed.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">final</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- report finalization</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_friend_instance&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;im_dead&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">my_stats</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">some_value</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "final",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the script state to be used for storing data",
                    "is_optional": "False",
                    "name": "self",
                    "types": [
                        "userdata"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<span class=\"type\">hash</span> gui fonts",
            "description": "The fonts used in the gui. The type of the property is hash.\nKey must be specified in options table.",
            "error": "",
            "examples": "How to set font using a script property (see <a href=\"/ref/resource#resource.font\">resource.font</a>)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;title_latin&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;/open_sans.font&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;title_cyrillic&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">(</span><span class=\"s2\">&quot;/open_sans_cyrillic.font&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fonts&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">title_cyrillic</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "fonts",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "fit adjust mode",
            "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe fit mode ensures that the entire node is visible in the adjusted gui scene.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ADJUST_FIT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "stretch adjust mode",
            "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe stretch mode ensures that the node is displayed as is in the adjusted gui scene, which might scale it non-uniformally.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ADJUST_STRETCH",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "zoom adjust mode",
            "description": "Adjust mode is used when the screen resolution differs from the project settings.\nThe zoom mode ensures that the node fills its entire area and might make the node exceed it.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ADJUST_ZOOM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "bottom y-anchor",
            "description": "bottom y-anchor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ANCHOR_BOTTOM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "left x-anchor",
            "description": "left x-anchor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ANCHOR_LEFT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "no anchor",
            "description": "no anchor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ANCHOR_NONE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "right x-anchor",
            "description": "right x-anchor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ANCHOR_RIGHT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "top y-anchor",
            "description": "top y-anchor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.ANCHOR_TOP",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "animates a node property",
            "description": "This starts an animation of a node property according to the specified parameters.\nIf the node property is already being animated, that animation will be canceled and\nreplaced by the new one. Note however that several different node properties\ncan be animated simultaneously. Use <code>gui.cancel_animation</code> to stop the animation\nbefore it has completed.\nComposite properties of type vector3, vector4 or quaternion\nalso expose their sub-components (x, y, z and w).\nYou can address the components individually by suffixing the name with a dot '.'\nand the name of the component.\nFor instance, <code>\"position.x\"</code> (the position x coordinate) or <code>\"color.w\"</code>\n(the color alpha value).\nIf a <code>complete_function</code> (Lua function) is specified, that function will be called\nwhen the animation has completed.\nBy starting a new animation in that function, several animations can be sequenced\ntogether. See the examples below for more information.",
            "error": "",
            "examples": "How to start a simple color animation, where the node fades in to white during 0.5 seconds:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"c1\">-- node is fully transparent</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"c1\">-- start animation</span>\n</code></pre></div>\n\nHow to start a sequenced animation where the node fades in to white during 0.5 seconds, stays visible for 2 seconds and then fades out:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_animation_done</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fade out node, but wait 2 seconds before the animation starts</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_OUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fetch the node we want to animate</span>\n    <span class=\"kd\">local</span> <span class=\"n\">my_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- node is initially set to fully transparent</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">my_node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"c1\">-- animate the node immediately and call on_animation_done when the animation has completed</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">my_node</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PROP_COLOR</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">EASING_INOUTQUAD</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">on_animation_done</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nHow to animate a node's y position using a crazy custom easing curve:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                     <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n    <span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position.y&quot;</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_PINGPONG</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.animate",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to animate",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "property to animate\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"euler\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"leading\"</code> (text)</li>\n<li><code>\"tracking\"</code> (text)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>\nThe following property constants are defined equaling the corresponding property string names.\n<ul>\n<li><code>gui.PROP_POSITION</code></li>\n<li><code>gui.PROP_ROTATION</code></li>\n<li><code>gui.PROP_EULER</code></li>\n<li><code>gui.PROP_SCALE</code></li>\n<li><code>gui.PROP_COLOR</code></li>\n<li><code>gui.PROP_OUTLINE</code></li>\n<li><code>gui.PROP_SHADOW</code></li>\n<li><code>gui.PROP_SIZE</code></li>\n<li><code>gui.PROP_FILL_ANGLE</code></li>\n<li><code>gui.PROP_INNER_RADIUS</code></li>\n<li><code>gui.PROP_LEADING</code></li>\n<li><code>gui.PROP_TRACKING</code></li>\n<li><code>gui.PROP_SLICE9</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string",
                        "constant"
                    ]
                },
                {
                    "doc": "target property value",
                    "is_optional": "False",
                    "name": "to",
                    "types": [
                        "number",
                        "vector3",
                        "vector4",
                        "quaternion"
                    ]
                },
                {
                    "doc": "easing to use during animation.\n     Either specify one of the <code>gui.EASING_*</code> constants or provide a\n     <span class=\"type\">vector</span> with a custom curve. See the <a href=\"/manuals/animation#_easing\">animation guide</a> for more information.",
                    "is_optional": "False",
                    "name": "easing",
                    "types": [
                        "constant",
                        "vector"
                    ]
                },
                {
                    "doc": "duration of the animation in seconds.",
                    "is_optional": "False",
                    "name": "duration",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "delay before the animation starts in seconds.",
                    "is_optional": "True",
                    "name": "delay",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "function to call when the\n     animation has completed",
                    "is_optional": "True",
                    "name": "complete_function",
                    "types": [
                        "function(self, node)"
                    ]
                },
                {
                    "doc": "playback mode\n<ul>\n<li><code>gui.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>gui.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>gui.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>",
                    "is_optional": "True",
                    "name": "playback",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "additive blending",
            "description": "additive blending",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.BLEND_ADD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "additive alpha blending",
            "description": "additive alpha blending",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.BLEND_ADD_ALPHA",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "alpha blending",
            "description": "alpha blending",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.BLEND_ALPHA",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "multiply blending",
            "description": "multiply blending",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.BLEND_MULT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "screen blending",
            "description": "screen blending",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.BLEND_SCREEN",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "cancels an ongoing animation",
            "description": "If an animation of the specified node is currently running (started by <code>gui.animate</code>), it will immediately be canceled.",
            "error": "",
            "examples": "Start an animation of the position property of a node, then cancel parts of\nthe animation:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">-- animate to new position</span>\n<span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"c1\">-- cancel animation of the x component.</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">cancel_animation</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position.x&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.cancel_animation",
            "notes": [],
            "parameters": [
                {
                    "doc": "node that should have its animation canceled",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "property for which the animation should be canceled\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"euler\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"leading\"</code> (text)</li>\n<li><code>\"tracking\"</code> (text)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string",
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "cancel a node flipbook animation",
            "description": "Cancels any running flipbook animation on the specified node.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;anim_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">cancel_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.cancel_flipbook",
            "notes": [],
            "parameters": [
                {
                    "doc": "node cancel flipbook animation for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "clipping mode none",
            "description": "clipping mode none",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.CLIPPING_MODE_NONE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "clipping mode stencil",
            "description": "clipping mode stencil",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.CLIPPING_MODE_STENCIL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "clone a node",
            "description": "Make a clone instance of a node. The cloned node will be identical to the\noriginal node, except the id which is generated as the string \"node\" plus\na sequential unsigned integer value.\nThis function does not clone the supplied node's children nodes.\nUse gui.clone_tree for that purpose.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.clone",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to clone",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the cloned node",
                    "name": "clone",
                    "types": [
                        "node"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "clone a node including its children",
            "description": "Make a clone instance of a node and all its children.\nUse gui.clone to clone a node excluding its children.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.clone_tree",
            "notes": [],
            "parameters": [
                {
                    "doc": "root node to clone",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "a table mapping node ids to the corresponding cloned nodes",
                    "name": "clones",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "deletes a node",
            "description": "Deletes the specified node. Any child nodes of the specified node will be\nrecursively deleted.",
            "error": "",
            "examples": "Delete a particular node and any child nodes it might have:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">delete_node</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.delete_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to delete",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "delete texture",
            "description": "Delete a dynamically created texture.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"c1\">-- Create a texture.</span>\n     <span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp_tx&quot;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\0</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n         <span class=\"c1\">-- Do something with the texture.</span>\n         <span class=\"p\">...</span>\n\n         <span class=\"c1\">-- Delete the texture</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">delete_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;temp_tx&quot;</span><span class=\"p\">)</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.delete_texture",
            "notes": [],
            "parameters": [
                {
                    "doc": "texture id",
                    "is_optional": "False",
                    "name": "texture",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "in-back",
            "description": "in-back",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INBACK",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-bounce",
            "description": "in-bounce",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INBOUNCE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-circlic",
            "description": "in-circlic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INCIRC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-cubic",
            "description": "in-cubic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INCUBIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-elastic",
            "description": "in-elastic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INELASTIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-exponential",
            "description": "in-exponential",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INEXPO",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-back",
            "description": "in-out-back",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTBACK",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-bounce",
            "description": "in-out-bounce",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTBOUNCE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-circlic",
            "description": "in-out-circlic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTCIRC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-cubic",
            "description": "in-out-cubic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTCUBIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-elastic",
            "description": "in-out-elastic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTELASTIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-exponential",
            "description": "in-out-exponential",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTEXPO",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-quadratic",
            "description": "in-out-quadratic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTQUAD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-quartic",
            "description": "in-out-quartic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTQUART",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-quintic",
            "description": "in-out-quintic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTQUINT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-out-sine",
            "description": "in-out-sine",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INOUTSINE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-quadratic",
            "description": "in-quadratic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INQUAD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-quartic",
            "description": "in-quartic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INQUART",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-quintic",
            "description": "in-quintic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INQUINT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "in-sine",
            "description": "in-sine",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_INSINE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "linear interpolation",
            "description": "linear interpolation",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_LINEAR",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-back",
            "description": "out-back",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTBACK",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-bounce",
            "description": "out-bounce",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTBOUNCE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-circlic",
            "description": "out-circlic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTCIRC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-cubic",
            "description": "out-cubic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTCUBIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-elastic",
            "description": "out-elastic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTELASTIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-exponential",
            "description": "out-exponential",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTEXPO",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-back",
            "description": "out-in-back",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINBACK",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-bounce",
            "description": "out-in-bounce",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINBOUNCE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-circlic",
            "description": "out-in-circlic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINCIRC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-cubic",
            "description": "out-in-cubic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINCUBIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-elastic",
            "description": "out-in-elastic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINELASTIC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-exponential",
            "description": "out-in-exponential",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINEXPO",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-quadratic",
            "description": "out-in-quadratic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINQUAD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-quartic",
            "description": "out-in-quartic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINQUART",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-quintic",
            "description": "out-in-quintic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINQUINT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-in-sine",
            "description": "out-in-sine",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTINSINE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-quadratic",
            "description": "out-quadratic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTQUAD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-quartic",
            "description": "out-quartic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTQUART",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-quintic",
            "description": "out-quintic",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTQUINT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out-sine",
            "description": "out-sine",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.EASING_OUTSINE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "gets the named property of a specified gui node",
            "description": "Instead of using specific getters such as gui.get_position or gui.get_scale,\nyou can use gui.get instead and supply the property as a string or a hash.\nWhile this function is similar to go.get, there are a few more restrictions\nwhen operating in the gui namespace. Most notably, only these explicitly named properties are supported:\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"euler\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"leading\"</code> (text)</li>\n<li><code>\"tracking\"</code> (text)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>\nThe value returned will either be a vmath.vector4 or a single number, i.e getting the \"position\"\nproperty will return a vec4 while getting the \"position.x\" property will return a single value.\nYou can also use this function to get material constants.",
            "error": "",
            "examples": "Get properties on existing nodes:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node_position</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.get",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the property for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "the property to retrieve",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string",
                        "hash",
                        "constant"
                    ]
                },
                {
                    "doc": "optional options table (only applicable for material constants)\n- <code>index</code> <span class=\"type\">number</span> index into array property (1 based)",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node adjust mode",
            "description": "Returns the adjust mode of a node.\nThe adjust mode defines how the node will adjust itself to screen\nresolutions that differs from the one in the project settings.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_adjust_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the adjust mode (node)",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the current adjust mode\n<ul>\n<li><code>gui.ADJUST_FIT</code></li>\n<li><code>gui.ADJUST_ZOOM</code></li>\n<li><code>gui.ADJUST_STRETCH</code></li>\n</ul>",
                    "name": "adjust_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node alpha",
            "description": "gets the node alpha",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_alpha",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get alpha",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "alpha",
                    "name": "alpha",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node blend mode",
            "description": "Returns the blend mode of a node.\nBlend mode defines how the node will be blended with the background.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_blend_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the blend mode",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "blend mode\n<ul>\n<li><code>gui.BLEND_ALPHA</code></li>\n<li><code>gui.BLEND_ADD</code></li>\n<li><code>gui.BLEND_ADD_ALPHA</code></li>\n<li><code>gui.BLEND_MULT</code></li>\n<li><code>gui.BLEND_SCREEN</code></li>\n</ul>",
                    "name": "blend_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets node clipping inverted state",
            "description": "If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_clipping_inverted",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the clipping inverted state",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "name": "inverted",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node clipping mode",
            "description": "Clipping mode defines how the node will clip it's children nodes",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_clipping_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the clipping mode",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "clipping mode\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>",
                    "name": "clipping_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets node clipping visibility state",
            "description": "If node is set as visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_clipping_visible",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the clipping visibility state",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "name": "visible",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node color",
            "description": "Returns the color of the supplied node. The components\nof the returned vector4 contains the color channel values:\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Color value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>Red value</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Green value</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Blue value</td>\n</tr>\n<tr>\n<td>w</td>\n<td>Alpha value</td>\n</tr>\n</tbody>\n</table>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_color",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the color from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node color",
                    "name": "color",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node rotation",
            "description": "Returns the rotation of the supplied node.\nThe rotation is expressed in degree Euler angles.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_euler",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the rotation from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node rotation",
                    "name": "rotation",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the angle for the filled pie sector",
            "description": "Returns the sector angle of a pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_fill_angle",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the fill angle",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "sector angle",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node flipbook animation",
            "description": "Get node flipbook animation.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_flipbook",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get flipbook animation from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "animation id",
                    "name": "animation",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the normalized cursor of the animation on a node with flipbook animation",
            "description": "This is only useful nodes with flipbook animations. Gets the normalized cursor of the flipbook animation on a node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_flipbook_cursor",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the cursor for (node)",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "cursor value",
                    "name": "cursor",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the playback rate of the flipbook animation on a node",
            "description": "This is only useful nodes with flipbook animations. Gets the playback rate of the flipbook animation on a node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_flipbook_playback_rate",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the cursor for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "playback rate",
                    "name": "rate",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node font",
            "description": "This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_font",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the font",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "font id",
                    "name": "font",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node font resource",
            "description": "This is only useful for text nodes. The font must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "Get the text metrics for a text\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">font_name</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_font</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_font_resource</span><span class=\"p\">(</span><span class=\"n\">font_name</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get_text_metrics</span><span class=\"p\">(</span><span class=\"n\">font</span><span class=\"p\">,</span> <span class=\"s2\">&quot;The quick brown fox</span><span class=\"se\">\\n</span><span class=\"s2\"> jumps over the lazy dog&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.get_font_resource",
            "notes": [],
            "parameters": [
                {
                    "doc": "font of which to get the path hash",
                    "is_optional": "False",
                    "name": "font_name",
                    "types": [
                        "hash",
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "path hash to resource",
                    "name": "hash",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the scene height",
            "description": "Returns the scene height.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_height",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "scene height",
                    "name": "height",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the id of the specified node",
            "description": "Retrieves the id of the specified node.",
            "error": "",
            "examples": "Gets the id of a node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_id</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; hash: [my_node]</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.get_id",
            "notes": [],
            "parameters": [
                {
                    "doc": "the node to retrieve the id from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the id of the node",
                    "name": "id",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the index of the specified node",
            "description": "Retrieve the index of the specified node among its siblings.\nThe index defines the order in which a node appear in a GUI scene.\nHigher index means the node is drawn on top of lower indexed nodes.",
            "error": "",
            "examples": "Compare the index order of two sibling nodes:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node1</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node_1&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node2</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node_2&quot;</span><span class=\"p\">)</span>\n\n<span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_index</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_index</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- node1 is drawn below node2</span>\n<span class=\"kr\">else</span>\n    <span class=\"c1\">-- node2 is drawn below node1</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.get_index",
            "notes": [],
            "parameters": [
                {
                    "doc": "the node to retrieve the id from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the index of the node",
                    "name": "index",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node inherit alpha state",
            "description": "gets the node inherit alpha state",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_inherit_alpha",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the inherit alpha state",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "name": "inherit_alpha",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the pie inner radius",
            "description": "Returns the inner radius of a pie node.\nThe radius is defined along the x-axis.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_inner_radius",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from where to get the inner radius",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "inner radius",
                    "name": "radius",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node layer",
            "description": "The layer must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_layer",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the layer",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "layer id",
                    "name": "layer",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the scene current layout",
            "description": "gets the scene current layout",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_layout",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "layout id",
                    "name": "layout",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the leading of the text node",
            "description": "Returns the leading value for a text node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_leading",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from where to get the leading",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "leading scaling value (default=1)",
                    "name": "leading",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get line-break mode",
            "description": "Returns whether a text node is in line-break mode or not.\nThis is only useful for text nodes.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_line_break",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the line-break for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "name": "line_break",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the assigned node material",
            "description": "Returns the material of a node.\nThe material must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "Getting the material for a node, and assign it to another node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node1</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node2</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;other_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node1_material</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_material</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_material</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">,</span> <span class=\"n\">node1_material</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.get_material",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the material for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "material id",
                    "name": "materal",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node with the specified id",
            "description": "Retrieves the node with the specified id.",
            "error": "",
            "examples": "Gets a node by id and change its color:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">red</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">red</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.get_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "id of the node to retrieve",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "a new node instance",
                    "name": "instance",
                    "types": [
                        "node"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the pie outer bounds mode",
            "description": "Returns the outer bounds mode for a pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_outer_bounds",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from where to get the outer bounds mode",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the outer bounds mode of the pie node:\n<ul>\n<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>\n<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>\n</ul>",
                    "name": "bounds_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node outline color",
            "description": "Returns the outline color of the supplied node.\nSee <a href=\"/ref/gui#gui.get_color\">gui.get_color</a> for info how vectors encode color values.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_outline",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the outline color from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "outline color",
                    "name": "color",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the parent of the specified node",
            "description": "Returns the parent node of the specified node.\nIf the supplied node does not have a parent, <code>nil</code> is returned.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_parent",
            "notes": [],
            "parameters": [
                {
                    "doc": "the node from which to retrieve its parent",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "parent instance or <code>nil</code>",
                    "name": "parent",
                    "types": [
                        "node",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets a particle fx",
            "description": "Get the paricle fx for a gui node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_particlefx",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get particle fx for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "particle fx id",
                    "name": "particlefx",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the number of generated vertices around the perimeter",
            "description": "Returns the number of generated vertices around the perimeter\nof a pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_perimeter_vertices",
            "notes": [],
            "parameters": [
                {
                    "doc": "pie node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "vertex count",
                    "name": "vertices",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the pivot of a node",
            "description": "The pivot specifies how the node is drawn and rotated from its position.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_pivot",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get pivot from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n  <li><code>gui.PIVOT_NW</code></li>\n</ul>",
                    "name": "pivot",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node position",
            "description": "Returns the position of the supplied node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_position",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the position from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node position",
                    "name": "position",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node rotation",
            "description": "Returns the rotation of the supplied node.\nThe rotation is expressed as a quaternion",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_rotation",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the rotation from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node rotation",
                    "name": "rotation",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node scale",
            "description": "Returns the scale of the supplied node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_scale",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the scale from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node scale",
                    "name": "scale",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node screen position",
            "description": "Returns the screen position of the supplied node. This function returns the\ncalculated transformed position of the node, taking into account any parent node\ntransforms.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_screen_position",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the screen position from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node screen position",
                    "name": "position",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node shadow color",
            "description": "Returns the shadow color of the supplied node.\nSee <a href=\"/ref/gui#gui.get_color\">gui.get_color</a> for info how vectors encode color values.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_shadow",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the shadow color from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node shadow color",
                    "name": "color",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node size",
            "description": "Returns the size of the supplied node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_size",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get the size from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "node size",
                    "name": "size",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node size mode",
            "description": "Returns the size of a node.\nThe size mode defines how the node will adjust itself in size. Automatic\nsize mode alters the node size based on the node's content. Automatic size\nmode works for Box nodes and Pie nodes which will both adjust their size\nto match the assigned image. Particle fx and Text nodes will ignore\nany size mode setting.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_size_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the size mode (node)",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the current size mode\n<ul>\n<li><code>gui.SIZE_MODE_MANUAL</code></li>\n<li><code>gui.SIZE_MODE_AUTO</code></li>\n</ul>",
                    "name": "size_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the slice9 values for the node",
            "description": "Returns the slice9 configuration values for the node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_slice9",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to manipulate",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "configuration values",
                    "name": "values",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node text",
            "description": "Returns the text value of a text node. This is only useful for text nodes.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_text",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the text",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "text value",
                    "name": "text",
                    "types": [
                        "string"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets node texture",
            "description": "Returns the texture of a node.\nThis is currently only useful for box or pie nodes.\nThe texture must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_texture",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get texture from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "texture id",
                    "name": "texture",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the tracking of the text node",
            "description": "Returns the tracking value of a text node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_tracking",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from where to get the tracking",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "tracking scaling number (default=0)",
                    "name": "tracking",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get a node including its children",
            "description": "Get a node and all its children as a Lua table.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_tree",
            "notes": [],
            "parameters": [
                {
                    "doc": "root node to get node tree from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "a table mapping node ids to the corresponding nodes",
                    "name": "clones",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the node type",
            "description": "gets the node type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_type",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to get the type",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "type\n<ul>\n<li><code>gui.TYPE_BOX</code></li>\n<li><code>gui.TYPE_TEXT</code></li>\n<li><code>gui.TYPE_PIE</code></li>\n<li><code>gui.TYPE_PARTICLEFX</code></li>\n<li><code>gui.TYPE_CUSTOM</code></li>\n</ul>",
                    "name": "type",
                    "types": [
                        "constant"
                    ]
                },
                {
                    "doc": "id of the custom type",
                    "name": "subtype",
                    "types": [
                        "number",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns if a node is visible or not",
            "description": "Returns <code>true</code> if a node is visible and <code>false</code> if it's not.\nInvisible nodes are not rendered.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_visible",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to query",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "whether the node is visible or not",
                    "name": "visible",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the scene width",
            "description": "Returns the scene width.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_width",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "scene width",
                    "name": "width",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the x-anchor of a node",
            "description": "The x-anchor specifies how the node is moved when the game is run in a different resolution.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_xanchor",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get x-anchor from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_LEFT</code></li>\n<li><code>gui.ANCHOR_RIGHT</code></li>\n</ul>",
                    "name": "anchor",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets the y-anchor of a node",
            "description": "The y-anchor specifies how the node is moved when the game is run in a different resolution.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.get_yanchor",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to get y-anchor from",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_TOP</code></li>\n<li><code>gui.ANCHOR_BOTTOM</code></li>\n</ul>",
                    "name": "anchor",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "hides on-display keyboard if available",
            "description": "Hides the on-display touch keyboard on the device.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.hide_keyboard",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns if a node is enabled or not",
            "description": "Returns <code>true</code> if a node is enabled and <code>false</code> if it's not.\nDisabled nodes are not rendered and animations acting on them are not evaluated.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.is_enabled",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to query",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "check hierarchy recursively",
                    "is_optional": "True",
                    "name": "recursive",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "whether the node is enabled or not",
                    "name": "enabled",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "default keyboard",
            "description": "default keyboard",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.KEYBOARD_TYPE_DEFAULT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "email keyboard",
            "description": "email keyboard",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.KEYBOARD_TYPE_EMAIL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "number input keyboard",
            "description": "number input keyboard",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.KEYBOARD_TYPE_NUMBER_PAD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "password keyboard",
            "description": "password keyboard",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.KEYBOARD_TYPE_PASSWORD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "moves the first node above the second",
            "description": "Alters the ordering of the two supplied nodes by moving the first node\nabove the second.\nIf the second argument is <code>nil</code> the first node is moved to the top.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.move_above",
            "notes": [],
            "parameters": [
                {
                    "doc": "to move",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "reference node above which the first node should be moved",
                    "is_optional": "False",
                    "name": "reference",
                    "types": [
                        "node",
                        "nil"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "moves the first node below the second",
            "description": "Alters the ordering of the two supplied nodes by moving the first node\nbelow the second.\nIf the second argument is <code>nil</code> the first node is moved to the bottom.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.move_below",
            "notes": [],
            "parameters": [
                {
                    "doc": "to move",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "reference node below which the first node should be moved",
                    "is_optional": "False",
                    "name": "reference",
                    "types": [
                        "node",
                        "nil"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new box node",
            "description": "Dynamically create a new box node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.new_box_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "node position",
                    "is_optional": "False",
                    "name": "pos",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "node size",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new box node",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new particle fx node",
            "description": "Dynamically create a particle fx node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.new_particlefx_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "node position",
                    "is_optional": "False",
                    "name": "pos",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "particle fx resource name",
                    "is_optional": "False",
                    "name": "particlefx",
                    "types": [
                        "hash",
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new particle fx node",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new pie node",
            "description": "Dynamically create a new pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.new_pie_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "node position",
                    "is_optional": "False",
                    "name": "pos",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "node size",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new pie node",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new text node",
            "description": "Dynamically create a new text node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.new_text_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "node position",
                    "is_optional": "False",
                    "name": "pos",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "node text",
                    "is_optional": "False",
                    "name": "text",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new text node",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create new texture",
            "description": "Dynamically create a new texture.",
            "error": "",
            "examples": "How to create a texture and apply it to a new box node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n     <span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n     <span class=\"c1\">-- A nice orange. String with the RGB values.</span>\n     <span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n\n     <span class=\"c1\">-- Create the texture. Repeat the color string for each pixel.</span>\n     <span class=\"kd\">local</span> <span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">reason</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n     <span class=\"kr\">if</span> <span class=\"n\">ok</span> <span class=\"kr\">then</span>\n         <span class=\"c1\">-- Create a box node and apply the texture to it.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">)</span>\n     <span class=\"kr\">else</span>\n         <span class=\"c1\">-- Could not create texture for some reason...</span>\n         <span class=\"kr\">if</span> <span class=\"n\">reason</span> <span class=\"o\">==</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">RESULT_TEXTURE_ALREADY_EXISTS</span> <span class=\"kr\">then</span>\n             <span class=\"p\">...</span>\n         <span class=\"kr\">else</span>\n             <span class=\"p\">...</span>\n         <span class=\"kr\">end</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.new_texture",
            "notes": [],
            "parameters": [
                {
                    "doc": "texture id",
                    "is_optional": "False",
                    "name": "texture_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "texture width",
                    "is_optional": "False",
                    "name": "width",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "texture height",
                    "is_optional": "False",
                    "name": "height",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "texture type\n<ul>\n<li><code>\"rgb\"</code> - RGB</li></li>\n<li><code>\"rgba\"</code> - RGBA</li></li>\n<li><code>\"l\"</code> - LUMINANCE</li></li>\n</ul>",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "string",
                        "constant"
                    ]
                },
                {
                    "doc": "texture data",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "flip texture vertically",
                    "is_optional": "False",
                    "name": "flip",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "texture creation was successful",
                    "name": "success",
                    "types": [
                        "boolean"
                    ]
                },
                {
                    "doc": "one of the gui.RESULT_* codes if unsuccessful",
                    "name": "code",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "determines if the node is pickable by the supplied coordinates",
            "description": "Tests whether a coordinate is within the bounding box of a\nnode.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.pick_node",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to be tested for picking",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "x-coordinate (see <a href=\"#on_input\">on_input</a> )",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "y-coordinate (see <a href=\"#on_input\">on_input</a> )",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pick result",
                    "name": "pickable",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "elliptical pie node bounds",
            "description": "elliptical pie node bounds",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIEBOUNDS_ELLIPSE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "rectangular pie node bounds",
            "description": "rectangular pie node bounds",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIEBOUNDS_RECTANGLE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "center pivot",
            "description": "center pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_CENTER",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "east pivot",
            "description": "east pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_E",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "north pivot",
            "description": "north pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_N",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "north-east pivot",
            "description": "north-east pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_NE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "north-west pivot",
            "description": "north-west pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_NW",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "south pivot",
            "description": "south pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_S",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "south-east pivot",
            "description": "south-east pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_SE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "south-west pivot",
            "description": "south-west pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_SW",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "west pivot",
            "description": "west pivot",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PIVOT_W",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "play node flipbook animation",
            "description": "Play flipbook animation on a box or pie node.\nThe current node texture must contain the animation.\nUse this function to set one-frame still images on the node.",
            "error": "",
            "examples": "Set the texture of a node to a flipbook animation from an atlas:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">anim_callback</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Take action after animation has played.</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- Create a new node and set the texture to a flipbook animation</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;button_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gui_sprites&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;animated_button&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nSet the texture of a node to an image from an atlas:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Create a new node and set the texture to a &quot;button.png&quot; from atlas</span>\n<span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;button_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;gui_sprites&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;button&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.play_flipbook",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set animation for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "animation id",
                    "is_optional": "False",
                    "name": "animation",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "optional function to call when the animation has completed\n<dl>\n<dt><code>self</code></dt>\n<dd>\n<span class=\"type\">object</span> The current object.\n</dd>\n<dt><code>node</code></dt>\n<dd>\n<span class=\"type\">node</span> The node that is animated.\n</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "complete_function",
                    "types": [
                        "function(self, node)"
                    ]
                },
                {
                    "doc": "optional table with properties\n<dl>\n<dt><code>offset</code></dt>\n<dd><span class=\"type\">number</span> The normalized initial value of the animation cursor when the animation starts playing</dd>\n<dt><code>playback_rate</code></dt>\n<dd><span class=\"type\">number</span> The rate with which the animation will be played. Must be positive</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "play_properties",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Plays a particle fx",
            "description": "Plays the paricle fx for a gui node",
            "error": "",
            "examples": "How to play a particle fx when a gui node is created.\nThe callback receives the gui node, the hash of the id\nof the emitter, and the new state of the emitter as particlefx.EMITTER_STATE_<STATE>.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">emitter_state_change</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">emitter</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">emitter</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;exhaust&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">particlefx</span><span class=\"p\">.</span><span class=\"n\">EMITTER_STATE_POSTSPAWN</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- exhaust is done spawning particles...</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_particlefx</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;particlefx&quot;</span><span class=\"p\">),</span> <span class=\"n\">emitter_state_change</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.play_particlefx",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to play particle fx for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "optional callback function that will be called when an emitter attached to this particlefx changes state.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object</dd>\n<dt><code>node</code></dt>\n<dd><span class=\"type\">hash</span> The particle fx node, or <code>nil</code> if the node was deleted</dd>\n<dt><code>emitter</code></dt>\n<dd><span class=\"type\">hash</span> The id of the emitter</dd>\n<dt><code>state</code></dt>\n<dd><span class=\"type\">constant</span> the new state of the emitter:</dd>\n</dl>\n<ul>\n<li><code>particlefx.EMITTER_STATE_SLEEPING</code></li>\n<li><code>particlefx.EMITTER_STATE_PRESPAWN</code></li>\n<li><code>particlefx.EMITTER_STATE_SPAWNING</code></li>\n<li><code>particlefx.EMITTER_STATE_POSTSPAWN</code></li>\n</ul>",
                    "is_optional": "True",
                    "name": "emitter_state_function",
                    "types": [
                        "function(self, node, emitter, state)"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "loop backward",
            "description": "loop backward",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PLAYBACK_LOOP_BACKWARD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "loop forward",
            "description": "loop forward",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PLAYBACK_LOOP_FORWARD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "ping pong loop",
            "description": "ping pong loop",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PLAYBACK_LOOP_PINGPONG",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "once backward",
            "description": "once backward",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PLAYBACK_ONCE_BACKWARD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "once forward",
            "description": "once forward",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PLAYBACK_ONCE_FORWARD",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "once forward and then backward",
            "description": "once forward and then backward",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PLAYBACK_ONCE_PINGPONG",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "color property",
            "description": "color property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_COLOR",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "euler property",
            "description": "euler property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_EULER",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "fill_angle property",
            "description": "fill_angle property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_FILL_ANGLE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "inner_radius property",
            "description": "inner_radius property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_INNER_RADIUS",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "leading property",
            "description": "leading property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_LEADING",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "outline color property",
            "description": "outline color property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_OUTLINE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "position property",
            "description": "position property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_POSITION",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "rotation property",
            "description": "rotation property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_ROTATION",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "scale property",
            "description": "scale property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_SCALE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "shadow color property",
            "description": "shadow color property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_SHADOW",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "size property",
            "description": "size property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_SIZE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "slice9 property",
            "description": "slice9 property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_SLICE9",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "tracking property",
            "description": "tracking property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.PROP_TRACKING",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "resets on-display keyboard if available",
            "description": "Resets the input context of keyboard. This will clear marked text.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.reset_keyboard",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "resets the node material",
            "description": "Resets the node material to the material assigned in the gui scene.",
            "error": "",
            "examples": "Resetting the material for a node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">reset_material</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.reset_material",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to reset the material for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "resets all nodes to initial state",
            "description": "Resets all nodes in the current GUI scene to their initial state.\nThe reset only applies to static node loaded from the scene.\nNodes that are created dynamically from script are not affected.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.reset_nodes",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "data error",
            "description": "The provided data is not in the expected format or is in some other way\nincorrect, for instance the image data provided to gui.new_texture().",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.RESULT_DATA_ERROR",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "out of resource",
            "description": "The system is out of resources, for instance when trying to create a new\ntexture using gui.new_texture().",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.RESULT_OUT_OF_RESOURCES",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "texture already exists",
            "description": "The texture id already exists when trying to use gui.new_texture().",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.RESULT_TEXTURE_ALREADY_EXISTS",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "convert screen position to the local node position",
            "description": "Convert the screen position to the local position of supplied node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.screen_to_local",
            "notes": [],
            "parameters": [
                {
                    "doc": "node used for getting local transformation matrix",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "screen position",
                    "is_optional": "False",
                    "name": "screen_position",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "local position",
                    "name": "local_position",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the named property of a specified gui node",
            "description": "Instead of using specific setteres such as gui.set_position or gui.set_scale,\nyou can use gui.set instead and supply the property as a string or a hash.\nWhile this function is similar to go.get and go.set, there are a few more restrictions\nwhen operating in the gui namespace. Most notably, only these named properties identifiers are supported:\n<ul>\n<li><code>\"position\"</code></li>\n<li><code>\"rotation\"</code></li>\n<li><code>\"euler\"</code></li>\n<li><code>\"scale\"</code></li>\n<li><code>\"color\"</code></li>\n<li><code>\"outline\"</code></li>\n<li><code>\"shadow\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"fill_angle\"</code> (pie)</li>\n<li><code>\"inner_radius\"</code> (pie)</li>\n<li><code>\"leading\"</code> (text)</li>\n<li><code>\"tracking\"</code> (text)</li>\n<li><code>\"slice9\"</code> (slice9)</li>\n</ul>\nThe value to set must either be a vmath.vector4, vmath.vector3, vmath.quat or a single number and depends on the property name you want to set.\nI.e when setting the \"position\" property, you need to use a vmath.vector4 and when setting a single component of the property,\nsuch as \"position.x\", you need to use a single value.\nNote: When setting the rotation using the \"rotation\" property, you need to pass in a vmath.quat. This behaviour is different than from the gui.set_rotation function,\nthe intention is to move new functionality closer to go namespace so that migrating between gui and go is easier. To set the rotation using degrees instead,\nuse the \"euler\" property instead. The rotation and euler properties are linked, changing one of them will change the backing data of the other.\nSimilar to go.set, you can also use gui.set for setting material constant values on a node. E.g if a material has specified a constant called <code>tint</code> in\nthe .material file, you can use gui.set to set the value of that constant by calling <code>gui.set(node, \"tint\", vmath.vec4(1,0,0,1))</code>, or <code>gui.set(node, \"matrix\", vmath.matrix4())</code>\nif the constant is a matrix. Arrays are also supported by gui.set - to set an array constant, you need to pass in an options table with the 'index' key set.\nIf the material has a constant array called 'tint_array' specified in the material, you can use <code>gui.set(node, \"tint_array\", vmath.vec4(1,0,0,1), { index = 4})</code> to set the fourth array element to a different value.",
            "error": "",
            "examples": "Updates the position property on an existing node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node_position</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;position.x&quot;</span><span class=\"p\">,</span> <span class=\"n\">node_position</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n</code></pre></div>\n\nUpdates the rotation property on an existing node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rotation&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"nb\">math.rad</span><span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"p\">)))</span>\n<span class=\"c1\">-- this is equivalent to:</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;euler.z&quot;</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">)</span>\n<span class=\"c1\">-- or using the entire vector:</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;euler&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">))</span>\n<span class=\"c1\">-- or using the set_rotation</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_rotation</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">))</span>\n</code></pre></div>\n\nSets various material constants for a node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tint&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"c1\">-- matrix4 is also supported</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;light_matrix&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4</span><span class=\"p\">())</span>\n<span class=\"c1\">-- update a constant in an array at position 4. the array is specified in the shader as:</span>\n<span class=\"c1\">-- uniform vec4 tint_array[4]; // lua is 1 based, shader is 0 based</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tint_array&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">{</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"p\">})</span>\n<span class=\"c1\">-- update a matrix constant in an array at position 4. the array is specified in the shader as:</span>\n<span class=\"c1\">-- uniform mat4 light_matrix_array[4];</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;light_matrix_array&quot;</span><span class=\"p\">,</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4</span><span class=\"p\">(),</span> <span class=\"p\">{</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"p\">})</span>\n<span class=\"c1\">-- update a sub-element in a constant</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tint.x&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\">-- update a sub-element in an array constant at position 4</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tint_array.x&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n</code></pre></div>\n\nSet a named property\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n   <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;set_font&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n       <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;fonts&quot;</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">font</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_font_name&quot;</span><span class=\"p\">})</span>\n       <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_font</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;text&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;my_font_name&quot;</span><span class=\"p\">)</span>\n   <span class=\"kr\">elseif</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;set_texture&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n       <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;textures&quot;</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">texture</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_texture&quot;</span><span class=\"p\">})</span>\n       <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;my_texture&quot;</span><span class=\"p\">)</span>\n       <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;logo_256&quot;</span><span class=\"p\">)</span>\n   <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.set",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the property for, or msg.url() to the gui itself",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node",
                        "url"
                    ]
                },
                {
                    "doc": "the property to set",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "string",
                        "hash",
                        "constant"
                    ]
                },
                {
                    "doc": "the property to set",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "number",
                        "vector4",
                        "vector3",
                        "quaternion"
                    ]
                },
                {
                    "doc": "optional options table (only applicable for material constants)\n- <code>index</code> <span class=\"type\">number</span> index into array property (1 based)\n- <code>key</code> <span class=\"type\">hash</span> name of internal property",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets node adjust mode",
            "description": "Sets the adjust mode on a node.\nThe adjust mode defines how the node will adjust itself to screen\nresolutions that differs from the one in the project settings.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_adjust_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set adjust mode for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "adjust mode to set\n<ul>\n<li><code>gui.ADJUST_FIT</code></li>\n<li><code>gui.ADJUST_ZOOM</code></li>\n<li><code>gui.ADJUST_STRETCH</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "adjust_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node alpha",
            "description": "sets the node alpha",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_alpha",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set alpha",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "0..1 alpha color",
                    "is_optional": "False",
                    "name": "alpha",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets node blend mode",
            "description": "Set the blend mode of a node.\nBlend mode defines how the node will be blended with the background.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_blend_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set blend mode for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "blend mode to set\n<ul>\n<li><code>gui.BLEND_ALPHA</code></li>\n<li><code>gui.BLEND_ADD</code></li>\n<li><code>gui.BLEND_ADD_ALPHA</code></li>\n<li><code>gui.BLEND_MULT</code></li>\n<li><code>gui.BLEND_SCREEN</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "blend_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets node clipping inversion",
            "description": "If node is set as an inverted clipping node, it will clip anything inside as opposed to outside.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_clipping_inverted",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set clipping inverted state for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "is_optional": "False",
                    "name": "inverted",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets node clipping mode state",
            "description": "Clipping mode defines how the node will clip it's children nodes",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_clipping_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set clipping mode for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "clipping mode to set\n<ul>\n  <li><code>gui.CLIPPING_MODE_NONE</code></li>\n  <li><code>gui.CLIPPING_MODE_STENCIL</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "clipping_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets node clipping visibility",
            "description": "If node is set as an visible clipping node, it will be shown as well as clipping. Otherwise, it will only clip but not show visually.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_clipping_visible",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set clipping visibility for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "is_optional": "False",
                    "name": "visible",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node color",
            "description": "Sets the color of the supplied node. The components\nof the supplied vector3 or vector4 should contain the color channel values:\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Color value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>Red value</td>\n</tr>\n<tr>\n<td>y</td>\n<td>Green value</td>\n</tr>\n<tr>\n<td>z</td>\n<td>Blue value</td>\n</tr>\n<tr>\n<td>w <span class=\"type\">vector4</span></td>\n<td>Alpha value</td>\n</tr>\n</tbody>\n</table>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_color",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the color for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new color",
                    "is_optional": "False",
                    "name": "color",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "enables/disables a node",
            "description": "Sets a node to the disabled or enabled state.\nDisabled nodes are not rendered and animations acting on them are not evaluated.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_enabled",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to be enabled/disabled",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "whether the node should be enabled or not",
                    "is_optional": "False",
                    "name": "enabled",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node rotation",
            "description": "Sets the rotation of the supplied node.\nThe rotation is expressed in degree Euler angles.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_euler",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the rotation for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new rotation",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the angle for the filled pie sector",
            "description": "Set the sector angle of a pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_fill_angle",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the fill angle for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "sector angle",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the normalized cursor of the animation on a node with flipbook animation",
            "description": "This is only useful nodes with flipbook animations. The cursor is normalized.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_flipbook_cursor",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the cursor for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "cursor value",
                    "is_optional": "False",
                    "name": "cursor",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the playback rate of the flipbook animation on a node",
            "description": "This is only useful nodes with flipbook animations. Sets the playback rate of the flipbook animation on a node. Must be positive.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_flipbook_playback_rate",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the cursor for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "playback rate",
                    "is_optional": "False",
                    "name": "playback_rate",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node font",
            "description": "This is only useful for text nodes.\nThe font must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_font",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set the font",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "font id",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the id of the specified node",
            "description": "Set the id of the specicied node to a new value.\nNodes created with the gui.new_*_node() functions get\nan empty id. This function allows you to give dynamically\ncreated nodes an id.\n<span class=\"icon-attention\"></span> No checking is done on the uniqueness of supplied ids.\nIt is up to you to make sure you use unique ids.",
            "error": "",
            "examples": "Create a new node and set its id:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_id</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_new_node&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.set_id",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the id for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "id to set",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node inherit alpha state",
            "description": "sets the node inherit alpha state",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_inherit_alpha",
            "notes": [],
            "parameters": [
                {
                    "doc": "node from which to set the inherit alpha state",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "is_optional": "False",
                    "name": "inherit_alpha",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the pie inner radius",
            "description": "Sets the inner radius of a pie node.\nThe radius is defined along the x-axis.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_inner_radius",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the inner radius for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "inner radius",
                    "is_optional": "False",
                    "name": "radius",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node layer",
            "description": "The layer must be mapped to the gui scene in the gui editor.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_layer",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set the layer",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "layer id",
                    "is_optional": "False",
                    "name": "layer",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the leading of the text node",
            "description": "Sets the leading value for a text node. This value is used to\nscale the line spacing of text.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_leading",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set the leading",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "a scaling value for the line spacing (default=1)",
                    "is_optional": "False",
                    "name": "leading",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set line-break mode",
            "description": "Sets the line-break mode on a text node.\nThis is only useful for text nodes.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_line_break",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set line-break for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "<code>true</code> or <code>false</code>",
                    "is_optional": "False",
                    "name": "line_break",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node material",
            "description": "Set the material on a node. The material must be mapped to the gui scene in the gui editor,\nand assigning a material is supported for all node types. To set the default material that\nis assigned to the gui scene node, use <code>gui.reset_material(node_id)</code> instead.",
            "error": "",
            "examples": "Assign an existing material to a node:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_material</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_material&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.set_material",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set material for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "material id",
                    "is_optional": "False",
                    "name": "material",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the pie node outer bounds mode",
            "description": "Sets the outer bounds mode for a pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_outer_bounds",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set the outer bounds mode",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "the outer bounds mode of the pie node:\n<ul>\n<li><code>gui.PIEBOUNDS_RECTANGLE</code></li>\n<li><code>gui.PIEBOUNDS_ELLIPSE</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "bounds_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node outline color",
            "description": "Sets the outline color of the supplied node.\nSee <a href=\"/ref/gui#gui.set_color\">gui.set_color</a> for info how vectors encode color values.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_outline",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the outline color for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new outline color",
                    "is_optional": "False",
                    "name": "color",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the parent of the node",
            "description": "Sets the parent node of the specified node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_parent",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set its parent",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "parent node to set, pass <code>nil</code> to remove parent",
                    "is_optional": "True",
                    "name": "parent",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "optional flag to make the scene position being perserved",
                    "is_optional": "True",
                    "name": "keep_scene_transform",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets a particle fx",
            "description": "Set the paricle fx for a gui node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_particlefx",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set particle fx for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "particle fx id",
                    "is_optional": "False",
                    "name": "particlefx",
                    "types": [
                        "hash",
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the number of generated vertices around the perimeter",
            "description": "Sets the number of generated vertices around the perimeter of a pie node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_perimeter_vertices",
            "notes": [],
            "parameters": [
                {
                    "doc": "pie node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "vertex count",
                    "is_optional": "False",
                    "name": "vertices",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the pivot of a node",
            "description": "The pivot specifies how the node is drawn and rotated from its position.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_pivot",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set pivot for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "pivot constant\n<ul>\n  <li><code>gui.PIVOT_CENTER</code></li>\n  <li><code>gui.PIVOT_N</code></li>\n  <li><code>gui.PIVOT_NE</code></li>\n  <li><code>gui.PIVOT_E</code></li>\n  <li><code>gui.PIVOT_SE</code></li>\n  <li><code>gui.PIVOT_S</code></li>\n  <li><code>gui.PIVOT_SW</code></li>\n  <li><code>gui.PIVOT_W</code></li>\n  <li><code>gui.PIVOT_NW</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "pivot",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node position",
            "description": "Sets the position of the supplied node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_position",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the position for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new position",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the render ordering for the current GUI scene",
            "description": "Set the order number for the current GUI scene.\nThe number dictates the sorting of the \"gui\" render predicate,\nin other words in which order the scene will be rendered in relation\nto other currently rendered GUI scenes.\nThe number must be in the range 0 to 15.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_render_order",
            "notes": [],
            "parameters": [
                {
                    "doc": "rendering order (0-15)",
                    "is_optional": "False",
                    "name": "order",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node rotation",
            "description": "Sets the rotation of the supplied node.\nThe rotation is expressed as a quaternion",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_rotation",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the rotation for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new rotation",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "quaternion",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node scale",
            "description": "Sets the scaling of the supplied node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_scale",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the scale for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new scale",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets screen position to the node",
            "description": "Set the screen position to the supplied node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_screen_position",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the screen position to",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "screen position",
                    "is_optional": "False",
                    "name": "screen_position",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node shadow color",
            "description": "Sets the shadow color of the supplied node.\nSee <a href=\"/ref/gui#gui.set_color\">gui.set_color</a> for info how vectors encode color values.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_shadow",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the shadow color for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new shadow color",
                    "is_optional": "False",
                    "name": "color",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node size",
            "description": "Sets the size of the supplied node.\n<span class=\"icon-attention\"></span> You can only set size on nodes with size mode set to SIZE_MODE_MANUAL",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_size",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set the size for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new size",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets node size mode",
            "description": "Sets the size mode of a node.\nThe size mode defines how the node will adjust itself in size. Automatic\nsize mode alters the node size based on the node's content. Automatic size\nmode works for Box nodes and Pie nodes which will both adjust their size\nto match the assigned image. Particle fx and Text nodes will ignore\nany size mode setting.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_size_mode",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set size mode for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "size mode to set\n<ul>\n<li><code>gui.SIZE_MODE_MANUAL</code></li>\n<li><code>gui.SIZE_MODE_AUTO</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "size_mode",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the slice9 configuration for the node",
            "description": "Set the slice9 configuration values for the node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_slice9",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to manipulate",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "new values",
                    "is_optional": "False",
                    "name": "values",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node text",
            "description": "Set the text value of a text node. This is only useful for text nodes.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_text",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set text for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "text to set",
                    "is_optional": "False",
                    "name": "text",
                    "types": [
                        "string",
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the node texture",
            "description": "Set the texture on a box or pie node. The texture must be mapped to\nthe gui scene in the gui editor. The function points out which texture\nthe node should render from. If the texture is an atlas, further\ninformation is needed to select which image/animation in the atlas\nto render. In such cases, use <code>gui.play_flipbook()</code> in\naddition to this function.",
            "error": "",
            "examples": "To set a texture (or animation) from an atlas:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box_node&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_atlas&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">play_flipbook</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;image&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n\nSet a dynamically created texture to a node. Note that there is only\none texture image in this case so <code>gui.set_texture()</code> is\nsufficient.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n<span class=\"c1\">-- A nice orange. String with the RGB values.</span>\n<span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n<span class=\"c1\">-- Create the texture. Repeat the color string for each pixel.</span>\n<span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n    <span class=\"kd\">local</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;box_node&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;orange_tx&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.set_texture",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set texture for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "texture id",
                    "is_optional": "False",
                    "name": "texture",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set the buffer data for a texture",
            "description": "Set the texture buffer data for a dynamically created texture.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n     <span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n     <span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>\n\n     <span class=\"c1\">-- Create a dynamic texture, all white.</span>\n     <span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;dynamic_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">),</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n         <span class=\"c1\">-- Create a box node and apply the texture to it.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_box_node</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n         <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dynamic_tx&quot;</span><span class=\"p\">)</span>\n\n         <span class=\"p\">...</span>\n\n         <span class=\"c1\">-- Change the data in the texture to a nice orange.</span>\n         <span class=\"kd\">local</span> <span class=\"n\">orange</span> <span class=\"o\">=</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0xff</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span> <span class=\"o\">..</span> <span class=\"nb\">string.char</span><span class=\"p\">(</span><span class=\"mh\">0x10</span><span class=\"p\">)</span>\n         <span class=\"kr\">if</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_texture_data</span><span class=\"p\">(</span><span class=\"s2\">&quot;dynamic_tx&quot;</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rgb&quot;</span><span class=\"p\">,</span> <span class=\"nb\">string.rep</span><span class=\"p\">(</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">*</span> <span class=\"n\">h</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n             <span class=\"c1\">-- Go on and to more stuff</span>\n             <span class=\"p\">...</span>\n         <span class=\"kr\">end</span>\n     <span class=\"kr\">else</span>\n         <span class=\"c1\">-- Something went wrong</span>\n         <span class=\"p\">...</span>\n     <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "gui.set_texture_data",
            "notes": [],
            "parameters": [
                {
                    "doc": "texture id",
                    "is_optional": "False",
                    "name": "texture",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "texture width",
                    "is_optional": "False",
                    "name": "width",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "texture height",
                    "is_optional": "False",
                    "name": "height",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "texture type\n<ul>\n  <li><code>\"rgb\"</code> - RGB</li>\n  <li><code>\"rgba\"</code> - RGBA</li>\n  <li><code>\"l\"</code> - LUMINANCE</li>\n</ul>",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "string",
                        "constant"
                    ]
                },
                {
                    "doc": "texture data",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "flip texture vertically",
                    "is_optional": "False",
                    "name": "flip",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "setting the data was successful",
                    "name": "success",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the tracking of the text node",
            "description": "Sets the tracking value of a text node. This value is used to\nadjust the vertical spacing of characters in the text.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_tracking",
            "notes": [],
            "parameters": [
                {
                    "doc": "node for which to set the tracking",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "a scaling number for the letter spacing (default=0)",
                    "is_optional": "False",
                    "name": "tracking",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set visibility for a node",
            "description": "Set if a node should be visible or not. Only visible nodes are rendered.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_visible",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to be visible or not",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "whether the node should be visible or not",
                    "is_optional": "False",
                    "name": "visible",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the x-anchor of a node",
            "description": "The x-anchor specifies how the node is moved when the game is run in a different resolution.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_xanchor",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set x-anchor for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_LEFT</code></li>\n<li><code>gui.ANCHOR_RIGHT</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "anchor",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "sets the y-anchor of a node",
            "description": "The y-anchor specifies how the node is moved when the game is run in a different resolution.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.set_yanchor",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to set y-anchor for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "anchor constant\n<ul>\n<li><code>gui.ANCHOR_NONE</code></li>\n<li><code>gui.ANCHOR_TOP</code></li>\n<li><code>gui.ANCHOR_BOTTOM</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "anchor",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "shows the on-display keyboard if available <span class=\"icon-ios\"></span> <span class=\"icon-android\"></span>",
            "description": "Shows the on-display touch keyboard.\nThe specified type of keyboard is displayed if it is available on\nthe device.\nThis function is only available on iOS and Android. <span class=\"icon-ios\"></span> <span class=\"icon-android\"></span>.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.show_keyboard",
            "notes": [],
            "parameters": [
                {
                    "doc": "keyboard type\n<ul>\n<li><code>gui.KEYBOARD_TYPE_DEFAULT</code></li>\n<li><code>gui.KEYBOARD_TYPE_EMAIL</code></li>\n<li><code>gui.KEYBOARD_TYPE_NUMBER_PAD</code></li>\n<li><code>gui.KEYBOARD_TYPE_PASSWORD</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "constant"
                    ]
                },
                {
                    "doc": "if the keyboard should automatically close when clicking outside",
                    "is_optional": "False",
                    "name": "autoclose",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "automatic size mode",
            "description": "The size of the node is determined by the currently assigned texture.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.SIZE_MODE_AUTO",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "manual size mode",
            "description": "The size of the node is determined by the size set in the editor, the constructor or by gui.set_size()",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.SIZE_MODE_MANUAL",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Stops a particle fx",
            "description": "Stops the particle fx for a gui node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.stop_particlefx",
            "notes": [],
            "parameters": [
                {
                    "doc": "node to stop particle fx for",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "options when stopping the particle fx. Supported options:\n<ul>\n<li><span class=\"type\">boolean</span> <code>clear</code>: instantly clear spawned particles</li>\n</ul>",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "box type",
            "description": "box type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.TYPE_BOX",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "custom type",
            "description": "custom type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.TYPE_CUSTOM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "particlefx type",
            "description": "particlefx type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.TYPE_PARTICLEFX",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "pie type",
            "description": "pie type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.TYPE_PIE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "text type",
            "description": "text type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "gui.TYPE_TEXT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "called when a gui component is initialized",
            "description": "This is a callback-function, which is called by the engine when a gui component is initialized. It can be used\nto set the initial state of the script and gui scene.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- set up useful data</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "init",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the script state to be used for storing data",
                    "is_optional": "False",
                    "name": "self",
                    "types": [
                        "userdata"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "reports a layout change",
            "description": "This message is broadcast to every GUI component when a layout change has been initiated\non device.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n   <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;layout_changed&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;Landscape&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n       <span class=\"c1\">-- switching layout to &quot;Landscape&quot;...</span>\n       <span class=\"p\">...</span>\n   <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "layout_changed",
            "notes": [],
            "parameters": [
                {
                    "doc": "the id of the layout the engine is changing to",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "hash"
                    ]
                },
                {
                    "doc": "the id of the layout the engine is changing from",
                    "is_optional": "False",
                    "name": "previous_id",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MESSAGE"
        },
        {
            "brief": "<span class=\"type\">hash</span> gui material",
            "description": "The main material (the default material assigned to a GUI) used when rendering the gui. The type of the property is hash.",
            "error": "",
            "examples": "How to set material using a script property (see <a href=\"/ref/resource#resource.material\">resource.material</a>)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;desaturate_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;/desaturate.material&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;material&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">desaturate_material</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "material",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">hash</span> gui materials",
            "description": "The materials used when rendering the gui. The type of the property is hash.\nKey must be specified in options table.",
            "error": "",
            "examples": "How to change a named material resource using a script property from a script\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;/my_material.material&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- this will update the &quot;my_gui_material&quot; entry in the GUI to use the material</span>\n  <span class=\"c1\">-- specified in the &quot;my_material&quot; script property.</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;materials&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_material</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_gui_material&quot;</span> <span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "materials",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "called when user input is received",
            "description": "This is a callback-function, which is called by the engine when user input is sent to the instance of the gui component.\nIt can be used to take action on the input, e.g. modify the gui according to the input.\nFor an instance to obtain user input, it must first acquire input\nfocus through the message <code>acquire_input_focus</code>.\nAny instance that has obtained input will be put on top of an\ninput stack. Input is sent to all listeners on the stack until the\nend of stack is reached, or a listener returns <code>true</code>\nto signal that it wants input to be consumed.\nSee the documentation of <a href=\"/ref/go/#acquire_input_focus\">acquire_input_focus</a> for more\ninformation.\nThe <code>action</code> parameter is a table containing data about the input mapped to the\n<code>action_id</code>.\nFor mapped actions it specifies the value of the input and if it was just pressed or released.\nActions are mapped to input in an input_binding-file.\nMouse movement is specifically handled and uses <code>nil</code> as its <code>action_id</code>.\nThe <code>action</code> only contains positional parameters in this case, such as x and y of the pointer.\nHere is a brief description of the available table fields:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>value</code></td>\n<td>The amount of input given by the user. This is usually 1 for buttons and 0-1 for analogue inputs. This is not present for mouse movement and text input.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>If the input was pressed this frame. This is not present for mouse movement and text input.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>If the input was released this frame. This is not present for mouse movement and text input.</td>\n</tr>\n<tr>\n<td><code>repeated</code></td>\n<td>If the input was repeated this frame. This is similar to how a key on a keyboard is repeated when you hold it down. This is not present for mouse movement and text input.</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>screen_x</code></td>\n<td>The screen space x value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>screen_y</code></td>\n<td>The screen space y value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>screen_dx</code></td>\n<td>The change in screen space x value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>screen_dy</code></td>\n<td>The change in screen space y value of a pointer device, if present. This is not present for gamepad, key and text input.</td>\n</tr>\n<tr>\n<td><code>gamepad</code></td>\n<td>The index of the gamepad device that provided the input. See table below about gamepad input.</td>\n</tr>\n<tr>\n<td><code>touch</code></td>\n<td>List of touch input, one element per finger, if present. See table below about touch input</td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>Text input from a (virtual) keyboard or similar.</td>\n</tr>\n<tr>\n<td><code>marked_text</code></td>\n<td>Sequence of entered symbols while entering a symbol combination, for example Japanese Kana.</td>\n</tr>\n</tbody>\n</table>\nGamepad specific fields:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>gamepad</code></td>\n<td>The index of the gamepad device that provided the input.</td>\n</tr>\n<tr>\n<td><code>userid</code></td>\n<td>Id of the user associated with the controller. Usually only relevant on consoles.</td>\n</tr>\n<tr>\n<td><code>gamepad_unknown</code></td>\n<td>True if the inout originated from an unknown/unmapped gamepad.</td>\n</tr>\n<tr>\n<td><code>gamepad_name</code></td>\n<td>Name of the gamepad</td>\n</tr>\n<tr>\n<td><code>gamepad_axis</code></td>\n<td>List of gamepad axis values. For raw gamepad input only.</td>\n</tr>\n<tr>\n<td><code>gamepadhats</code></td>\n<td>List of gamepad hat values. For raw gamepad input only.</td>\n</tr>\n<tr>\n<td><code>gamepad_buttons</code></td>\n<td>List of gamepad button values. For raw gamepad input only.</td>\n</tr>\n</tbody>\n</table>\nTouch input table:\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>id</code></td>\n<td>A number identifying the touch input during its duration.</td>\n</tr>\n<tr>\n<td><code>pressed</code></td>\n<td>True if the finger was pressed this frame.</td>\n</tr>\n<tr>\n<td><code>released</code></td>\n<td>True if the finger was released this frame.</td>\n</tr>\n<tr>\n<td><code>tap_count</code></td>\n<td>Number of taps, one for single, two for double-tap, etc</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>The x touch location.</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>The y touch location.</td>\n</tr>\n<tr>\n<td><code>dx</code></td>\n<td>The change in x value.</td>\n</tr>\n<tr>\n<td><code>dy</code></td>\n<td>The change in y value.</td>\n</tr>\n<tr>\n<td><code>acc_x</code></td>\n<td>Accelerometer x value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_y</code></td>\n<td>Accelerometer y value (if present).</td>\n</tr>\n<tr>\n<td><code>acc_z</code></td>\n<td>Accelerometer z value (if present).</td>\n</tr>\n</tbody>\n</table>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_input</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">action_id</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check for input</span>\n    <span class=\"kr\">if</span> <span class=\"n\">action_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_action&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"c1\">-- take appropritate action</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">value</span>\n    <span class=\"kr\">end</span>\n    <span class=\"c1\">-- consume input</span>\n    <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "on_input",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the script state to be used for storing data",
                    "is_optional": "False",
                    "name": "self",
                    "types": [
                        "userdata"
                    ]
                },
                {
                    "doc": "id of the received input action, as mapped in the input_binding-file",
                    "is_optional": "False",
                    "name": "action_id",
                    "types": [
                        "hash"
                    ]
                },
                {
                    "doc": "a table containing the input data, see above for a description",
                    "is_optional": "False",
                    "name": "action",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "optional boolean to signal if the input should be consumed (not passed on to others) or not, default is false",
                    "name": "consume",
                    "types": [
                        "boolean",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "called when a message has been sent to the gui component",
            "description": "This is a callback-function, which is called by the engine whenever a message has been sent to the gui component.\nIt can be used to take action on the message, e.g. update the gui or send a response back to the sender of the message.\nThe <code>message</code> parameter is a table containing the message data. If the message is sent from the engine, the\ndocumentation of the message specifies which data is supplied.\nSee the <a href=\"#update\">update</a> function for examples on how to use this callback-function.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "on_message",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the script state to be used for storing data",
                    "is_optional": "False",
                    "name": "self",
                    "types": [
                        "userdata"
                    ]
                },
                {
                    "doc": "id of the received message",
                    "is_optional": "False",
                    "name": "message_id",
                    "types": [
                        "hash"
                    ]
                },
                {
                    "doc": "a table containing the message data",
                    "is_optional": "False",
                    "name": "message",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "called when the gui script is reloaded",
            "description": "\nThis is a callback-function, which is called by the engine when the gui script is reloaded, e.g. from the editor.\nIt can be used for live development, e.g. to tweak constants or set up the state properly for the script.\n",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_reload</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- restore some color (or similar)</span>\n    <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_node&quot;</span><span class=\"p\">),</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_original_color</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "on_reload",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the script state to be used for storing data",
                    "is_optional": "False",
                    "name": "self",
                    "types": [
                        "userdata"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "<span class=\"type\">hash</span> gui textures",
            "description": "The textures used in the gui. The type of the property is hash.\nKey must be specified in options table.",
            "error": "",
            "examples": "How to set texture using a script property (see <a href=\"/ref/resource#resource.atlas\">resource.atlas</a>)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;cards_red&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/cards_red.atlas&quot;</span><span class=\"p\">))</span>\n<span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;cards_blue&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">atlas</span><span class=\"p\">(</span><span class=\"s2\">&quot;/cards_blue.atlas&quot;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#gui&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;textures&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">cards_red</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cards&quot;</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "textures",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "called every frame to update the gui component",
            "description": "This is a callback-function, which is called by the engine every frame to update the state of a gui component.\nIt can be used to perform any kind of gui related tasks, e.g. animating nodes.",
            "error": "",
            "examples": "This example demonstrates how to update a text node that displays game score in a counting fashion.\nIt is assumed that the gui component receives messages from the game when a new score is to be shown.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- fetch the score text node for later use (assumes it is called &quot;score&quot;)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;score&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- keep track of the current score counted up so far</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">-- keep track of the target score we should count up to</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"c1\">-- how fast we will update the score, in score/second</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_update_speed</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check if target score is more than current score</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">&lt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span>\n        <span class=\"c1\">-- increment current score according to the speed</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">+</span> <span class=\"n\">dt</span> <span class=\"o\">*</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_update_speed</span>\n        <span class=\"c1\">-- check if we went past the target score, clamp current score in that case</span>\n        <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">&gt;</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"kr\">then</span>\n            <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span>\n        <span class=\"kr\">end</span>\n        <span class=\"c1\">-- update the score text node</span>\n        <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_text</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">score_node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">..</span> <span class=\"nb\">math.floor</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">current_score</span><span class=\"p\">))</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- check the message</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;set_score&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">target_score</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">score</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "update",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the script state to be used for storing data",
                    "is_optional": "False",
                    "name": "self",
                    "types": [
                        "userdata"
                    ]
                },
                {
                    "doc": "the time-step of the frame update",
                    "is_optional": "False",
                    "name": "dt",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "GUI API documentation",
        "description": "GUI core hooks, functions, messages, properties and constants for\ncreation and manipulation of GUI nodes. The \"gui\" namespace is\naccessible only from gui scripts.",
        "description_html": "<p>GUI core hooks, functions, messages, properties and constants for\ncreation and manipulation of GUI nodes. The \"gui\" namespace is\naccessible only from gui scripts.</p>",
        "file": "",
        "language": "Lua",
        "name": "GUI",
        "namespace": "gui",
        "notes": [],
        "path": "gui_script.cpp",
        "type": "Defold Lua"
    }
}