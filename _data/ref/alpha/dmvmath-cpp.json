{
    "elements": [
        {
            "brief": "post multiply scale",
            "description": "post multiply scale",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AppendScale",
            "notes": [],
            "parameters": [
                {
                    "doc": "the matrix",
                    "is_optional": "False",
                    "name": "m",
                    "types": [
                        "Matrix4"
                    ]
                },
                {
                    "doc": "the scale vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the scaled vector",
                    "name": "r",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "cross product between two vectors",
            "description": "cross product between two vectors",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Cross",
            "notes": [],
            "parameters": [
                {
                    "doc": "the operand",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector3"
                    ]
                },
                {
                    "doc": "the dividend",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "divide two vectors per element",
            "description": "Divide two vectors per element: <code>Vector3(a.x/b.x, a.y/b.y, a.z/b.z)</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DivPerElem",
            "notes": [],
            "parameters": [
                {
                    "doc": "the operand",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector3"
                    ]
                },
                {
                    "doc": "the dividend",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "divide two vectors per element",
            "description": "Divide two vectors per element: <code>Vector3(a.x/b.x, a.y/b.y, a.z/b.z, a.w/b.w)</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DivPerElem",
            "notes": [],
            "parameters": [
                {
                    "doc": "the operand",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector4"
                    ]
                },
                {
                    "doc": "the dividend",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "dot product between two vectors",
            "description": "dot product between two vectors",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Dot",
            "notes": [],
            "parameters": [
                {
                    "doc": "the first vector",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector3"
                    ]
                },
                {
                    "doc": "the second vector",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the dot product",
                    "name": "dot_product",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "dot product between two vectors",
            "description": "dot product between two vectors",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Dot",
            "notes": [],
            "parameters": [
                {
                    "doc": "the first vector",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector4"
                    ]
                },
                {
                    "doc": "the second vector",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the dot product",
                    "name": "dot_product",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "inverse matrix",
            "description": "inverse matrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Inverse",
            "notes": [],
            "parameters": [
                {
                    "doc": "the rotation",
                    "is_optional": "False",
                    "name": "m",
                    "types": [
                        "Matrix3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the transposed matrix",
                    "name": "r",
                    "types": [
                        "Matrix3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "inverse matrix",
            "description": "inverse matrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Inverse",
            "notes": [],
            "parameters": [
                {
                    "doc": "the rotation",
                    "is_optional": "False",
                    "name": "m",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the transposed matrix",
                    "name": "r",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate length of a vector",
            "description": "calculate length of a vector",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Length",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the length",
                    "name": "length",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate length of a vector",
            "description": "calculate length of a vector",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Length",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the length",
                    "name": "length",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate length of a quaternion",
            "description": "calculate length of a quaternion",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Length",
            "notes": [],
            "parameters": [
                {
                    "doc": "the quaternion",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the length",
                    "name": "length",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate squared length of a vector",
            "description": "calculate squared length of a vector",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Length",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the squared length",
                    "name": "length",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate squared length of a vector",
            "description": "calculate squared length of a vector",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Length",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the squared length",
                    "name": "length",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate squared length of a quaternion",
            "description": "calculate squared length of a quaternion",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Length",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the squared length",
                    "name": "length",
                    "types": [
                        "float"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "linear interpolate between two vectors",
            "description": "linear interpolate between two vectors",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Lerp</span><span class=\"p\">(</span><span class=\"mf\">0.0f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// v0 == a</span>\n<span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Lerp</span><span class=\"p\">(</span><span class=\"mf\">1.0f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// v1 == b</span>\n<span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Lerp</span><span class=\"p\">(</span><span class=\"mf\">2.0f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// v2 == a + (b-a) * 2.0f</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "Lerp",
            "notes": [
                "Does not clamp t to between 0 and 1"
            ],
            "parameters": [
                {
                    "doc": "the unit time",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "the start vector (t == 0)",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector3"
                    ]
                },
                {
                    "doc": "the end vector (t == 1)",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector <code>v = a + (b - a) * t</code>",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "linear interpolate between two vectors",
            "description": "linear interpolate between two vectors",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector4</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Lerp</span><span class=\"p\">(</span><span class=\"mf\">0.0f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// v0 == a</span>\n<span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector4</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Lerp</span><span class=\"p\">(</span><span class=\"mf\">1.0f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// v1 == b</span>\n<span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector4</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Lerp</span><span class=\"p\">(</span><span class=\"mf\">2.0f</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// v2 == a + (b-a) * 2.0f</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "Lerp",
            "notes": [
                "Does not clamp t to between 0 and 1"
            ],
            "parameters": [
                {
                    "doc": "the unit time",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "the start vector (t == 0)",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector4"
                    ]
                },
                {
                    "doc": "the end vector (t == 1)",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector <code>v = a + (b - a) * t</code>",
                    "name": "v",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "3x3 matrix",
            "description": "A 3x3 matrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Matrix3",
            "notes": [
                "16 byte aligned",
                "Implemented as 3 x Vector3",
                "Column major",
                "Currently scalar implementation is used on most platforms"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "4x4 matrix",
            "description": "A 4x4 matrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Matrix4",
            "notes": [
                "16 byte aligned",
                "Implemented as 4 x Vector4",
                "Column major",
                "Currently scalar implementation is used on most platforms"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "multiply two vectors per element",
            "description": "Multiply two vectors per element: <code>Vector3(a.x * b.x, a.y * b.y, a.z * b.z)</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "MulPerElem",
            "notes": [],
            "parameters": [
                {
                    "doc": "the first vector",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector3"
                    ]
                },
                {
                    "doc": "the second vector",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "multiply two vectors per element",
            "description": "Multiply two vectors per element: <code>Vector3(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w)</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "MulPerElem",
            "notes": [],
            "parameters": [
                {
                    "doc": "the first vector",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector4"
                    ]
                },
                {
                    "doc": "the second vector",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "abs value per element",
            "description": "Return absolute value per element: <code>Vector3(abs(v.x), abs(v.y), abs(v.z))</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "MulPerElem",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "r",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "conjugate of quaternion",
            "description": "Returns the conjugate of the quaternion: <code>conj = -q</code>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "MulPerElem",
            "notes": [],
            "parameters": [
                {
                    "doc": "the quaternions",
                    "is_optional": "False",
                    "name": "q",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result",
                    "name": "r",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "normalize a vector to length 1",
            "description": "normalize a vector to length 1",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Normalize",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the normalized vector",
                    "name": "n",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "normalize a vector to length 1",
            "description": "normalize a vector to length 1",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Normalize",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the normalized vector",
                    "name": "n",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "normalize a quaternion to length 1",
            "description": "normalize a quaternion to length 1",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Normalize",
            "notes": [],
            "parameters": [
                {
                    "doc": "the quaternion",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the normalized quaternion",
                    "name": "n",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Compute the inverse of a 4x4 matrix, which is expe...",
            "description": "Compute the inverse of a 4x4 matrix, which is expected to be an affine matrix with an orthogonal upper-left 3x3 submatrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "OrthoInverse",
            "notes": [],
            "parameters": [
                {
                    "doc": "the rotation",
                    "is_optional": "False",
                    "name": "m",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the transposed matrix",
                    "name": "r",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "3-tuple",
            "description": "A 3-tuple (with 4-th element always set to 1)",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Point3</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Point3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Create new point</span>\n<span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">length_squared</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "Point3",
            "notes": [
                "16 byte aligned",
                "Always size of 4 float32",
                "Currently scalar implementation is used on most platforms"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "4-tuple representing a rotation",
            "description": "A 4-tuple representing a rotation rotation. The <code>xyz</code> represents the axis, and the <code>w</code> represents the angle.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Quat</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Quat</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Create new rotation. W is the angle</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "Quat",
            "notes": [
                "16 byte aligned",
                "Always size of 4 float32",
                "Currently scalar implementation is used on most platforms"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "rotate vector using quaternion",
            "description": "rotate vector using quaternion",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Rotate",
            "notes": [],
            "parameters": [
                {
                    "doc": "the rotation",
                    "is_optional": "False",
                    "name": "q",
                    "types": [
                        "Quat"
                    ]
                },
                {
                    "doc": "the vector",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the rotated vector",
                    "name": "r",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "spherical linear interpolate between two vectors",
            "description": "spherical linear interpolate between two vectors",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Slerp",
            "notes": [
                "Does not clamp t to between 0 and 1",
                "Unpredicatable results if a and b point in opposite direction"
            ],
            "parameters": [
                {
                    "doc": "the unit time",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "the start vector (t == 0)",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector3"
                    ]
                },
                {
                    "doc": "the end vector (t == 1)",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "spherical linear interpolate between two vectors",
            "description": "spherical linear interpolate between two vectors",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Slerp",
            "notes": [
                "Does not clamp t to between 0 and 1",
                "Unpredicatable results if a and b point in opposite direction"
            ],
            "parameters": [
                {
                    "doc": "the unit time",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "the start vector (t == 0)",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Vector4"
                    ]
                },
                {
                    "doc": "the end vector (t == 1)",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "spherical linear interpolate between two vectors",
            "description": "Interpolates along the shortest path between two quaternions",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Slerp",
            "notes": [
                "Does not clamp t to between 0 and 1"
            ],
            "parameters": [
                {
                    "doc": "the unit time",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "the start vector (t == 0)",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "Quat"
                    ]
                },
                {
                    "doc": "the end vector (t == 1)",
                    "is_optional": "False",
                    "name": "b",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result vector",
                    "name": "v",
                    "types": [
                        "Quat"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "transpose matrix",
            "description": "transpose matrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Transpose",
            "notes": [],
            "parameters": [
                {
                    "doc": "the rotation",
                    "is_optional": "False",
                    "name": "m",
                    "types": [
                        "Matrix3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the transposed matrix",
                    "name": "r",
                    "types": [
                        "Matrix3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "transpose matrix",
            "description": "transpose matrix",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Transpose",
            "notes": [],
            "parameters": [
                {
                    "doc": "the rotation",
                    "is_optional": "False",
                    "name": "m",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the transposed matrix",
                    "name": "r",
                    "types": [
                        "Matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "3-tuple",
            "description": "A 3-tuple (with 4-th element always set to 0)",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Create new vector</span>\n<span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">length_squared</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "Vector3",
            "notes": [
                "16 byte aligned",
                "Always size of 4 float32",
                "Currently scalar implementation is used on most platforms"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "4-tuple",
            "description": "A 4-tuple",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector4</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Vector4</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Create new vector</span>\n<span class=\"kt\">float</span><span class=\"w\"> </span><span class=\"n\">length_squared</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getW</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">getW</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "Vector4",
            "notes": [
                "16 byte aligned",
                "Always size of 4 float32",
                "Currently scalar implementation is used on most platforms"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        }
    ],
    "info": {
        "brief": "SDK Vector Math API documentation",
        "description": "Vector Math functions.",
        "description_html": "<p>Vector Math functions.</p>",
        "file": "dmsdk/dlib/vmath.h",
        "language": "C++",
        "name": "Vector Math",
        "namespace": "dmVMath",
        "notes": [],
        "path": "dmsdk/dlib/vmath.h",
        "type": "Defold C++"
    }
}