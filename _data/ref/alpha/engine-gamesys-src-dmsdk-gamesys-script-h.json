{
    "elements": [
        {
            "brief": "Get current gameobject's collection handle",
            "description": "Get current gameobject's collection handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CheckCollection",
            "notes": [
                "Works from both a .script/.gui_script"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "lua-arg",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "gameobject instance",
                    "name": "instance",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get current game object instance\nWorks in both gam...",
            "description": "Get current game object instance\nWorks in both gameobjects and gui scripts",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CheckGOInstance",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get gameobject instance\nThe instance reference (u...",
            "description": "Get gameobject instance\nThe instance reference (url) at stack index \"index\" will be resolved to an instance.",
            "error": "",
            "examples": "How to get the position of a gameobject in a script extension\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">get_position</span><span class=\"p\">(</span><span class=\"n\">lua_State</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_LUA_STACK_CHECK</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">HInstance</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">CheckGOInstance</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">dmVMath</span><span class=\"o\">::</span><span class=\"n\">Point3</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dmGameObject</span><span class=\"o\">::</span><span class=\"n\">GetPosition</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lua_pushnumber</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">position</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "CheckGOInstance",
            "notes": [
                "The function only accepts instances in \"this\" collection. Otherwise a lua-error will be raised."
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "lua-arg",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "gameobject instance",
                    "name": "instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a LuaHBuffer from the supplied lua state",
            "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmScript::CheckBuffer",
            "notes": [
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to dmScript::LuaHBuffer",
                    "name": "buffer",
                    "types": [
                        "LuaHBuffer*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a LuaHBuffer from the supplied lua state.",
            "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmScript::CheckBufferNoError",
            "notes": [
                "Returns 0 on error. Does not invoke lua_error.",
                "deprecated. Prefer ToBuffer() instead.",
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to dmScript::LuaHBuffer or 0 if not valid",
                    "name": "buffer",
                    "types": [
                        "LuaHBuffer*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a HBuffer from the supplied lua state",
            "description": "Retrieve a HBuffer from the supplied lua state\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and it's valid, returns the HBuffer.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmScript::CheckBufferUnpack",
            "notes": [
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "buffer if valid, 0 otherwise",
                    "name": "buffer",
                    "types": [
                        "dmBuffer::HBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a HBuffer from the supplied lua state",
            "description": "Retrieve a HBuffer from the supplied lua state\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and it's valid, returns the HBuffer.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmScript::CheckBufferUnpackNoError",
            "notes": [
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "buffer if valid, 0 otherwise",
                    "name": "buffer",
                    "types": [
                        "dmBuffer::HBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if the value is a dmScript::LuaHBuffer",
            "description": "Check if the value is a dmScript::LuaHBuffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmScript::IsBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if value at index is a LuaHBuffer",
                    "name": "boolean",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Lua wrapper for a dmBuffer::HBuffer",
            "description": "Holds info about the buffer and who owns it.",
            "error": "",
            "examples": "See examples for dmScript::PushBuffer()",
            "language": "",
            "members": [
                {
                    "doc": "of\n    - m_BufferRes [type:void*]                       A buffer resource\n    - m_Buffer    [type:dmBuffer::HBuffer]           A buffer",
                    "name": "Union",
                    "type": ""
                },
                {
                    "doc": "The buffer (or resource)",
                    "name": "m_Buffer",
                    "type": "dmBuffer::HBuffer"
                },
                {
                    "doc": "What ownership the pointer has",
                    "name": "m_Owner",
                    "type": "dmScript::LuaBufferOwnership"
                }
            ],
            "name": "dmScript::LuaHBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "push a LuaHBuffer onto the supplied lua state",
            "description": "Will increase the stack by 1.",
            "error": "",
            "examples": "How to push a buffer and give Lua ownership of the buffer (GC)\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span><span class=\"w\"> </span><span class=\"nf\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_LUA</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">luabuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\nHow to push a buffer and keep ownership in C++\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">LuaHBuffer</span><span class=\"w\"> </span><span class=\"nf\">luabuf</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dmScript</span><span class=\"o\">::</span><span class=\"n\">OWNER_C</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">PushBuffer</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">luabuf</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "dmScript::PushBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "buffer to push",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmScript::LuaHBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve a LuaHBuffer from the supplied lua state.",
            "description": "Retrieve a LuaHBuffer from the supplied lua state.\nCheck if the value in the supplied index on the lua stack is a LuaHBuffer and returns it.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmScript::ToBuffer",
            "notes": [
                "Returns 0 on error. Does not invoke lua_error.",
                "The dmBuffer::IsBufferValid is already called on the returned buffer"
            ],
            "parameters": [
                {
                    "doc": "lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "Index of the value",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to dmScript::LuaHBuffer or 0 if not valid",
                    "name": "buffer",
                    "types": [
                        "LuaHBuffer*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get component user data from a url.",
            "description": "Get component user data from a url.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetComponentFromLua",
            "notes": [
                "The object referenced by the url must be in the same collection as the caller."
            ],
            "parameters": [
                {
                    "doc": "Lua state",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "index to argument (a url)",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "int"
                    ]
                },
                {
                    "doc": "E.g. \"factoryc\". The call will fail if the found component does not have the specified extension",
                    "is_optional": "False",
                    "name": "component_type",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The world associated owning the component. May be 0",
                    "is_optional": "False",
                    "name": "world",
                    "types": [
                        "dmGameObject::HComponentWorld*"
                    ]
                },
                {
                    "doc": "The component data associated with the url. May be 0",
                    "is_optional": "False",
                    "name": "component",
                    "types": [
                        "dmGameObject::HComponent*"
                    ]
                },
                {
                    "doc": "The resolved url. May be 0",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "dmMessage::URL*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "buffer ownership",
            "description": "Buffer ownership.\n - OWNER_C   - m_Buffer is owned by C side, should not be destroyed when GCed\n - OWNER_LUA - m_Buffer is owned by Lua side, will be destroyed when GCed\n - OWNER_RES - m_Buffer not used, has a reference to a buffer resource instead. m_BufferRes is owned by C side, will be released when GCed",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmScript::OWNER_C",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmScript::OWNER_LUA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmScript::OWNER_RES",
                    "type": ""
                }
            ],
            "name": "LuaBufferOwnership",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        }
    ],
    "info": {
        "brief": "SDK Script API documentation",
        "description": "Built-in scripting functions.",
        "description_html": "<p>Built-in scripting functions.</p>",
        "file": "script.h",
        "include": "dmsdk/gamesys/script.h",
        "language": "C++",
        "name": "Script",
        "namespace": "dmScript",
        "notes": [],
        "path": "engine/gamesys/src/dmsdk/gamesys/script.h",
        "type": "Defold C++"
    }
}