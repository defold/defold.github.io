{
    "elements": [
        {
            "brief": "Added new list element as a head of the list",
            "description": "Added new list element as a head of the list",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmDoubleLinkedList::ListAdd",
            "notes": [],
            "parameters": [
                {
                    "doc": "the list",
                    "is_optional": "False",
                    "name": "list",
                    "types": [
                        "dmDoubleLinkedList::List*"
                    ]
                },
                {
                    "doc": "new list element",
                    "is_optional": "False",
                    "name": "item",
                    "types": [
                        "dmDoubleLinkedList::ListNode*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the first element of the list. If the list is ...",
            "description": "Get the first element of the list. If the list is empty (tail == head) returns 0.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmDoubleLinkedList::ListGetFirst",
            "notes": [],
            "parameters": [
                {
                    "doc": "the list",
                    "is_optional": "False",
                    "name": "list",
                    "types": [
                        "dmDoubleLinkedList::List*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the first element of the list.  If the list is empty (tail == head) returns 0",
                    "name": "first_element",
                    "types": [
                        "dmDoubleLinkedList::ListNode*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the last element of the list. If the list is e...",
            "description": "Get the last element of the list. If the list is empty (tail == head) returns 0.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmDoubleLinkedList::ListGetLast",
            "notes": [],
            "parameters": [
                {
                    "doc": "the list",
                    "is_optional": "False",
                    "name": "list",
                    "types": [
                        "dmDoubleLinkedList::List*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the last element of the list. If the list is empty (tail == head) returns 0",
                    "name": "last_element",
                    "types": [
                        "dmDoubleLinkedList::ListNode*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Initialize empty double linked list",
            "description": "Initialize empty double linked list",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmDoubleLinkedList::ListInit",
            "notes": [],
            "parameters": [
                {
                    "doc": "the list",
                    "is_optional": "False",
                    "name": "list",
                    "types": [
                        "dmDoubleLinkedList::List*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Remove item from the list. Doesn't deallocate memo...",
            "description": "Remove item from the list. Doesn't deallocate memory allocated for the item.\nIf element is not in the list function doesn't affect linked list.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmDoubleLinkedList::ListRemove",
            "notes": [],
            "parameters": [
                {
                    "doc": "the list",
                    "is_optional": "False",
                    "name": "list",
                    "types": [
                        "dmDoubleLinkedList::List*"
                    ]
                },
                {
                    "doc": "removed item",
                    "is_optional": "False",
                    "name": "item",
                    "types": [
                        "dmDoubleLinkedList::ListNode*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Double linked list structs and functions",
        "description": "Double linked list structs and functions",
        "description_html": "<p>Double linked list structs and functions</p>",
        "file": "double_linked_list.h",
        "include": "dmsdk/dlib/double_linked_list.h",
        "language": "C++",
        "name": "Double linked list structs and functions",
        "namespace": "dmDoubleLinkedList",
        "notes": [],
        "path": "engine/dlib/src/dmsdk/dlib/double_linked_list.h",
        "type": "Defold C++"
    }
}