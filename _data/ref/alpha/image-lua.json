{
    "elements": [
        {
            "brief": "load image from buffer",
            "description": "Load image (PNG or JPEG) from buffer.",
            "error": "",
            "examples": "How to load an image from an URL and create a GUI texture from it:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">imgurl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;http://www.site.com/image.png&quot;</span>\n<span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">imgurl</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">tx</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">new_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;image_node&quot;</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "image.load",
            "notes": [],
            "parameters": [
                {
                    "doc": "image data buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "An optional table containing parameters for loading the image. Supported entries:\n<dl>\n<dt><code>premultiply_alpha</code></dt>\n<dd><span class=\"type\">boolean</span> True if alpha should be premultiplied into the color components. Defaults to <code>false</code>.</dd>\n<dt><code>flip_vertically</code></dt>\n<dd><span class=\"type\">boolean</span> True if the image contents should be flipped vertically. Defaults to <code>false</code>.</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "object or <code>nil</code> if loading fails. The object is a table with the following fields:\n<ul>\n<li><span class=\"type\">number</span> <code>width</code>: image width</li>\n<li><span class=\"type\">number</span> <code>height</code>: image height</li>\n<li><span class=\"type\">constant</span> <code>type</code>: image type<ul>\n<li><code>image.TYPE_RGB</code></li>\n<li><code>image.TYPE_RGBA</code></li>\n<li><code>image.TYPE_LUMINANCE</code></li>\n<li><code>image.TYPE_LUMINANCE_ALPHA</code></li>\n</ul>\n</li>\n<li><span class=\"type\">string</span> <code>buffer</code>: the raw image data</li>\n</ul>",
                    "name": "image",
                    "types": [
                        "table",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "load image from a string into a buffer object",
            "description": "Load image (PNG or JPEG) from a string buffer.",
            "error": "",
            "examples": "Load an image from an URL as a buffer and create a texture resource from it:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">imgurl</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;http://www.site.com/image.png&quot;</span>\n<span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">imgurl</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">load_buffer</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"n\">flip_vertically</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n        <span class=\"kd\">local</span> <span class=\"n\">tparams</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">width</span>  <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">width</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">height</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span>   <span class=\"o\">=</span> <span class=\"n\">graphics</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_TYPE_2D</span><span class=\"p\">,</span>\n            <span class=\"n\">format</span> <span class=\"o\">=</span> <span class=\"n\">graphics</span><span class=\"p\">.</span><span class=\"n\">TEXTURE_FORMAT_RGBA</span> <span class=\"p\">}</span>\n\n        <span class=\"kd\">local</span> <span class=\"n\">my_texture_id</span> <span class=\"o\">=</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">create_texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;/my_custom_texture.texturec&quot;</span><span class=\"p\">,</span> <span class=\"n\">tparams</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n        <span class=\"c1\">-- Apply the texture to a model</span>\n        <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;/go1#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;texture0&quot;</span><span class=\"p\">,</span> <span class=\"n\">my_texture_id</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "image.load_buffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "image data buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "An optional table containing parameters for loading the image. Supported entries:\n<dl>\n<dt><code>premultiply_alpha</code></dt>\n<dd><span class=\"type\">boolean</span> True if alpha should be premultiplied into the color components. Defaults to <code>false</code>.</dd>\n<dt><code>flip_vertically</code></dt>\n<dd><span class=\"type\">boolean</span> True if the image contents should be flipped vertically. Defaults to <code>false</code>.</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "options",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "object or <code>nil</code> if loading fails. The object is a table with the following fields:\n<ul>\n<li><span class=\"type\">number</span> <code>width</code>: image width</li>\n<li><span class=\"type\">number</span> <code>height</code>: image height</li>\n<li><span class=\"type\">constant</span> <code>type</code>: image type<ul>\n<li><code>image.TYPE_RGB</code></li>\n<li><code>image.TYPE_RGBA</code></li>\n<li><code>image.TYPE_LUMINANCE</code></li>\n<li><code>image.TYPE_LUMINANCE_ALPHA</code></li>\n</ul>\n</li>\n<li><span class=\"type\">buffer</span> <code>buffer</code>: the script buffer that holds the decompressed image data. See <a href=\"/ref/buffer#buffer.create\">buffer.create</a> how to use the buffer.</li>\n</ul>",
                    "name": "image",
                    "types": [
                        "table",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "luminance image type",
            "description": "luminance image type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "image.TYPE_LUMINANCE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "luminance image type",
            "description": "luminance image type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "image.TYPE_LUMINANCE_ALPHA",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "RGB image type",
            "description": "RGB image type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "image.TYPE_RGB",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "RGBA image type",
            "description": "RGBA image type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "image.TYPE_RGBA",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        }
    ],
    "info": {
        "brief": "Image API documentation",
        "description": "Functions for creating image objects.",
        "description_html": "<p>Functions for creating image objects.</p>",
        "file": "",
        "language": "Lua",
        "name": "Image",
        "namespace": "image",
        "notes": [],
        "path": "scripts/script_image.cpp",
        "type": "Defold Lua"
    }
}