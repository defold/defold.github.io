{
    "elements": [
        {
            "brief": "concatenates table items together into a string",
            "description": "Given an array where all elements are strings or numbers,\nreturns <code>table[i]..sep..table[i+1] ... sep..table[j]</code>.\nThe default value for sep is the empty string,\nthe default for i is 1,\nand the default for j is the length of the table.\nIf i is greater than j, returns the empty string.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "table.concat",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "sep",
                    "types": [
                        "string"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "i",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "j",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "inserts a new item into a numerically-keyed table",
            "description": "Inserts element value at position pos in table,\nshifting up other elements to open space, if necessary.\nThe default value for pos is <code>n+1</code>,\nwhere n is the length of the table ,\nso that a call <code>table.insert(t,x)</code> inserts x at the end\nof table t.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "table.insert",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "pos",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "any"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "returns the highest numeric key in the table",
            "description": "Returns the largest positive numerical index of the given table,\nor zero if the table has no positive numerical indices.\n(To do its job this function does a linear traversal of\nthe whole table.)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "table.maxn",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "removes an item from a numerically-keyed table",
            "description": "Removes from table the element at position pos,\nshifting down other elements to close the space, if necessary.\nReturns the value of the removed element.\nThe default value for pos is n,\nwhere n is the length of the table,\nso that a call <code>table.remove(t)</code> removes the last element\nof table t.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "table.remove",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "pos",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sorts a table",
            "description": "Sorts table elements in a given order, <em>in-place</em>,\nfrom <code>table[1]</code> to <code>table[n]</code>,\nwhere n is the length of the table.\nIf comp is given,\nthen it must be a function that receives two table elements,\nand returns true\nwhen the first is less than the second\n(so that <code>not comp(a[i+1],a[i])</code> will be true after the sort).\nIf comp is not given,\nthen the standard Lua operator <code>&lt;</code> is used instead.\nThe sort algorithm is not stable;\nthat is, elements considered equal by the given order\nmay have their relative positions changed by the sort.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "table.sort",
            "notes": [],
            "parameters": [
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "table",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "True",
                    "name": "comp",
                    "types": [
                        "function"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Lua table standard library",
        "description": "Documentation for the Lua table standard library.\n\nFrom [Lua 5.1 Reference Manual](https://www.lua.org/manual/5.1/)\nby Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.\n\nCopyright &copy; 2006-2012 Lua.org, PUC-Rio.\n\nFreely available under the terms of the [Lua license](https://www.lua.org/license.html).",
        "description_html": "<p>Documentation for the Lua table standard library.</p>\n<p>From <a href=\"https://www.lua.org/manual/5.1/\">Lua 5.1 Reference Manual</a>\nby Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.</p>\n<p>Copyright &copy; 2006-2012 Lua.org, PUC-Rio.</p>\n<p>Freely available under the terms of the <a href=\"https://www.lua.org/license.html\">Lua license</a>.</p>",
        "file": "",
        "language": "Lua",
        "name": "Table",
        "namespace": "table",
        "notes": [],
        "path": "lua_table.doc_h",
        "type": "Defold Lua"
    }
}