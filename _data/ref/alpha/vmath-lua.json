{
    "elements": [
        {
            "brief": "clamp input value in range [min, max] and return clamped value",
            "description": "Clamp input value to be in range of [min, max]. In case if input value has vector3|vector4 type\nreturn new vector3|vector4 with clamped value at every vector's element.\nMin/max arguments can be vector3|vector4. In that case clamp excuted per every vector's element",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">value1</span> <span class=\"o\">=</span> <span class=\"mi\">56</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">value1</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"mi\">134</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">89</span>\n<span class=\"kd\">local</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">min_v</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span> <span class=\"n\">min_v</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.clamp",
            "notes": [],
            "parameters": [
                {
                    "doc": "Input value or vector of values",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "number",
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "Min value(s) border",
                    "is_optional": "False",
                    "name": "min",
                    "types": [
                        "number",
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "Max value(s) border",
                    "is_optional": "False",
                    "name": "max",
                    "types": [
                        "number",
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Clamped value or vector",
                    "name": "clamped_value",
                    "types": [
                        "number",
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the conjugate of a quaternion",
            "description": "Calculates the conjugate of a quaternion. The result is a\nquaternion with the same magnitudes but with the sign of\nthe imaginary (vector) parts changed:\n<code>q<super>*</super> = [w, -v]</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">quat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">conj</span><span class=\"p\">(</span><span class=\"n\">quat</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.quat(-1, -2, -3, 4)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.conj",
            "notes": [],
            "parameters": [
                {
                    "doc": "quaternion of which to calculate the conjugate",
                    "is_optional": "False",
                    "name": "q1",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the conjugate",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the cross-product of two vectors",
            "description": "Given two linearly independent vectors P and Q, the cross product,\nP &#x00D7; Q, is a vector that is perpendicular to both P and Q and\ntherefore normal to the plane containing them.\nIf the two vectors have the same direction (or have the exact\nopposite direction from one another, i.e. are not linearly independent)\nor if either one has zero length, then their cross product is zero.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">cross</span><span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">,</span> <span class=\"n\">vec2</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(0, 0, 1)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec3</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">cross</span><span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">,</span> <span class=\"n\">vec3</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(0, -0, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.cross",
            "notes": [],
            "parameters": [
                {
                    "doc": "first vector",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "second vector",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "a new vector representing the cross product",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the dot-product of two vectors",
            "description": "The returned value is a scalar defined as:\n<code>P &#x22C5; Q = |P| |Q| cos &#x03B8;</code>\nwhere &#x03B8; is the angle between the vectors P and Q.\n<ul>\n<li>If the dot product is positive then the angle between the vectors is below 90 degrees.</li>\n<li>If the dot product is zero the vectors are perpendicular (at right-angles to each other).</li>\n<li>If the dot product is negative then the angle between the vectors is more than 90 degrees.</li>\n</ul>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">if</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">vector1</span><span class=\"p\">,</span> <span class=\"n\">vector2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- The two vectors are perpendicular (at right-angles to each other)</span>\n    <span class=\"p\">...</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.dot",
            "notes": [],
            "parameters": [
                {
                    "doc": "first vector",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "second vector",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "dot product",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "converts euler angles into a quaternion",
            "description": "Converts euler angles (x, y, z) in degrees into a quaternion\nThe error is guaranteed to be less than 0.001.\nIf the first argument is vector3, its values are used as x, y, z angles.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">euler_to_quat</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.quat(0.27059805393219, 0.27059805393219, 0.65328145027161, 0.65328145027161)</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">euler_to_quat</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.quat(0, 0, 0.70710676908493, 0.70710676908493)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.euler_to_quat",
            "notes": [],
            "parameters": [
                {
                    "doc": "rotation around x-axis in degrees or vector3 with euler angles in degrees",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "number",
                        "vector3"
                    ]
                },
                {
                    "doc": "rotation around y-axis in degrees",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "rotation around z-axis in degrees",
                    "is_optional": "False",
                    "name": "z",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion describing an equivalent rotation (231 (YZX) rotation sequence)",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the inverse matrix.",
            "description": "The resulting matrix is the inverse of the supplied matrix.\n<span class=\"icon-attention\"></span> For ortho-normal matrices, e.g. regular object transformation,\nuse <code>vmath.ortho_inv()</code> instead.\nThe specialized inverse for ortho-normalized matrices is much faster\nthan the general inverse.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">mat1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">mat1</span><span class=\"p\">)</span>\n<span class=\"c1\">-- M * inv(M) = identity matrix</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat1</span> <span class=\"o\">*</span> <span class=\"n\">mat2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.inv",
            "notes": [],
            "parameters": [
                {
                    "doc": "matrix to invert",
                    "is_optional": "False",
                    "name": "m1",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "inverse of the supplied matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the length of a vector or quaternion",
            "description": "Returns the length of the supplied vector or quaternion.\nIf you are comparing the lengths of vectors or quaternions, you should compare\nthe length squared instead as it is slightly more efficient to calculate\n(it eliminates a square root calculation).",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">if</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">velocity</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_velocity</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- The speed (velocity vector) is below max.</span>\n\n    <span class=\"c1\">-- TODO: max_velocity can be expressed as squared</span>\n    <span class=\"c1\">-- so we can compare with length_sqr() instead.</span>\n    <span class=\"p\">...</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.length",
            "notes": [],
            "parameters": [
                {
                    "doc": "value of which to calculate the length",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "vector3",
                        "vector4",
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "length",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the squared length of a vector or quaternion",
            "description": "Returns the squared length of the supplied vector or quaternion.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">if</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">length_sqr</span><span class=\"p\">(</span><span class=\"n\">vector1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">length_sqr</span><span class=\"p\">(</span><span class=\"n\">vector2</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- Vector 1 has less magnitude than vector 2</span>\n    <span class=\"p\">...</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.length_sqr",
            "notes": [],
            "parameters": [
                {
                    "doc": "value of which to calculate the squared length",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "vector3",
                        "vector4",
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "squared length",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "lerps between two vectors",
            "description": "Linearly interpolate between two vectors. The function\ntreats the vectors as positions and interpolates between\nthe positions in a straight line. Lerp is useful to describe\ntransitions from one place to another over time.\n<span class=\"icon-attention\"></span> The function does not clamp t between 0 and 1.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">dt</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n        <span class=\"kd\">local</span> <span class=\"n\">startpos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">endpos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">lerp</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">startpos</span><span class=\"p\">,</span> <span class=\"n\">endpos</span><span class=\"p\">)</span>\n        <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"s2\">&quot;go&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.lerp",
            "notes": [],
            "parameters": [
                {
                    "doc": "interpolation parameter, 0-1",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "vector to lerp from",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "vector to lerp to",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the lerped vector",
                    "name": "v",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "lerps between two quaternions",
            "description": "Linearly interpolate between two quaternions. Linear\ninterpolation of rotations are only useful for small\nrotations. For interpolations of arbitrary rotations,\n<a href=\"/ref/vmath#vmath.slerp\">vmath.slerp</a> yields much better results.\n<span class=\"icon-attention\"></span> The function does not clamp t between 0 and 1.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">dt</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n        <span class=\"kd\">local</span> <span class=\"n\">startrot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">endrot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">lerp</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">startrot</span><span class=\"p\">,</span> <span class=\"n\">endrot</span><span class=\"p\">)</span>\n        <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_rotation</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"s2\">&quot;go&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.lerp",
            "notes": [],
            "parameters": [
                {
                    "doc": "interpolation parameter, 0-1",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "quaternion to lerp from",
                    "is_optional": "False",
                    "name": "q1",
                    "types": [
                        "quaternion"
                    ]
                },
                {
                    "doc": "quaternion to lerp to",
                    "is_optional": "False",
                    "name": "q2",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the lerped quaternion",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "lerps between two numbers",
            "description": "Linearly interpolate between two values. Lerp is useful\nto describe transitions from one value to another over time.\n<span class=\"icon-attention\"></span> The function does not clamp t between 0 and 1.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">dt</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n        <span class=\"kd\">local</span> <span class=\"n\">startx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"kd\">local</span> <span class=\"n\">endx</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n        <span class=\"kd\">local</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">lerp</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">startx</span><span class=\"p\">,</span> <span class=\"n\">endx</span><span class=\"p\">)</span>\n        <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"s2\">&quot;go&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.lerp",
            "notes": [],
            "parameters": [
                {
                    "doc": "interpolation parameter, 0-1",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "number to lerp from",
                    "is_optional": "False",
                    "name": "n1",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "number to lerp to",
                    "is_optional": "False",
                    "name": "n2",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the lerped number",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new identity matrix",
            "description": "The resulting identity matrix describes a transform with\nno translation or rotation.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</span>\n<span class=\"c1\">-- get column 0:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">.</span><span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(1, 0, 0, 0)</span>\n<span class=\"c1\">-- get the value in row 3 and column 2:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span><span class=\"p\">.</span><span class=\"n\">m32</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; 0</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "identity matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new matrix from another existing matrix",
            "description": "Creates a new matrix with all components set to the\ncorresponding values from the supplied matrix. I.e.\nthe function creates a copy of the given matrix.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">mat1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_x</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4</span><span class=\"p\">(</span><span class=\"n\">mat1</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"n\">mat1</span> <span class=\"o\">==</span> <span class=\"n\">mat2</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- yes, they are equal</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(1, 0, 0, 0, 0, -1, 8.7422776573476e-08, 0, 0, -8.7422776573476e-08, -1, 0, 0, 0, 0, 1)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4",
            "notes": [],
            "parameters": [
                {
                    "doc": "existing matrix",
                    "is_optional": "False",
                    "name": "m1",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix which is a copy of the specified matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a matrix from an axis and an angle",
            "description": "The resulting matrix describes a rotation around the axis by the specified angle.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">axis</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">-- z-axis</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_axis_angle</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span> <span class=\"o\">*</span> <span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(-0.99999994039536, -1.0000001192093, 0, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_axis_angle",
            "notes": [],
            "parameters": [
                {
                    "doc": "axis",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "angle in radians",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix represented by axis and angle",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new matrix4 from translation, rotation and scale",
            "description": "Creates a new matrix constructed from separate\ntranslation vector, roation quaternion and scale vector",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">quat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_compose</span><span class=\"p\">(</span><span class=\"n\">translation</span><span class=\"p\">,</span> <span class=\"n\">quat</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(-25, -10, 11, 103, 28, -9.5, 2, -95, -10, 10, -4.5, 14, 0, 0, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_compose",
            "notes": [],
            "parameters": [
                {
                    "doc": "translation",
                    "is_optional": "False",
                    "name": "translation",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "rotation",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "quaternion"
                    ]
                },
                {
                    "doc": "scale",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new matrix4",
                    "name": "matrix",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a frustum matrix",
            "description": "Constructs a frustum matrix from the given values. The left, right,\ntop and bottom coordinates of the view cone are expressed as distances\nfrom the center of the near clipping plane. The near and far coordinates\nare expressed as distances from the tip of the view frustum cone.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Construct a projection frustum with a vertical and horizontal</span>\n<span class=\"c1\">-- FOV of 45 degrees. Useful for rendering a square view.</span>\n<span class=\"kd\">local</span> <span class=\"n\">proj</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_frustum</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_frustum",
            "notes": [],
            "parameters": [
                {
                    "doc": "coordinate for left clipping plane",
                    "is_optional": "False",
                    "name": "left",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for right clipping plane",
                    "is_optional": "False",
                    "name": "right",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for bottom clipping plane",
                    "is_optional": "False",
                    "name": "bottom",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for top clipping plane",
                    "is_optional": "False",
                    "name": "top",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for near clipping plane",
                    "is_optional": "False",
                    "name": "near",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for far clipping plane",
                    "is_optional": "False",
                    "name": "far",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix representing the frustum",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a look-at view matrix",
            "description": "The resulting matrix is created from the supplied look-at parameters.\nThis is useful for constructing a view matrix for a camera or\nrendering in general.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Set up a perspective camera at z 100 with 45 degrees (pi/2) FOV</span>\n<span class=\"c1\">-- Aspect ratio 4:3</span>\n<span class=\"kd\">local</span> <span class=\"n\">eye</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">look_at</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_look_at</span><span class=\"p\">(</span><span class=\"n\">eye</span><span class=\"p\">,</span> <span class=\"n\">look_at</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_view</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">proj</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_perspective</span><span class=\"p\">(</span><span class=\"mf\">3.141592</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_look_at",
            "notes": [],
            "parameters": [
                {
                    "doc": "eye position",
                    "is_optional": "False",
                    "name": "eye",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "look-at position",
                    "is_optional": "False",
                    "name": "look_at",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "up vector",
                    "is_optional": "False",
                    "name": "up",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "look-at matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates an orthographic projection matrix",
            "description": "Creates an orthographic projection matrix.\nThis is useful to construct a projection matrix for a camera or rendering in general.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Set up an orthographic projection based on the width and height</span>\n<span class=\"c1\">-- of the game window.</span>\n<span class=\"kd\">local</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">get_width</span><span class=\"p\">()</span>\n<span class=\"kd\">local</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">get_height</span><span class=\"p\">()</span>\n<span class=\"kd\">local</span> <span class=\"n\">proj</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_orthographic</span><span class=\"p\">(</span><span class=\"o\">-</span> <span class=\"n\">w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">h</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_orthographic",
            "notes": [],
            "parameters": [
                {
                    "doc": "coordinate for left clipping plane",
                    "is_optional": "False",
                    "name": "left",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for right clipping plane",
                    "is_optional": "False",
                    "name": "right",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for bottom clipping plane",
                    "is_optional": "False",
                    "name": "bottom",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for top clipping plane",
                    "is_optional": "False",
                    "name": "top",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for near clipping plane",
                    "is_optional": "False",
                    "name": "near",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for far clipping plane",
                    "is_optional": "False",
                    "name": "far",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "orthographic projection matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a perspective projection matrix",
            "description": "Creates a perspective projection matrix.\nThis is useful to construct a projection matrix for a camera or rendering in general.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Set up a perspective camera at z 100 with 45 degrees (pi/2) FOV</span>\n<span class=\"c1\">-- Aspect ratio 4:3</span>\n<span class=\"kd\">local</span> <span class=\"n\">eye</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">look_at</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_look_at</span><span class=\"p\">(</span><span class=\"n\">eye</span><span class=\"p\">,</span> <span class=\"n\">look_at</span><span class=\"p\">,</span> <span class=\"n\">up</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_view</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">proj</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_perspective</span><span class=\"p\">(</span><span class=\"mf\">3.141592</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_projection</span><span class=\"p\">(</span><span class=\"n\">proj</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_perspective",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle of the full vertical field of view in radians",
                    "is_optional": "False",
                    "name": "fov",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "aspect ratio",
                    "is_optional": "False",
                    "name": "aspect",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for near clipping plane",
                    "is_optional": "False",
                    "name": "near",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "coordinate for far clipping plane",
                    "is_optional": "False",
                    "name": "far",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "perspective projection matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a matrix from a quaternion",
            "description": "The resulting matrix describes the same rotation as the quaternion, but does not have any translation (also like the quaternion).",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">quat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_quat</span><span class=\"p\">(</span><span class=\"n\">quat</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span> <span class=\"o\">*</span> <span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4_frustum(-1, 1, -1, 1, 1, 1000)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_quat",
            "notes": [],
            "parameters": [
                {
                    "doc": "quaternion to create matrix from",
                    "is_optional": "False",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix represented by quaternion",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a matrix from rotation around x-axis",
            "description": "The resulting matrix describes a rotation around the x-axis\nby the specified angle.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_x</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span> <span class=\"o\">*</span> <span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(1, -1, -8.7422776573476e-08, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_rotation_x",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle in radians around x-axis",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix from rotation around x-axis",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a matrix from rotation around y-axis",
            "description": "The resulting matrix describes a rotation around the y-axis\nby the specified angle.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_y</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span> <span class=\"o\">*</span> <span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(-1, 1, 8.7422776573476e-08, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_rotation_y",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle in radians around y-axis",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix from rotation around y-axis",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a matrix from rotation around z-axis",
            "description": "The resulting matrix describes a rotation around the z-axis\nby the specified angle.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat</span> <span class=\"o\">*</span> <span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(-0.99999994039536, -1.0000001192093, 0, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_rotation_z",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle in radians around z-axis",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix from rotation around z-axis",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new matrix4 from scale vector",
            "description": "Creates a new matrix constructed from scale vector",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_scale</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_scale",
            "notes": [],
            "parameters": [
                {
                    "doc": "scale",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new matrix4",
                    "name": "matrix",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new matrix4 from uniform scale",
            "description": "creates a new matrix4 from uniform scale",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_scale</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_scale",
            "notes": [],
            "parameters": [
                {
                    "doc": "scale",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new matrix4",
                    "name": "matrix",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new matrix4 from three scale components",
            "description": "Creates a new matrix4 from three scale components",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_scale</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_scale",
            "notes": [],
            "parameters": [
                {
                    "doc": "scale along X axis",
                    "is_optional": "False",
                    "name": "scale_x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "sclae along Y axis",
                    "is_optional": "False",
                    "name": "scale_y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "scale along Z asis",
                    "is_optional": "False",
                    "name": "scale_z",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new matrix4",
                    "name": "matrix",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a translation matrix from a position vector",
            "description": "The resulting matrix describes a translation of a point\nin euclidean space.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Set camera view from custom view and translation matrices</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat_trans</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_translation</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat_view</span>  <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_y</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">3.141592</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">render</span><span class=\"p\">.</span><span class=\"n\">set_view</span><span class=\"p\">(</span><span class=\"n\">mat_view</span> <span class=\"o\">*</span> <span class=\"n\">mat_trans</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.matrix4_translation",
            "notes": [],
            "parameters": [
                {
                    "doc": "position vector to create matrix from",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "matrix from the supplied position vector",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "performs an element wise multiplication of two vectors",
            "description": "Performs an element wise multiplication between two vectors of the same type\nThe returned value is a vector defined as (e.g. for a vector3):\n<code>v = vmath.mul_per_elem(a, b) = vmath.vector3(a.x * b.x, a.y * b.y, a.z * b.z)</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">blend_color</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">mul_per_elem</span><span class=\"p\">(</span><span class=\"n\">color1</span><span class=\"p\">,</span> <span class=\"n\">color2</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.mul_per_elem",
            "notes": [],
            "parameters": [
                {
                    "doc": "first vector",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "second vector",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "multiplied vector",
                    "name": "v",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "normalizes a vector",
            "description": "Normalizes a vector, i.e. returns a new vector with the same\ndirection as the input vector, but with length 1.\n<span class=\"icon-attention\"></span> The length of the vector must be above 0, otherwise a\ndivision-by-zero will occur.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">norm_vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">norm_vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(0.26726123690605, 0.5345224738121, 0.80178368091583)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">norm_vec</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; 0.99999994039536</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.normalize",
            "notes": [],
            "parameters": [
                {
                    "doc": "vector to normalize",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3",
                        "vector4",
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new normalized vector",
                    "name": "v",
                    "types": [
                        "vector3",
                        "vector4",
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculates the inverse of an ortho-normal matrix.",
            "description": "The resulting matrix is the inverse of the supplied matrix.\nThe supplied matrix has to be an ortho-normal matrix, e.g.\ndescribe a regular object transformation.\n<span class=\"icon-attention\"></span> For matrices that are not ortho-normal\nuse the general inverse <code>vmath.inv()</code> instead.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">mat1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">matrix4_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">mat2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">ortho_inv</span><span class=\"p\">(</span><span class=\"n\">mat1</span><span class=\"p\">)</span>\n<span class=\"c1\">-- M * inv(M) = identity matrix</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mat1</span> <span class=\"o\">*</span> <span class=\"n\">mat2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.ortho_inv",
            "notes": [],
            "parameters": [
                {
                    "doc": "ortho-normalized matrix to invert",
                    "is_optional": "False",
                    "name": "m1",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "inverse of the supplied matrix",
                    "name": "m",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "projects a vector onto another vector",
            "description": "Calculates the extent the projection of the first vector onto the second.\nThe returned value is a scalar p defined as:\n<code>p = |P| cos &#x03B8; / |Q|</code>\nwhere &#x03B8; is the angle between the vectors P and Q.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">project</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; 0.5</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.project",
            "notes": [],
            "parameters": [
                {
                    "doc": "vector to be projected on the second",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "vector onto which the first will be projected, must not have zero length",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the projected extent of the first vector onto the second",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new identity quaternion",
            "description": "Creates a new identity quaternion. The identity\nquaternion is equal to:\n<code>vmath.quat(0, 0, 0, 1)</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">quat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">quat</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.quat(0, 0, 0, 1)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">quat</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; 1</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new identity quaternion",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new quaternion from another existing quaternion",
            "description": "Creates a new quaternion with all components set to the\ncorresponding values from the supplied quaternion. I.e.\nThis function creates a copy of the given quaternion.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">quat1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">quat2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">(</span><span class=\"n\">quat1</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"n\">quat1</span> <span class=\"o\">==</span> <span class=\"n\">quat2</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- yes, they are equal</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">quat2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.quat(1, 2, 3, 4)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat",
            "notes": [],
            "parameters": [
                {
                    "doc": "existing quaternion",
                    "is_optional": "False",
                    "name": "q1",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new quaternion",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new quaternion from its coordinates",
            "description": "Creates a new quaternion with the components set\naccording to the supplied parameter values.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">quat</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">quat</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.quat(1, 2, 3, 4)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat",
            "notes": [],
            "parameters": [
                {
                    "doc": "x coordinate",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "y coordinate",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "z coordinate",
                    "is_optional": "False",
                    "name": "z",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "w coordinate",
                    "is_optional": "False",
                    "name": "w",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new quaternion",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a quaternion to rotate around a unit vector",
            "description": "The resulting quaternion describes a rotation of <code>angle</code>\nradians around the axis described by the unit vector <code>v</code>.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">axis</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_axis_angle</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"p\">,</span> <span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(1, -1, -8.7422776573476e-08)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_axis_angle",
            "notes": [],
            "parameters": [
                {
                    "doc": "axis",
                    "is_optional": "False",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "angle",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion representing the axis-angle rotation",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a quaternion from three base unit vectors",
            "description": "The resulting quaternion describes the rotation from the\nidentity quaternion (no rotation) to the coordinate system\nas described by the given x, y and z base unit vectors.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Axis rotated 90 degrees around z.</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot_x</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot_y</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_basis</span><span class=\"p\">(</span><span class=\"n\">rot_x</span><span class=\"p\">,</span> <span class=\"n\">rot_y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_from_to</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"kr\">if</span> <span class=\"n\">rot1</span> <span class=\"o\">==</span> <span class=\"n\">rot2</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- These quaternions are equal!</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rot2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.quat(0, 0, -0.70710676908493, 0.70710676908493)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_basis",
            "notes": [],
            "parameters": [
                {
                    "doc": "x base vector",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "y base vector",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "z base vector",
                    "is_optional": "False",
                    "name": "z",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion representing the rotation of the specified base vectors",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a quaternion to rotate between two unit vectors",
            "description": "The resulting quaternion describes the rotation that,\nif applied to the first vector, would rotate the first\nvector to the second. The two vectors must be unit\nvectors (of length 1).\n<span class=\"icon-attention\"></span> The result is undefined if the two vectors point in opposite directions",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_from_to</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(0, 0.99999994039536, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_from_to",
            "notes": [],
            "parameters": [
                {
                    "doc": "first unit vector, before rotation",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "second unit vector, after rotation",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion representing the rotation from first to second vector",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new quaternion from matrix4",
            "description": "Creates a new quaternion with the components set\naccording to the supplied parameter values.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "vmath.quat_matrix4",
            "notes": [],
            "parameters": [
                {
                    "doc": "source matrix4",
                    "is_optional": "False",
                    "name": "matrix",
                    "types": [
                        "matrix4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new quaternion",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a quaternion from rotation around x-axis",
            "description": "The resulting quaternion describes a rotation of <code>angle</code>\nradians around the x-axis.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_x</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(1, -1, -8.7422776573476e-08)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_rotation_x",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle in radians around x-axis",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion representing the rotation around the x-axis",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a quaternion from rotation around y-axis",
            "description": "The resulting quaternion describes a rotation of <code>angle</code>\nradians around the y-axis.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_y</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(-1, 1, 8.7422776573476e-08)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_rotation_y",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle in radians around y-axis",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion representing the rotation around the y-axis",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a quaternion from rotation around z-axis",
            "description": "The resulting quaternion describes a rotation of <code>angle</code>\nradians around the z-axis.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(-0.99999988079071, -1, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_rotation_z",
            "notes": [],
            "parameters": [
                {
                    "doc": "angle in radians around z-axis",
                    "is_optional": "False",
                    "name": "angle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "quaternion representing the rotation around the z-axis",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "converts a quaternion into euler angles",
            "description": "Converts a quaternion into euler angles (r0, r1, r2), based on YZX rotation order.\nTo handle gimbal lock (singularity at r1 ~ +/- 90 degrees), the cut off is at r0 = +/- 88.85 degrees, which snaps to +/- 90.\nThe provided quaternion is expected to be normalized.\nThe error is guaranteed to be less than +/- 0.02 degrees",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"nb\">math.rad</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_to_euler</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; 0 0 90</span>\n\n<span class=\"kd\">local</span> <span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_y</span><span class=\"p\">(</span><span class=\"nb\">math.rad</span><span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"nb\">math.rad</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">))</span>\n<span class=\"kd\">local</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_to_euler</span><span class=\"p\">(</span><span class=\"n\">q2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(0, 45, 90)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.quat_to_euler",
            "notes": [],
            "parameters": [
                {
                    "doc": "source quaternion",
                    "is_optional": "False",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "euler angle x in degrees",
                    "name": "x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "euler angle y in degrees",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "euler angle z in degrees",
                    "name": "z",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "rotates a vector by a quaternion",
            "description": "Returns a new vector from the supplied vector that is\nrotated by the rotation described by the supplied\nquaternion.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592563</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(-1.0000002384186, -0.99999988079071, 0)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.rotate",
            "notes": [],
            "parameters": [
                {
                    "doc": "quaternion",
                    "is_optional": "False",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                },
                {
                    "doc": "vector to rotate",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the rotated vector",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "slerps between two vectors",
            "description": "Spherically interpolates between two vectors. The difference to\nlerp is that slerp treats the vectors as directions instead of\npositions in space.\nThe direction of the returned vector is interpolated by the angle\nand the magnitude is interpolated between the magnitudes of the\nfrom and to vectors.\n<span class=\"icon-attention\"></span> Slerp is computationally more expensive than lerp.\nThe function does not clamp t between 0 and 1.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">dt</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n        <span class=\"kd\">local</span> <span class=\"n\">startpos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">endpos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">slerp</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">startpos</span><span class=\"p\">,</span> <span class=\"n\">endpos</span><span class=\"p\">)</span>\n        <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_position</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"s2\">&quot;go&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.slerp",
            "notes": [],
            "parameters": [
                {
                    "doc": "interpolation parameter, 0-1",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "vector to slerp from",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "vector to slerp to",
                    "is_optional": "False",
                    "name": "v2",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the slerped vector",
                    "name": "v",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "slerps between two quaternions",
            "description": "Slerp travels the torque-minimal path maintaining constant\nvelocity, which means it travels along the straightest path along\nthe rounded surface of a sphere. Slerp is useful for interpolation\nof rotations.\nSlerp travels the torque-minimal path, which means it travels\nalong the straightest path the rounded surface of a sphere.\n<span class=\"icon-attention\"></span> The function does not clamp t between 0 and 1.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">dt</span>\n    <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n        <span class=\"kd\">local</span> <span class=\"n\">startrot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">endrot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat_rotation_z</span><span class=\"p\">(</span><span class=\"mf\">3.141592653</span><span class=\"p\">)</span>\n        <span class=\"kd\">local</span> <span class=\"n\">rot</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">slerp</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">startrot</span><span class=\"p\">,</span> <span class=\"n\">endrot</span><span class=\"p\">)</span>\n        <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set_rotation</span><span class=\"p\">(</span><span class=\"n\">rot</span><span class=\"p\">,</span> <span class=\"s2\">&quot;go&quot;</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.slerp",
            "notes": [],
            "parameters": [
                {
                    "doc": "interpolation parameter, 0-1",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "quaternion to slerp from",
                    "is_optional": "False",
                    "name": "q1",
                    "types": [
                        "quaternion"
                    ]
                },
                {
                    "doc": "quaternion to slerp to",
                    "is_optional": "False",
                    "name": "q2",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the slerped quaternion",
                    "name": "q",
                    "types": [
                        "quaternion"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a new vector from a table of values",
            "description": "Creates a vector of arbitrary size. The vector is initialized\nwith numeric values from a table.\n<span class=\"icon-attention\"></span> The table values are converted to floating point\nvalues. If a value cannot be converted, a 0 is stored in that\nvalue position in the vector.",
            "error": "",
            "examples": "How to create a vector with custom data to be used for animation easing:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector (size: 3)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"c1\">--&gt; 0.5</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector",
            "notes": [],
            "parameters": [
                {
                    "doc": "table of numbers",
                    "is_optional": "False",
                    "name": "t",
                    "types": [
                        "table"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new zero vector",
            "description": "Creates a new zero vector with all components set to 0.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">()</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(0, 0, 0)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; 0</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector3",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new zero vector",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new vector from scalar value",
            "description": "Creates a new vector with all components set to the\nsupplied scalar value.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(1, 1, 1)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; 1</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "scalar value to splat",
                    "is_optional": "False",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new vector from another existing vector",
            "description": "Creates a new vector with all components set to the\ncorresponding values from the supplied vector. I.e.\nThis function creates a copy of the given vector.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vec2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"n\">vec1</span> <span class=\"o\">==</span> <span class=\"n\">vec2</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- yes, they are equal</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(1, 1, 1)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "existing vector",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new vector from its coordinates",
            "description": "Creates a new vector with the components set to the\nsupplied values.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(1, 2, 3)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(-1, -2, -3)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector3(2, 4, 6)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span> <span class=\"o\">+</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(3, 4, 5)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span> <span class=\"o\">-</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector3(-1, 0, 1)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector3",
            "notes": [],
            "parameters": [
                {
                    "doc": "x coordinate",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "y coordinate",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "z coordinate",
                    "is_optional": "False",
                    "name": "z",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new zero vector",
            "description": "Creates a new zero vector with all components set to 0.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(0, 0, 0, 0)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; 0</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector4",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new zero vector",
                    "name": "v",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new vector from scalar value",
            "description": "Creates a new vector with all components set to the\nsupplied scalar value.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(1, 1, 1, 1)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; 1</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "scalar value to splat",
                    "is_optional": "False",
                    "name": "n",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new vector from another existing vector",
            "description": "Creates a new vector with all components set to the\ncorresponding values from the supplied vector. I.e.\nThis function creates a copy of the given vector.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vect1</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">vect2</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"n\">vec1</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"n\">vec1</span> <span class=\"o\">==</span> <span class=\"n\">vec2</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- yes, they are equal</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(1, 1, 1, 1)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "existing vector",
                    "is_optional": "False",
                    "name": "v1",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "creates a new vector from its coordinates",
            "description": "Creates a new vector with the components set to the\nsupplied values.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(1, 2, 3, 4)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(-1, -2, -3, -4)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\">--&gt; vmath.vector4(2, 4, 6, 8)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span> <span class=\"o\">+</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector4(3, 4, 5, 6)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vec</span> <span class=\"o\">-</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector4</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">))</span> <span class=\"c1\">--&gt; vmath.vector4(-1, 0, 1, 2)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "vmath.vector4",
            "notes": [],
            "parameters": [
                {
                    "doc": "x coordinate",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "y coordinate",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "z coordinate",
                    "is_optional": "False",
                    "name": "z",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "w coordinate",
                    "is_optional": "False",
                    "name": "w",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "new vector",
                    "name": "v",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Vector math API documentation",
        "description": "Functions for mathematical operations on vectors, matrices and quaternions.\n\n- The vector types (`vmath.vector3` and `vmath.vector4`) supports addition and subtraction\n  with vectors of the same type. Vectors can be negated and multiplied (scaled) or divided by numbers.\n- The quaternion type (`vmath.quat`) supports multiplication with other quaternions.\n- The matrix type (`vmath.matrix4`) can be multiplied with numbers, other matrices\n  and `vmath.vector4` values.\n- All types performs equality comparison by each component value.\n\nThe following components are available for the various types:\n\nvector3\n: `x`, `y` and `z`. Example: `v.y`\n\nvector4\n: `x`, `y`, `z`, and `w`. Example: `v.w`\n\nquaternion\n: `x`, `y`, `z`, and `w`. Example: `q.w`\n\nmatrix4\n: `m00` to `m33` where the first number is the row (starting from 0) and the second\nnumber is the column. Columns can be accessed with `c0` to `c3`, returning a `vector4`.\nExample: `m.m21` which is equal to `m.c1.z`\n\nvector\n: indexed by number 1 to the vector length. Example: `v[3]`",
        "description_html": "<p>Functions for mathematical operations on vectors, matrices and quaternions.</p>\n<ul>\n<li>The vector types (<code>vmath.vector3</code> and <code>vmath.vector4</code>) supports addition and subtraction\n  with vectors of the same type. Vectors can be negated and multiplied (scaled) or divided by numbers.</li>\n<li>The quaternion type (<code>vmath.quat</code>) supports multiplication with other quaternions.</li>\n<li>The matrix type (<code>vmath.matrix4</code>) can be multiplied with numbers, other matrices\n  and <code>vmath.vector4</code> values.</li>\n<li>All types performs equality comparison by each component value.</li>\n</ul>\n<p>The following components are available for the various types:</p>\n<dl>\n<dt>vector3</dt>\n<dd><code>x</code>, <code>y</code> and <code>z</code>. Example: <code>v.y</code></dd>\n<dt>vector4</dt>\n<dd><code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>. Example: <code>v.w</code></dd>\n<dt>quaternion</dt>\n<dd><code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code>. Example: <code>q.w</code></dd>\n<dt>matrix4</dt>\n<dd><code>m00</code> to <code>m33</code> where the first number is the row (starting from 0) and the second\nnumber is the column. Columns can be accessed with <code>c0</code> to <code>c3</code>, returning a <code>vector4</code>.\nExample: <code>m.m21</code> which is equal to <code>m.c1.z</code></dd>\n<dt>vector</dt>\n<dd>indexed by number 1 to the vector length. Example: <code>v[3]</code></dd>\n</dl>",
        "file": "script_vmath.cpp",
        "include": "engine/script/src/script_vmath.cpp",
        "language": "Lua",
        "name": "Vector math",
        "namespace": "vmath",
        "notes": [],
        "path": "engine/script/src/script_vmath.cpp",
        "type": "Defold Lua"
    }
}