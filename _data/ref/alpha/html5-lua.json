{
    "elements": [
        {
            "brief": "run JavaScript code, in the browser, from Lua",
            "description": "Executes the supplied string as JavaScript inside the browser.\nA call to this function is blocking, the result is returned as-is, as a string.\n(Internally this will execute the string using the <code>eval()</code> JavaScript function.)",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">html5</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">&quot;10 + 20&quot;</span><span class=\"p\">)</span> <span class=\"c1\">-- returns the string &quot;30&quot;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">res_num</span> <span class=\"o\">=</span> <span class=\"nb\">tonumber</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"c1\">-- convert to number</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res_num</span> <span class=\"o\">-</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"c1\">-- prints 10</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "html5.run",
            "notes": [],
            "parameters": [
                {
                    "doc": "Javascript code to run",
                    "is_optional": "False",
                    "name": "code",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "result as string",
                    "name": "result",
                    "types": [
                        "string"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set a JavaScript interaction listener callback from lua",
            "description": "Set a JavaScript interaction listener callaback from lua that will be\ninvoked when a user interacts with the web page by clicking, touching or typing.\nThe callback can then call DOM restricted actions like requesting a pointer lock,\nor start playing sounds the first time the callback is invoked.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">on_interaction</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;on_interaction called&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">html5</span><span class=\"p\">.</span><span class=\"n\">set_interaction_listener</span><span class=\"p\">(</span><span class=\"kc\">nil</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">html5</span><span class=\"p\">.</span><span class=\"n\">set_interaction_listener</span><span class=\"p\">(</span><span class=\"n\">on_interaction</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "html5.set_interaction_listener",
            "notes": [],
            "parameters": [
                {
                    "doc": "The interaction callback. Pass an empty function or <code>nil</code> if you no longer wish to receive callbacks.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The calling script</dd>\n</dl>",
                    "is_optional": "False",
                    "name": "callback",
                    "types": [
                        "function(self)",
                        "nil"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "HTML5 API documentation",
        "description": "HTML5 platform specific functions.\n\n[icon:html5] The following functions are only available on HTML5 builds, the `html5.*` Lua namespace will not be available on other platforms.",
        "description_html": "<p>HTML5 platform specific functions.</p>\n<p>[icon:html5] The following functions are only available on HTML5 builds, the <code>html5.*</code> Lua namespace will not be available on other platforms.</p>",
        "file": "script_html5_js.cpp",
        "include": "engine/script/src/script_html5_js.cpp",
        "language": "Lua",
        "name": "HTML5",
        "namespace": "html5",
        "notes": [],
        "path": "engine/script/src/script_html5_js.cpp",
        "type": "Defold Lua"
    }
}