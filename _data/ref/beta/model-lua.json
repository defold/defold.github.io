{
    "elements": [
        {
            "brief": "<span class=\"type\">hash</span> model animation",
            "description": "The current animation set on the component. The type of the property is hash.",
            "error": "",
            "examples": "How to read the current animation from a model component:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the current animation on component &quot;model&quot;</span>\n  <span class=\"kd\">local</span> <span class=\"n\">animation</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;animation&quot;</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">animation</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;run_left&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"c1\">-- Running left. Do something...</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "animation",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">number</span> model cursor",
            "description": "The normalized animation cursor. The type of the property is number.\n<span class=\"icon-attention\"></span> Please note that model events may not fire as expected when the cursor is manipulated directly.",
            "error": "",
            "examples": "How to get the normalized cursor value:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the cursor value on component &quot;model&quot;</span>\n  <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cursor&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nHow to animate the cursor from 0.0 to 1.0 using linear easing for 2.0 seconds:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the current value on component &quot;model&quot;</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cursor&quot;</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Animate the cursor value</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">animate</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cursor&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_FORWARD</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">EASING_LINEAR</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "cursor",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">hash</span> model material",
            "description": "The material used when rendering the model. The type of the property is hash.",
            "error": "",
            "examples": "How to set material using a script property (see <a href=\"/ref/resource#resource.material\">resource.material</a>):\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_material&quot;</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">material</span><span class=\"p\">(</span><span class=\"s2\">&quot;/material.material&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;material&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_material</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "material",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "cancel all animation on a model",
            "description": "Cancels all animation on a model component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "model.cancel",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model for which to cancel the animation",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the AABB of the whole model in local coordinate space",
            "description": "Get AABB of the whole model in local coordinate space.\nAABB information return as a table with <code>min</code> and <code>max</code> fields, where <code>min</code> and <code>max</code> has type <code>vmath.vector3</code>.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">get_aabb</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">get_aabb</span><span class=\"p\">(</span><span class=\"s2\">&quot;#empty&quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model.get_aabb",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A table containing AABB of the model. If model has no meshes - return vmath.vector3(0,0,0) for min and max fields.",
                    "name": "aabb",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "retrieve the game object corresponding to a model skeleton bone",
            "description": "Gets the id of the game object that corresponds to a model skeleton bone.\nThe returned game object can be used for parenting and transform queries.\nThis function has complexity <code>O(n)</code>, where <code>n</code> is the number of bones in the model skeleton.\nGame objects corresponding to a model skeleton bone can not be individually deleted.",
            "error": "",
            "examples": "The following examples assumes that the model component has id \"model\".\nHow to parent the game object of the calling script to the \"right_hand\" bone of the model in a player game object:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">get_go</span><span class=\"p\">(</span><span class=\"s2\">&quot;player#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;right_hand&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;set_parent&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">})</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model.get_go",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model to query",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "id of the corresponding bone",
                    "is_optional": "False",
                    "name": "bone_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "id of the game object",
                    "name": "id",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the AABB of all meshes",
            "description": "Get AABB of all meshes.\nAABB information return as a table with <code>min</code> and <code>max</code> fields, where <code>min</code> and <code>max</code> has type <code>vmath.vector3</code>.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">get_mesh_aabb</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sword&quot;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">},</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;Shield&quot;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">),</span> <span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model.get_mesh_aabb",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "A table containing info about all AABB in the format <hash(mesh_id), aabb_info>",
                    "name": "aabb",
                    "types": [
                        "table"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the enabled state of a mesh",
            "description": "Get the enabled state of a mesh",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">get_mesh_enabled</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Sword&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n       <span class=\"c1\">-- set properties specific for the sword</span>\n       <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">weapon_properties</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">weapons</span><span class=\"p\">[</span><span class=\"s2\">&quot;Sword&quot;</span><span class=\"p\">]</span>\n    <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model.get_mesh_enabled",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "the id of the mesh",
                    "is_optional": "False",
                    "name": "mesh_id",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the mesh is visible, false otherwise",
                    "name": "enabled",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "play an animation on a model",
            "description": "Plays an animation on a model component with specified playback\nmode and parameters.\nAn optional completion callback function can be provided that will be called when\nthe animation has completed playing. If no function is provided,\na <a href=\"#model_animation_done\">model_animation_done</a> message is sent to the script that started the animation.\n<span class=\"icon-attention\"></span> The callback is not called (or message sent) if the animation is\ncancelled with <a href=\"/ref/model#model.cancel\">model.cancel</a>. The callback is called (or message sent) only for\nanimations that play with the following playback modes:\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n</ul>",
            "error": "",
            "examples": "The following examples assumes that the model has id \"model\".\nHow to play the \"jump\" animation followed by the \"run\" animation:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">anim_done</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;model_animation_done&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">animation_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;jump&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n      <span class=\"c1\">-- open animation done, chain with &quot;run&quot;</span>\n      <span class=\"kd\">local</span> <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">blend_duration</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span> <span class=\"p\">}</span>\n      <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">play_anim</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;run&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_LOOP_FORWARD</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">anim_done</span><span class=\"p\">)</span>\n    <span class=\"kr\">end</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">)</span>\n    <span class=\"kd\">local</span> <span class=\"n\">play_properties</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">blend_duration</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span> <span class=\"p\">}</span>\n    <span class=\"c1\">-- first blend during 0.1 sec into the jump, then during 0.2 s into the run animation</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">play_anim</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s2\">&quot;jump&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_FORWARD</span><span class=\"p\">,</span> <span class=\"n\">play_properties</span><span class=\"p\">,</span> <span class=\"n\">anim_done</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model.play_anim",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model for which to play the animation",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "id of the animation to play",
                    "is_optional": "False",
                    "name": "anim_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "playback mode of the animation\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n<li><code>go.PLAYBACK_LOOP_FORWARD</code></li>\n<li><code>go.PLAYBACK_LOOP_BACKWARD</code></li>\n<li><code>go.PLAYBACK_LOOP_PINGPONG</code></li>\n</ul>",
                    "is_optional": "False",
                    "name": "playback",
                    "types": [
                        "constant"
                    ]
                },
                {
                    "doc": "optional table with properties\nPlay properties table:\n<dl>\n<dt><code>blend_duration</code></dt>\n<dd><span class=\"type\">number</span> Duration of a linear blend between the current and new animation.</dd>\n<dt><code>offset</code></dt>\n<dd><span class=\"type\">number</span> The normalized initial value of the animation cursor when the animation starts playing.</dd>\n<dt><code>playback_rate</code></dt>\n<dd><span class=\"type\">number</span> The rate with which the animation will be played. Must be positive.</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "play_properties",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "function to call when the animation has completed.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>message_id</code></dt>\n<dd><span class=\"type\">hash</span> The name of the completion message, <code>\"model_animation_done\"</code>.</dd>\n<dt><code>message</code></dt>\n<dd><span class=\"type\">table</span> Information about the completion:</dd>\n</dl>\n<ul>\n<li><span class=\"type\">hash</span> <code>animation_id</code> - the animation that was completed.</li>\n<li><span class=\"type\">constant</span> <code>playback</code> - the playback mode for the animation.</li>\n</ul>\n<dl>\n<dt><code>sender</code></dt>\n<dd><span class=\"type\">url</span> The invoker of the callback: the model component.</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "complete_function",
                    "types": [
                        "function(self, message_id, message, sender)"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "enable or disable a mesh",
            "description": "Enable or disable visibility of a mesh",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">set_mesh_enabled</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Sword&quot;</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"c1\">-- hide the sword</span>\n    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">set_mesh_enabled</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Axe&quot;</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">)</span>    <span class=\"c1\">-- show the axe</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model.set_mesh_enabled",
            "notes": [],
            "parameters": [
                {
                    "doc": "the model",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "the id of the mesh",
                    "is_optional": "False",
                    "name": "mesh_id",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "true if the mesh should be visible, false if it should be hideen",
                    "is_optional": "False",
                    "name": "enabled",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "reports the completion of a Model animation",
            "description": "This message is sent when a Model animation has finished playing back to the script\nthat started the animation.\n<span class=\"icon-attention\"></span> No message is sent if a completion callback function was supplied\nwhen the animation was started. No message is sent if the animation is cancelled with\nmodel.cancel(). This message is sent only for animations that play with\nthe following playback modes:\n<ul>\n<li><code>go.PLAYBACK_ONCE_FORWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_BACKWARD</code></li>\n<li><code>go.PLAYBACK_ONCE_PINGPONG</code></li>\n</ul>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">on_message</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">message_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;model_animation_done&quot;</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n    <span class=\"kr\">if</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">animation_id</span> <span class=\"o\">==</span> <span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s2\">&quot;run&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">playback</span> <span class=\"o\">==</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">PLAYBACK_ONCE_FORWARD</span> <span class=\"kr\">then</span>\n      <span class=\"c1\">-- The animation &quot;run&quot; has finished running forward.</span>\n    <span class=\"kr\">end</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "model_animation_done",
            "notes": [],
            "parameters": [
                {
                    "doc": "the id of the completed animation",
                    "is_optional": "False",
                    "name": "animation_id",
                    "types": [
                        "hash"
                    ]
                },
                {
                    "doc": "the playback mode of the completed animation",
                    "is_optional": "False",
                    "name": "playback",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MESSAGE"
        },
        {
            "brief": "<span class=\"type\">number</span> model playback_rate",
            "description": "The animation playback rate. A multiplier to the animation playback rate. The type of the property is number.",
            "error": "",
            "examples": "How to set the playback_rate on component \"model\" to play at double the current speed:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Get the current value on component &quot;model&quot;</span>\n  <span class=\"n\">playback_rate</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;playback_rate&quot;</span><span class=\"p\">)</span>\n  <span class=\"c1\">-- Set the playback_rate to double the previous value.</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;playback_rate&quot;</span><span class=\"p\">,</span> <span class=\"n\">playback_rate</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nThe playback_rate is a non-negative number, a negative value will be clamped to 0.",
            "language": "",
            "members": [],
            "name": "playback_rate",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        },
        {
            "brief": "<span class=\"type\">hash</span> model textureN where N is 0-7",
            "description": "The texture hash id of the model. Used for getting/setting model texture for unit 0-7",
            "error": "",
            "examples": "How to set texture using a script property (see <a href=\"/ref/resource#resource.texture\">resource.texture</a>):\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_texture&quot;</span><span class=\"p\">,</span> <span class=\"n\">texture</span><span class=\"p\">(</span><span class=\"s2\">&quot;/texture.png&quot;</span><span class=\"p\">))</span>\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">&quot;#model&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;texture0&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_texture</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nSee <a href=\"/ref/resource#resource.set_texture\">resource.set_texture</a> for an example on how to set the texture of an atlas.",
            "language": "",
            "members": [],
            "name": "textureN",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "PROPERTY"
        }
    ],
    "info": {
        "brief": "Model API documentation",
        "description": "Model API documentation",
        "description_html": "<p>Model API documentation</p>",
        "file": "model_ddf.proto",
        "include": "../../proto/gamesys/model_ddf.proto",
        "language": "Lua",
        "name": "Model",
        "namespace": "model",
        "notes": [],
        "path": "../../proto/gamesys/model_ddf.proto",
        "type": "Defold Lua"
    }
}