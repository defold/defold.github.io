{
    "elements": [
        {
            "brief": "Allocate stack memory context for safely reversing...",
            "description": "Allocate stack memory context for safely reversing hash values into strings",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_HASH_REVERSE_MEM",
            "notes": [],
            "parameters": [
                {
                    "doc": "The name of the dmAllocator struct",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The max size of the stack allocated context",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "size_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "dmhash_t type definition",
            "description": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"kt\">uint64_t</span><span class=\"w\"> </span><span class=\"n\">dmhash_t</span><span class=\"w\"></span>\n</code></pre></div>",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmhash_t",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Calculate 32-bit hash value from buffer",
            "description": "Calculate 32-bit hash value from buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashBuffer32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "const void*"
                    ]
                },
                {
                    "doc": "Length of buffer",
                    "is_optional": "False",
                    "name": "buffer_len",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash value",
                    "name": "hash",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate 64-bit hash value from buffer",
            "description": "calculate 64-bit hash value from buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashBuffer64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "const void*"
                    ]
                },
                {
                    "doc": "Length of buffer",
                    "is_optional": "False",
                    "name": "buffer_len",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash value",
                    "name": "hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Clone 32-bit incremental hash state",
            "description": "Clone 32-bit incremental hash state",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashClone32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState32*"
                    ]
                },
                {
                    "doc": "Source hash state",
                    "is_optional": "False",
                    "name": "source_hash_state",
                    "types": [
                        "HashState32*"
                    ]
                },
                {
                    "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH. Ignored if source state reverse hashing is disabled.",
                    "is_optional": "False",
                    "name": "reverse_hash",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Clone 64-bit incremental hash state",
            "description": "Clone 64-bit incremental hash state",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashClone64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState64*"
                    ]
                },
                {
                    "doc": "Source hash state",
                    "is_optional": "False",
                    "name": "source_hash_state",
                    "types": [
                        "HashState64*"
                    ]
                },
                {
                    "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH. Ignored if source state reverse hashing is disabled.",
                    "is_optional": "False",
                    "name": "reverse_hash",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Finalize incremental hashing and release associate...",
            "description": "Finalize incremental hashing and release associated resources",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashFinal32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState32*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the hash value",
                    "name": "hash",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Finalize incremental hashing and release associate...",
            "description": "Finalize incremental hashing and release associated resources",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashFinal64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState64*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The hash value",
                    "name": "hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Initialize hash-state for 32-bit incremental hashi...",
            "description": "Initialize hash-state for 32-bit incremental hashing",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashInit32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState32*"
                    ]
                },
                {
                    "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH",
                    "is_optional": "False",
                    "name": "reverse_hash",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Initialize hash-state for 64-bit incremental hashi...",
            "description": "Initialize hash-state for 64-bit incremental hashing",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashInit64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState64*"
                    ]
                },
                {
                    "doc": "true to enable reverse hashing of buffers up to ::DMHASH_MAX_REVERSE_LENGTH",
                    "is_optional": "False",
                    "name": "reverse_hash",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Release incremental hashing resources\nUsed to rele...",
            "description": "Release incremental hashing resources\nUsed to release assocciated resources for intermediate incremental hash states.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashRelease32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState32*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Release incremental hashing resources\nUsed to rele...",
            "description": "Release incremental hashing resources\nUsed to release assocciated resources for intermediate incremental hash states.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashRelease64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState64*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get string value from hash",
            "description": "Returns the original string used to produce a hash.\nAlways returns a null terminated string. Returns \"<unknown>\" if the original string wasn't found.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashReverseSafe32",
            "notes": [
                "Do not store this pointer"
            ],
            "parameters": [
                {
                    "doc": "hash value",
                    "is_optional": "False",
                    "name": "hash",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Original string value or \"<unknown>\" if it wasn't found.",
                    "name": "",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get string value from hash",
            "description": "Reverse hash lookup. Maps hash to original data. It is guaranteed that the returned\nbuffer is null-terminated. If the buffer contains a valid c-string\nit can safely be used in printf and friends.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashReverseSafe32",
            "notes": [
                "Do not store this pointer"
            ],
            "parameters": [
                {
                    "doc": "hash to lookup",
                    "is_optional": "False",
                    "name": "hash",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "original data length. Optional argument and NULL-pointer is accepted.",
                    "is_optional": "False",
                    "name": "length",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to buffer. 0 if no reverse exists or if reverse lookup is disabled",
                    "name": "",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get string value from hash",
            "description": "Returns the original string used to produce a hash.",
            "error": "",
            "examples": "Get the string representaiton of a hash value\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_HASH_REVERSE_MEM</span><span class=\"p\">(</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dmHashReverseSafe32Alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hash</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "dmHashReverseSafe32Alloc",
            "notes": [
                "This function is thread safe",
                "The pointer is valid during the scope of the allocator"
            ],
            "parameters": [
                {
                    "doc": "The reverse hash allocator",
                    "is_optional": "False",
                    "name": "allocator",
                    "types": [
                        "dmAllocator*"
                    ]
                },
                {
                    "doc": "hash value",
                    "is_optional": "False",
                    "name": "hash",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Original string value or \"<unknown:value>\" if it wasn't found,\n                           or \"<unknown>\" if the allocator failed to allocate more memory.\n                           Always returns a null terminated string.",
                    "name": "",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get string value from hash",
            "description": "Returns the original string used to produce a hash.\nAlways returns a null terminated string. Returns \"<unknown>\" if the original string wasn't found.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashReverseSafe64",
            "notes": [
                "Do not store this pointer"
            ],
            "parameters": [
                {
                    "doc": "hash value",
                    "is_optional": "False",
                    "name": "hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Original string value or \"<unknown>\" if it wasn't found.",
                    "name": "",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get string value from hash",
            "description": "Reverse hash lookup. Maps hash to original data. It is guaranteed that the returned\nbuffer is null-terminated. If the buffer contains a valid c-string\nit can safely be used in printf and friends.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashReverseSafe64",
            "notes": [
                "Do not store this pointer"
            ],
            "parameters": [
                {
                    "doc": "hash to lookup",
                    "is_optional": "False",
                    "name": "hash",
                    "types": [
                        "uint64_t"
                    ]
                },
                {
                    "doc": "original data length. Optional argument and NULL-pointer is accepted.",
                    "is_optional": "False",
                    "name": "length",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to buffer. 0 if no reverse exists or if reverse lookup is disabled",
                    "name": "",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get string value from hash",
            "description": "Returns the original string used to produce a hash.",
            "error": "",
            "examples": "Get the string representaiton of a hash value\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_HASH_REVERSE_MEM</span><span class=\"p\">(</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">reverse</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dmHashReverseSafe64Alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">hash_ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hash</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "dmHashReverseSafe64Alloc",
            "notes": [
                "This function is thread safe",
                "The pointer is valid during the scope of the allocator"
            ],
            "parameters": [
                {
                    "doc": "The reverse hash allocator",
                    "is_optional": "False",
                    "name": "allocator",
                    "types": [
                        "dmAllocator*"
                    ]
                },
                {
                    "doc": "hash value",
                    "is_optional": "False",
                    "name": "hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Original string value or \"<unknown:value>\" if it wasn't found,\n                           or \"<unknown>\" if the allocator failed to allocate more memory.\n                           Always returns a null terminated string.",
                    "name": "",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Calculate 32-bit hash value from string",
            "description": "Calculate 32-bit hash value from string",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashString32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Null terminated string",
                    "is_optional": "False",
                    "name": "string",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash value",
                    "name": "hash",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "calculate 64-bit hash value from string",
            "description": "calculate 64-bit hash value from string",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashString64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Null terminated string",
                    "is_optional": "False",
                    "name": "string",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "hash value",
                    "name": "hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Incremental hashing",
            "description": "Incremental hashing",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashUpdateBuffer32",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState32*"
                    ]
                },
                {
                    "doc": "Buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "const void*"
                    ]
                },
                {
                    "doc": "Length of buffer",
                    "is_optional": "False",
                    "name": "buffer_len",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Incremental hashing",
            "description": "Incremental hashing",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHashUpdateBuffer64",
            "notes": [],
            "parameters": [
                {
                    "doc": "Hash state",
                    "is_optional": "False",
                    "name": "hash_state",
                    "types": [
                        "HashState64*"
                    ]
                },
                {
                    "doc": "Buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "const void*"
                    ]
                },
                {
                    "doc": "Length of buffer",
                    "is_optional": "False",
                    "name": "buffer_len",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Hash state used for 32-bit incremental hashing",
            "description": "Hash state used for 32-bit incremental hashing",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HashState32",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Hash state used for 64-bit incremental hashing",
            "description": "Hash state used for 64-bit incremental hashing",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HashState64",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        }
    ],
    "info": {
        "brief": "SDK Hash API documentation",
        "description": "Hash functions.",
        "file": "dmsdk/dlib/hash.h",
        "language": "C++",
        "name": "Hash",
        "namespace": "Hash",
        "notes": [],
        "path": "dmsdk/dlib/hash.h",
        "type": "Defold C++"
    }
}