{
    "elements": [
        {
            "brief": "array back",
            "description": "Last element of the array",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Back",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "reference to the last element",
                    "name": "reference",
                    "types": [
                        "T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array back (const)",
            "description": "Last element of the array (const)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Back",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "const-reference to the last element",
                    "name": "reference",
                    "types": [
                        "const T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array begin",
            "description": "Pointer to the start of the backing storage",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Begin",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to start of memory",
                    "name": "pointer",
                    "types": [
                        "T*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array begin",
            "description": "Pointer to the start of the backing storage",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Begin",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to start of memory",
                    "name": "pointer",
                    "types": [
                        "const T*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "capacity of array",
            "description": "Capacity is currently allocated storage.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Capacity",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "array capacity",
                    "name": "number",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get number of elements in C array",
            "description": "get number of elements in C array",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_ARRAY_SIZE",
            "notes": [],
            "parameters": [
                {
                    "doc": "C array to count",
                    "is_optional": "False",
                    "name": "A",
                    "types": [
                        "T"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "of elements",
                    "name": "Number",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "Templatized array with bounds checking.",
            "description": "The backing storage is either auto-allocated (dynamically allocated) or user-allocated (supplied by user).\nWith exception of changing the size and capacity, all operations are guaranteed to be O(1).",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmArray",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [
                {
                    "doc": "Contained type, must obey memcpy semantics",
                    "name": "T",
                    "type": ""
                }
            ],
            "type": "CLASS"
        },
        {
            "brief": "constructor. empty auto-allocated memory",
            "description": "constructor. empty auto-allocated memory",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dmArray</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">Push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "dmArray",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "constructor. user-allocated memory",
            "description": "user-allocated array with initial size and capacity",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmArray",
            "notes": [],
            "parameters": [
                {
                    "doc": "User-allocated array to be used as storage.",
                    "is_optional": "False",
                    "name": "user_array",
                    "types": [
                        "T*"
                    ]
                },
                {
                    "doc": "Initial size",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "Initial capacity",
                    "is_optional": "False",
                    "name": "capacity",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set user-allocated memory",
            "description": "user-allocated array with initial size and capacity",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmArray",
            "notes": [],
            "parameters": [
                {
                    "doc": "User-allocated array to be used as storage.",
                    "is_optional": "False",
                    "name": "user_array",
                    "types": [
                        "T*"
                    ]
                },
                {
                    "doc": "Initial size",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "Initial capacity",
                    "is_optional": "False",
                    "name": "capacity",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "If false, the ownership is transferred to the dmArray",
                    "is_optional": "False",
                    "name": "user_allocated",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array empty",
            "description": "Check if the array is empty.\nThe array is empty when the size is zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Empty",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the array is empty",
                    "name": "boolean",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array end",
            "description": "Pointer to the end of the backing storage\nThe end is essentially outside of the used storage.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "End",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to end of memory",
                    "name": "pointer",
                    "types": [
                        "T*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array end",
            "description": "Pointer to the end of the backing storage\nThe end is essentially outside of the used storage.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "End",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "pointer to end of memory",
                    "name": "pointer",
                    "types": [
                        "const T*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array eraseswap",
            "description": "Remove the element at the specified index.\nThe removed element is replaced by the element at the end (if any), thus potentially altering the order.\nWhile operation changes the array size, it is guaranteed to be O(1).",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "EraseSwap",
            "notes": [],
            "parameters": [
                {
                    "doc": "index of the element to remove",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "reference to the new element at index",
                    "name": "reference",
                    "types": [
                        "T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array reference eraseswap",
            "description": "Remove the element by reference\nThe removed element is replaced by the element at the end (if any), thus potentially altering the order.\nWhile operation changes the array size, it is guaranteed to be O(1).",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "EraseSwapRef",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to the element to remove.",
                    "is_optional": "False",
                    "name": "element",
                    "types": [
                        "T&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "reference to the new referenced element",
                    "name": "reference",
                    "types": [
                        "T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array front",
            "description": "First element of the array",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Front",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "reference to the first element",
                    "name": "reference",
                    "types": [
                        "T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array front (const)",
            "description": "First element of the array (const)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Front",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "const-reference to the first element",
                    "name": "reference",
                    "types": [
                        "const T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array full",
            "description": "Check if the array is full.\nThe array is full when the size is equal to the capacity.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Full",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the array is full",
                    "name": "boolean",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "map a function on all values",
            "description": "map a function on all values",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Map",
            "notes": [],
            "parameters": [
                {
                    "doc": "function that will be called for each element",
                    "is_optional": "False",
                    "name": "fn",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "user defined context that will be passed in with each callback",
                    "is_optional": "False",
                    "name": "ctx",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array offset capacity",
            "description": "Relative change of capacity\nEquivalent to SetCapacity(Capacity() + offset).\nOnly allowed for auto-allocated arrays and will result in a new dynamic allocation followed by memcpy of the elements.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "OffsetCapacity",
            "notes": [],
            "parameters": [
                {
                    "doc": "relative amount of elements to change the capacity",
                    "is_optional": "False",
                    "name": "offset",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array operator[]",
            "description": "Retrieve an element by index",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "operator[]",
            "notes": [],
            "parameters": [
                {
                    "doc": "array index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "reference to the element at the specified index",
                    "name": "reference",
                    "types": [
                        "T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array operator[] (const)",
            "description": "Retrieve an element by index (const)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "operator[]",
            "notes": [],
            "parameters": [
                {
                    "doc": "array index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "const-reference to the element at the specified index",
                    "name": "reference",
                    "types": [
                        "const T&"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array pop",
            "description": "Remove the last element of the array\nOnly allowed when the size is larger than zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Pop",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array push",
            "description": "Add an element to the end of the array\nOnly allowed when the capacity is larger than size.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Push",
            "notes": [],
            "parameters": [
                {
                    "doc": "element element to add",
                    "is_optional": "False",
                    "name": "element",
                    "types": [
                        "const T&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array push array",
            "description": "Add an array of elements to the end of the array\nOnly allowed when the capacity is larger than size + count",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PushArray",
            "notes": [],
            "parameters": [
                {
                    "doc": "array of elements to add",
                    "is_optional": "False",
                    "name": "array",
                    "types": [
                        "const T*"
                    ]
                },
                {
                    "doc": "amount of elements in the array",
                    "is_optional": "False",
                    "name": "count",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "remaining size of array",
            "description": "Amount of additional elements that can be stored",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Remaining",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "amount of additional elements that can be stored",
                    "name": "number",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array set capacity",
            "description": "Set the capacity of the array.\nIf the size is less than the capacity, the array is truncated.\nIf it is larger, the array is extended.\nOnly allowed for auto-allocated arrays and will result in a new dynamic allocation followed by memcpy of the elements.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetCapacity",
            "notes": [],
            "parameters": [
                {
                    "doc": "capacity of the array",
                    "is_optional": "False",
                    "name": "capacity",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array set size",
            "description": "Set size of the array",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetSize",
            "notes": [],
            "parameters": [
                {
                    "doc": "size of the array, must be less or equal to the capacity",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "size of array",
            "description": "Size of the array in elements",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Size",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "array size",
                    "name": "number",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array swap",
            "description": "Swap the content of two arrays",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "Swap",
            "notes": [],
            "parameters": [
                {
                    "doc": "reference to array to swap content with",
                    "is_optional": "False",
                    "name": "rhs",
                    "types": [
                        "dmArray<T>&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "array destructor",
            "description": "Only frees memory when auto-allocated.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "~dmArray",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Templatized array",
        "description": "Templatized array with bounds checking.\n\nThe backing storage is either auto-allocated (dynamically allocated) or user-allocated (supplied by user).\nWith exception of changing the size and capacity, all operations are guaranteed to be O(1).\n\n```cpp\ndmArray<int> a;\na.SetCapacity(1);\na.Push(1);\nint b = a[0];\n```",
        "file": "dmsdk/dlib/array.h",
        "language": "C++",
        "name": "Array",
        "namespace": "Array",
        "notes": [],
        "path": "dmsdk/dlib/array.h",
        "type": "Defold C++"
    }
}