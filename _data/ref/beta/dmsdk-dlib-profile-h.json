{
    "elements": [
        {
            "brief": "add profile scope",
            "description": "Adds a profiling scope. Excluded by default in release builds.",
            "error": "",
            "examples": "Profile a scope\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_PROFILE</span><span class=\"p\">(</span><span class=\"s\">&quot;DoWork&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DoWork1</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DoWork2</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROFILE",
            "notes": [],
            "parameters": [
                {
                    "doc": "A name for the scope",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add dynamic profile scope",
            "description": "Adds a profiling scope. Excluded by default in release builds.\nAccepts a name cache value for performance.",
            "error": "",
            "examples": "Create a dynamic profiling scope\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_PROFILE_DYN</span><span class=\"p\">(</span><span class=\"n\">work</span><span class=\"o\">-&gt;</span><span class=\"n\">m_Name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">work</span><span class=\"o\">-&gt;</span><span class=\"n\">m_NameHash</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">work</span><span class=\"o\">-&gt;</span><span class=\"n\">DoWork</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROFILE_DYN",
            "notes": [],
            "parameters": [
                {
                    "doc": "The scope name",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The scope name hash value pointer. May be 0.",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "uint64_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "send text to the profiler",
            "description": "Send text to the profiler",
            "error": "",
            "examples": "Send a string to the profiler\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROFILE_TEXT</span><span class=\"p\">(</span><span class=\"s\">&quot;Some value: %d&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROFILE_TEXT",
            "notes": [
                "The max length of the text is DM_PROFILE_TEXT_LENGTH (1024)"
            ],
            "parameters": [
                {
                    "doc": "The format string",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The variable argument list",
                    "is_optional": "False",
                    "name": "a",
                    "types": [
                        "va_list"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add to float property",
            "description": "Add a value to float property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_ADD_F32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_ADD_F32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "float"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add to double property",
            "description": "Add a value to double property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_ADD_F64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_ADD_F64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "double"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add to int32_t property",
            "description": "Add a value to int32_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_ADD_S32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_ADD_S32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "int32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add to int64_t property",
            "description": "Add a value to int64_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_ADD_S64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_ADD_S64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "int64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add to uint32_t property",
            "description": "Add a value to uint32_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_ADD_U32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_ADD_U32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "add to uint64_t property",
            "description": "Add a value to uint64_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_ADD_U64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_ADD_U64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "bool property",
            "description": "Declare a property of type <code>bool</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_BOOL</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyBool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;true or false&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_BOOL",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "bool"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "Declare an extern property",
            "description": "Declare an extern property",
            "error": "",
            "examples": "Use a property declared elsewhere in the same library\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_EXTERN</span><span class=\"p\">(</span><span class=\"n\">rmtp_GameObject</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">DM_PROPERTY_U32</span><span class=\"p\">(</span><span class=\"n\">rmtp_ComponentsAnim</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;#&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_GameObject</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_EXTERN",
            "notes": [],
            "parameters": [
                {
                    "doc": "The symbol name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "float property",
            "description": "Declare a property of type <code>float</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_F32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;a value&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_F32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "double property",
            "description": "Declare a property of type <code>double</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_F64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;a value&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_F64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "double"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "Declare a property group",
            "description": "Declare a property group",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_GROUP</span><span class=\"p\">(</span><span class=\"n\">rmtp_GameObject</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;My Group&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_GROUP",
            "notes": [],
            "parameters": [
                {
                    "doc": "The group name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "pointer to parent property",
                    "is_optional": "False",
                    "name": "parent",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "reset property",
            "description": "Reset a property to its default value",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_RESET</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_RESET",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "int32_t property",
            "description": "Declare a property of type <code>int32_t</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_S32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;a value&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_S32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "int64_t property",
            "description": "Declare a property of type <code>int64_t</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_S64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;a value&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_S64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "int64_t"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set bool property",
            "description": "Set the value of a bool property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_BOOL</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyBool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_BOOL",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set float property",
            "description": "Set the value of a float property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_F32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_F32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "float"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set double property",
            "description": "Set the value of a double property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_F64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">1.5</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_F64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "double"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set int32_t property",
            "description": "Set the value of a int32_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_S32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_S32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "int32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set int64_t property",
            "description": "Set the value of a int64_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_S64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">-1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_S64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "int64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set uint32_t property",
            "description": "Set the value of a uint32_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_U32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_U32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set uint64_t property",
            "description": "Set the value of a uint64_t property",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_SET_U64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_SET_U64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "uint32_t property",
            "description": "Declare a property of type <code>uint32_t</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_U32</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;a value&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_U32",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "uint64_t property",
            "description": "Declare a property of type <code>uint64_t</code>",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_PROPERTY_U64</span><span class=\"p\">(</span><span class=\"n\">rmtp_MyValue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PROFILE_PROPERTY_FRAME_RESET</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;a value&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">rmtp_MyGroup</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_PROPERTY_U64",
            "notes": [],
            "parameters": [
                {
                    "doc": "The property symbol/name",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The default value",
                    "is_optional": "False",
                    "name": "default",
                    "types": [
                        "uint64_t"
                    ]
                },
                {
                    "doc": "The flags. Either <code>PROFILE_PROPERTY_NONE</code> or <code>PROFILE_PROPERTY_FRAME_RESET</code>. <code>PROFILE_PROPERTY_FRAME_RESET</code> makes the value reset each frame.",
                    "is_optional": "False",
                    "name": "flags",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The description",
                    "is_optional": "False",
                    "name": "desc",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "The parent group. May be 0.",
                    "is_optional": "False",
                    "name": "group",
                    "types": [
                        "ProfileIdx*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "Handle to a an active profile frame",
            "description": "Handle to a an active profile frame",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HProfile",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Index constant to mark a a property as invalid",
            "description": "Index constant to mark a a property as invalid",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PROFILE_PROPERTY_INVALID_IDX",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Finalize the profiling system",
            "description": "Finalize the profiling system",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileFinalize",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Begin profiling, eg start of frame",
            "description": "Begin profiling, eg start of frame",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileFrameBegin",
            "notes": [
                "NULL is returned if profiling is disabled"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The current profiling context. Must be released by #EndFrame",
                    "name": "context",
                    "types": [
                        "HProfile"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Release profile returned by #ProfileFrameBegin",
            "description": "Release profile returned by #ProfileFrameBegin",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileFrameEnd",
            "notes": [],
            "parameters": [
                {
                    "doc": "Profile to release",
                    "is_optional": "False",
                    "name": "profile",
                    "types": [
                        "HProfile"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Index type to hold internal references of samplers and properties",
            "description": "Index type to hold internal references of samplers and properties",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileIdx",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Initialize the profiling system",
            "description": "Initialize the profiling system",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileInitialize",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Finalize the profiling system",
            "description": "Finalize the profiling system",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileIsInitialized",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Returns non zero if the profiler is initialized",
                    "name": "initialized",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Structure for registering a profile listener",
            "description": "Structure for registering a profile listener",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileListener",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Log text via the registered profilers",
            "description": "Log text via the registered profilers",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileLogText",
            "notes": [],
            "parameters": [
                {
                    "doc": "Name of the scope",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Arguments for internal logging function",
                    "is_optional": "False",
                    "name": "...",
                    "types": [
                        ""
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set of bit flags to be used when declaring propertis",
            "description": "Set of bit flags to be used when declaring propertis",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_NONE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_FRAME_RESET",
                    "type": ""
                }
            ],
            "name": "ProfilePropertyFlags",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Enum to describe type of a property",
            "description": "Enum to describe type of a property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_GROUP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_BOOL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_S32",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_U32",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_F32",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_S64",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_U64",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PROFILE_PROPERTY_TYPE_F64",
                    "type": ""
                }
            ],
            "name": "ProfilePropertyType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Union to hold a property value",
            "description": "Union to hold a property value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfilePropertyValue",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Register a new profiler.",
            "description": "Register a new profiler. Can be done after the profiling has started.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileRegisterProfiler",
            "notes": [],
            "parameters": [
                {
                    "doc": "Name of the profiler",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Start a new profile scope",
            "description": "Start a new profile scope",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileScopeBegin",
            "notes": [],
            "parameters": [
                {
                    "doc": "Name of the scope",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Hashed name of the scope",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "End the last added scope",
            "description": "End the last added scope",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileScopeEnd",
            "notes": [],
            "parameters": [
                {
                    "doc": "Name of the scope",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Hashed name of the scope",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the current thread name to each registered pro...",
            "description": "Set the current thread name to each registered profiler",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileSetThreadName",
            "notes": [],
            "parameters": [
                {
                    "doc": "Name of the thread",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Unregister a profiler",
            "description": "Unregister a profiler",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ProfileUnregisterProfiler",
            "notes": [],
            "parameters": [
                {
                    "doc": "Name of the profiler",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Profiling API documentation",
        "description": "Profiling macros",
        "description_html": "<p>Profiling macros</p>",
        "file": "profile.h",
        "include": "dmsdk/dlib/profile.h",
        "language": "C++",
        "name": "Profile",
        "namespace": "dmProfile",
        "notes": [],
        "path": "dmsdk/dlib/profile.h",
        "type": "Defold C++"
    }
}