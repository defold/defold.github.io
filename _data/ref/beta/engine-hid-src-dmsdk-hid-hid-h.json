{
    "elements": [
        {
            "brief": "Add text input",
            "description": "Add text input",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AddKeyboardChar",
            "notes": [],
            "parameters": [
                {
                    "doc": "context handle",
                    "is_optional": "False",
                    "name": "keyboard",
                    "types": [
                        "dmHID::HContext"
                    ]
                },
                {
                    "doc": "The character (unicode)",
                    "is_optional": "False",
                    "name": "chr",
                    "types": [
                        "int"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Adds a touch event touch.",
            "description": "Adds a touch event touch.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AddTouch",
            "notes": [],
            "parameters": [
                {
                    "doc": "device handle",
                    "is_optional": "False",
                    "name": "device",
                    "types": [
                        "dmHID::HTouchDevice"
                    ]
                },
                {
                    "doc": "x-coordinate of the position",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "y-coordinate of the position",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "identifier of touch",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "phase of touch",
                    "is_optional": "False",
                    "name": "phase",
                    "types": [
                        "dmHID::Phase"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "HID context handle",
            "description": "HID context handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::HContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "gamepad context handle",
            "description": "gamepad context handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::HGamepad",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "keyboard context handle",
            "description": "keyboard context handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::HKeyboard",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "mouse context handle",
            "description": "mouse context handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::HMouse",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "touch device context handle",
            "description": "touch device context handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::HTouchDevice",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "invalid gamepad handle",
            "description": "invalid gamepad handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::INVALID_GAMEPAD_HANDLE [type: dmHID::HGamepad]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "invalid keyboard handle",
            "description": "invalid keyboard handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::INVALID_KEYBOARD_HANDLE [type: dmHID::HKeyboard]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "invalid mouse handle",
            "description": "invalid mouse handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::INVALID_MOUSE_HANDLE [type: dmHID::HMouse]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "invalid touch devicehandle",
            "description": "invalid touch devicehandle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::INVALID_TOUCHDEVICE_HANDLE [type: dmHID::HTouchDevice]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "max number of characters",
            "description": "max number of characters",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_CHAR_COUNT",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of gamepad axis supported",
            "description": "Maximum number of gamepad axis supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_GAMEPAD_AXIS_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of gamepad buttons supported",
            "description": "Maximum number of gamepad buttons supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_GAMEPAD_BUTTON_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of gamepads supported",
            "description": "Maximum number of gamepads supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_GAMEPAD_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of gamepad hats supported",
            "description": "Maximum number of gamepad hats supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_GAMEPAD_HAT_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of keyboards supported",
            "description": "Maximum number of keyboards supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_KEYBOARD_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of mice supported",
            "description": "Maximum number of mice supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_MOUSE_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of simultaneous touches supported",
            "description": "Maximum number of simultaneous touches supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_TOUCH_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Maximum number of touch devices supported",
            "description": "Maximum number of touch devices supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmHID::MAX_TOUCH_DEVICE_COUNT [type: uint32_t]",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Contains the current state of a gamepad",
            "description": "Contains the current state of a gamepad",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GamepadPacket",
            "notes": [
                "implementation is internal, use the proper accessor functions"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "gets a gamepad device handle",
            "description": "gets a gamepad device handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetGamePad",
            "notes": [],
            "parameters": [
                {
                    "doc": "context in which to find the gamepad",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmHID::HContext"
                    ]
                },
                {
                    "doc": "device index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint8_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Handle to gamepad. dmHID::INVALID_GAMEPAD_HANDLE if not available",
                    "name": "gamepad",
                    "types": [
                        "dmHID::HGamepad"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets a gamepad device handle",
            "description": "gets a gamepad device handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetGamePad",
            "notes": [],
            "parameters": [
                {
                    "doc": "Handle to gamepad",
                    "is_optional": "False",
                    "name": "gamepad",
                    "types": [
                        "dmHID::HGamepad"
                    ]
                },
                {
                    "doc": "Platform specific user id data",
                    "is_optional": "False",
                    "name": "out",
                    "types": [
                        "void**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if gamepad has a user id data assigned to it",
                    "name": "result",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Convenience function to retrieve the state of a ga...",
            "description": "Convenience function to retrieve the state of a gamepad button from a gamepad packet.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetGamepadButton",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gamepad packet",
                    "is_optional": "False",
                    "name": "packet",
                    "types": [
                        "dmHID::GamepadPacket"
                    ]
                },
                {
                    "doc": "The requested button",
                    "is_optional": "False",
                    "name": "button",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if the button is currently pressed down.",
                    "name": "success",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Convenience function to retrieve the state of a ga...",
            "description": "Convenience function to retrieve the state of a gamepad hat from a gamepad packet.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetGamepadHat",
            "notes": [],
            "parameters": [
                {
                    "doc": "Gamepad packet",
                    "is_optional": "False",
                    "name": "packet",
                    "types": [
                        "dmHID::GamepadPacket"
                    ]
                },
                {
                    "doc": "The requested hat index",
                    "is_optional": "False",
                    "name": "hat",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "Hat value out argument",
                    "is_optional": "False",
                    "name": "out_hat_value",
                    "types": [
                        "uint8_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if the hat has data.",
                    "name": "success",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Obtain a gamepad packet reflecting the current inp...",
            "description": "Obtain a gamepad packet reflecting the current input state of the gamepad in a  HID context.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetGamepadPacket",
            "notes": [],
            "parameters": [
                {
                    "doc": "gamepad handle",
                    "is_optional": "False",
                    "name": "gamepad",
                    "types": [
                        "dmHID::HGamepad"
                    ]
                },
                {
                    "doc": "Gamepad packet out argument",
                    "is_optional": "False",
                    "name": "out_packet",
                    "types": [
                        "dmHID::GamepadPacket"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "True if the packet was successfully updated.",
                    "name": "success",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets a keyboard handle",
            "description": "gets a keyboard handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetKeyboard",
            "notes": [],
            "parameters": [
                {
                    "doc": "context in which to find the gamepad",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmHID::HContext"
                    ]
                },
                {
                    "doc": "device index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint8_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Handle to keyboard. dmHID::INVALID_KEYBOARD_HANDLE if not available",
                    "name": "keyboard",
                    "types": [
                        "dmHID::HKeyboard"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets a mouse handle",
            "description": "gets a mouse handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetMouse",
            "notes": [],
            "parameters": [
                {
                    "doc": "context in which to find the gamepad",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmHID::HContext"
                    ]
                },
                {
                    "doc": "device index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint8_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Handle to mouse. dmHID::INVALID_MOUSE_HANDLE if not available",
                    "name": "mouse",
                    "types": [
                        "dmHID::HMouse"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Convenience function to retrieve the state of a mo...",
            "description": "Convenience function to retrieve the state of a mouse button from a mouse packet.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetMouseButton",
            "notes": [],
            "parameters": [
                {
                    "doc": "Mouse packet",
                    "is_optional": "False",
                    "name": "packet",
                    "types": [
                        "dmHID::MousePacket*"
                    ]
                },
                {
                    "doc": "The requested button",
                    "is_optional": "False",
                    "name": "button",
                    "types": [
                        "dmHID::MouseButton"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "If the button was pressed or not",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Obtain a mouse packet reflecting the current input...",
            "description": "Obtain a mouse packet reflecting the current input state of a HID context.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetMousePacket",
            "notes": [],
            "parameters": [
                {
                    "doc": "context from which to retrieve the packet",
                    "is_optional": "False",
                    "name": "mouse",
                    "types": [
                        "dmHID::HMouse"
                    ]
                },
                {
                    "doc": "Mouse packet out argument",
                    "is_optional": "False",
                    "name": "out_packet",
                    "types": [
                        "dmHID::MousePacket*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "If the packet was successfully updated or not.",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "gets a touch device handle",
            "description": "gets a touch device handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetTouchDevice",
            "notes": [],
            "parameters": [
                {
                    "doc": "context in which to find the gamepad",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmHID::HContext"
                    ]
                },
                {
                    "doc": "device index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint8_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Handle to touch device. dmHID::INVALID_TOUCH_DEVICE_HANDLE if not available",
                    "name": "device",
                    "types": [
                        "dmHID::HTouchDevice"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "keyboard key enumeration",
            "description": "keyboard key enumeration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmHID::KEY_SPACE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_EXCLAIM",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_QUOTEDBL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_HASH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_DOLLAR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_AMPERSAND",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_QUOTE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LPAREN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RPAREN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_ASTERISK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_PLUS",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_COMMA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_MINUS",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_PERIOD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_SLASH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_0",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_5",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_6",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_7",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_8",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_9",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_COLON",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_SEMICOLON",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LESS",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_EQUALS",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_GREATER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_QUESTION",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_AT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_A",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_B",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_C",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_E",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_G",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_H",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_I",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_J",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_K",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_L",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_M",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_N",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_O",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_P",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_Q",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_R",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_S",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_T",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_U",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_V",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_W",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_X",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_Y",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_Z",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LBRACKET",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_BACKSLASH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RBRACKET",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_CARET",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_UNDERSCORE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_BACKQUOTE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LBRACE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_PIPE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RBRACE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_TILDE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_ESC",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F5",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F6",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F7",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F8",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F9",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F10",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F11",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_F12",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_UP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_DOWN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LEFT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RIGHT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LSHIFT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RSHIFT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LCTRL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RCTRL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LALT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RALT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_TAB",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_ENTER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_BACKSPACE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_INSERT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_DEL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_PAGEUP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_PAGEDOWN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_HOME",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_END",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_0",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_5",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_6",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_7",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_8",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_9",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_DIVIDE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_MULTIPLY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_SUBTRACT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_ADD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_DECIMAL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_EQUAL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_ENTER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_KP_NUM_LOCK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_CAPS_LOCK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_SCROLL_LOCK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_PAUSE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_LSUPER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_RSUPER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_MENU",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::KEY_BACK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MAX_KEY_COUNT",
                    "type": ""
                }
            ],
            "name": "Key",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Contains the current state of a keyboard",
            "description": "Contains the current state of a keyboard",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "KeyboardPacket",
            "notes": [
                "implementation is internal, use the proper accessor functions"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "mouse button enumeration",
            "description": "mouse button enumeration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_LEFT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_MIDDLE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_RIGHT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_5",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_6",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_7",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MOUSE_BUTTON_8",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::MAX_MOUSE_BUTTON_COUNT",
                    "type": ""
                }
            ],
            "name": "MouseButton",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Contains the current state of a mouse",
            "description": "Contains the current state of a mouse",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "MousePacket",
            "notes": [
                "implementation is internal, use the proper accessor functions"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "touch phase enumeration",
            "description": "touch phase enumeration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "dmHID::PHASE_BEGAN",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::PHASE_MOVED",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::PHASE_STATIONARY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::PHASE_ENDED",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "dmHID::PHASE_CANCELLED",
                    "type": ""
                }
            ],
            "name": "Phase",
            "notes": [
                "By convention the enumeration corresponds to the iOS values"
            ],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Sets the state of a gamepad axis.",
            "description": "Sets the state of a gamepad axis.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetGamepadAxis",
            "notes": [],
            "parameters": [
                {
                    "doc": "device handle",
                    "is_optional": "False",
                    "name": "gamepad",
                    "types": [
                        "dmHID::HGamepad"
                    ]
                },
                {
                    "doc": "The requested axis [0, dmHID::MAX_GAMEPAD_AXIS_COUNT)",
                    "is_optional": "False",
                    "name": "axis",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "axis value [-1, 1]",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "float"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the state of a gamepad button.",
            "description": "Sets the state of a gamepad button.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetGamepadButton",
            "notes": [],
            "parameters": [
                {
                    "doc": "device handle",
                    "is_optional": "False",
                    "name": "gamepad",
                    "types": [
                        "dmHID::HGamepad"
                    ]
                },
                {
                    "doc": "The requested button [0, dmHID::MAX_GAMEPAD_BUTTON_COUNT)",
                    "is_optional": "False",
                    "name": "button",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "Button state",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the state of a key.",
            "description": "Sets the state of a key.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetKey",
            "notes": [],
            "parameters": [
                {
                    "doc": "context handle",
                    "is_optional": "False",
                    "name": "keyboard",
                    "types": [
                        "dmHID::HKeyboard"
                    ]
                },
                {
                    "doc": "The requested key",
                    "is_optional": "False",
                    "name": "key",
                    "types": [
                        "dmHID::Key"
                    ]
                },
                {
                    "doc": "Key state",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the state of a mouse button.",
            "description": "Sets the state of a mouse button.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetMouseButton",
            "notes": [],
            "parameters": [
                {
                    "doc": "device handle",
                    "is_optional": "False",
                    "name": "mouse",
                    "types": [
                        "dmHID::HMouse"
                    ]
                },
                {
                    "doc": "The requested button",
                    "is_optional": "False",
                    "name": "button",
                    "types": [
                        "dmHID::MouseButton"
                    ]
                },
                {
                    "doc": "Button state",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the position of a mouse.",
            "description": "Sets the position of a mouse.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetMousePosition",
            "notes": [],
            "parameters": [
                {
                    "doc": "device handle",
                    "is_optional": "False",
                    "name": "mouse",
                    "types": [
                        "dmHID::HMouse"
                    ]
                },
                {
                    "doc": "x-coordinate of the position",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "y-coordinate of the position",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "int32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Sets the mouse wheel.",
            "description": "Sets the mouse wheel.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetMouseWheel",
            "notes": [],
            "parameters": [
                {
                    "doc": "device handle",
                    "is_optional": "False",
                    "name": "mouse",
                    "types": [
                        "dmHID::HMouse"
                    ]
                },
                {
                    "doc": "wheel value",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "int32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Data for a single touch, e.g. finger",
            "description": "Data for a single touch, e.g. finger",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "Single-click, double, etc",
                    "name": "m_TapCount",
                    "type": "int32_t"
                },
                {
                    "doc": "Begin, end, etc",
                    "name": "m_Phase",
                    "type": "Phase"
                },
                {
                    "doc": "Current x",
                    "name": "m_X",
                    "type": "int32_t"
                },
                {
                    "doc": "Current y",
                    "name": "m_Y",
                    "type": "int32_t"
                },
                {
                    "doc": "Current x, in screen space",
                    "name": "m_ScreenX",
                    "type": "int32_t"
                },
                {
                    "doc": "Current y, in screen space",
                    "name": "m_ScreenY",
                    "type": "int32_t"
                },
                {
                    "doc": "Current dx",
                    "name": "m_DX",
                    "type": "int32_t"
                },
                {
                    "doc": "Current dy",
                    "name": "m_DY",
                    "type": "int32_t"
                },
                {
                    "doc": "Current dx, in screen space",
                    "name": "m_ScreenDX",
                    "type": "int32_t"
                },
                {
                    "doc": "Current dy, in screen space",
                    "name": "m_ScreenDY",
                    "type": "int32_t"
                },
                {
                    "doc": "Touch id",
                    "name": "m_Id",
                    "type": "int32_t"
                }
            ],
            "name": "Touch",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        }
    ],
    "info": {
        "brief": "SDK Hid API documentation",
        "description": "Used to add input to the engine",
        "description_html": "<p>Used to add input to the engine</p>",
        "file": "hid.h",
        "include": "dmsdk/hid/hid.h",
        "language": "C++",
        "name": "Hid",
        "namespace": "dmHid",
        "notes": [],
        "path": "engine/hid/src/dmsdk/hid/hid.h",
        "type": "Defold C++"
    }
}