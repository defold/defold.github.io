{
    "elements": [
        {
            "brief": "cancel a timer",
            "description": "You may cancel a timer from inside a timer callback.\nCancelling a timer that is already executed or cancelled is safe.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">()</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;print every second&quot;</span><span class=\"p\">)</span> <span class=\"kr\">end</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span> <span class=\"kr\">then</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;the timer is already cancelled&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "timer.cancel",
            "notes": [],
            "parameters": [
                {
                    "doc": "the timer handle returned by timer.delay()",
                    "is_optional": "False",
                    "name": "handle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if the timer was active, false if the timer is already cancelled / complete",
                    "name": "true",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "create a timer",
            "description": "Adds a timer and returns a unique handle.\nYou may create more timers from inside a timer callback.\nUsing a delay of 0 will result in a timer that triggers at the next frame just before\nscript update functions.\nIf you want a timer that triggers on each frame, set delay to 0.0f and repeat to true.\nTimers created within a script will automatically die when the script is deleted.",
            "error": "",
            "examples": "A simple one-shot timer\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">()</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;print in one second&quot;</span><span class=\"p\">)</span> <span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>\n\nRepetitive timer which canceled after 10 calls\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">local</span> <span class=\"kr\">function</span> <span class=\"nf\">call_every_second</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">time_elapsed</span><span class=\"p\">)</span>\n  <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Call #&quot;</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span><span class=\"p\">)</span>\n  <span class=\"kr\">if</span> <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">==</span> <span class=\"mi\">10</span> <span class=\"kr\">then</span>\n    <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">cancel</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span> <span class=\"c1\">-- cancel timer after 10 calls</span>\n  <span class=\"kr\">end</span>\n<span class=\"kr\">end</span>\n\n<span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"n\">call_every_second</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "timer.delay",
            "notes": [],
            "parameters": [
                {
                    "doc": "time interval in seconds",
                    "is_optional": "False",
                    "name": "delay",
                    "types": [
                        "number"
                    ]
                },
                {
                    "doc": "true = repeat timer until cancel, false = one-shot timer",
                    "is_optional": "False",
                    "name": "repeating",
                    "types": [
                        "boolean"
                    ]
                },
                {
                    "doc": "timer callback function\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object</dd>\n<dt><code>handle</code></dt>\n<dd><span class=\"type\">number</span> The handle of the timer</dd>\n<dt><code>time_elapsed</code></dt>\n<dd><span class=\"type\">number</span> The elapsed time - on first trigger it is time since timer.delay call, otherwise time since last trigger</dd>\n</dl>",
                    "is_optional": "False",
                    "name": "callback",
                    "types": [
                        "function(self, handle, time_elapsed)"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "identifier for the create timer, returns timer.INVALID_TIMER_HANDLE if the timer can not be created",
                    "name": "handle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get information about timer",
            "description": "Get information about timer.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">()</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;print every second&quot;</span><span class=\"p\">)</span> <span class=\"kr\">end</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">get_info</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span> <span class=\"kr\">then</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;the timer is already cancelled or complete&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">else</span>\n   <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\">-- delay, time_remaining, repeating</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "timer.get_info",
            "notes": [],
            "parameters": [
                {
                    "doc": "the timer handle returned by timer.delay()",
                    "is_optional": "False",
                    "name": "handle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "table or <code>nil</code> if timer is cancelled/completed. table with data in the following fields:\n<dl>\n<dt><code>time_remaining</code></dt>\n<dd><span class=\"type\">number</span> Time remaining until the next time a timer.delay() fires.</dd>\n<dt><code>delay</code></dt>\n<dd><span class=\"type\">number</span> Time interval.</dd>\n<dt><code>repeating</code></dt>\n<dd><span class=\"type\">boolean</span> true = repeat timer until cancel, false = one-shot timer.</dd>\n</dl>",
                    "name": "data",
                    "types": [
                        "table",
                        "nil"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Indicates an invalid timer handle",
            "description": "Indicates an invalid timer handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "timer.INVALID_TIMER_HANDLE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "trigger a callback",
            "description": "Manual triggering a callback for a timer.",
            "error": "",
            "examples": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">()</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;print every second or manually by timer.trigger&quot;</span><span class=\"p\">)</span> <span class=\"kr\">end</span><span class=\"p\">)</span>\n<span class=\"p\">...</span>\n<span class=\"kd\">local</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">timer</span><span class=\"p\">.</span><span class=\"n\">trigger</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n<span class=\"kr\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span> <span class=\"kr\">then</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;the timer is already cancelled or complete&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "timer.trigger",
            "notes": [],
            "parameters": [
                {
                    "doc": "the timer handle returned by timer.delay()",
                    "is_optional": "False",
                    "name": "handle",
                    "types": [
                        "number"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "if the timer was active, false if the timer is already cancelled / complete",
                    "name": "true",
                    "types": [
                        "boolean"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Timer API documentation",
        "description": "Timers allow you to set a delay and a callback to be called when the timer completes.\n\nThe timers created with this API are updated with the collection timer where they\nare created. If you pause or speed up the collection (using `set_time_step`) it will\nalso affect the new timer.",
        "description_html": "<p>Timers allow you to set a delay and a callback to be called when the timer completes.</p>\n<p>The timers created with this API are updated with the collection timer where they\nare created. If you pause or speed up the collection (using <code>set_time_step</code>) it will\nalso affect the new timer.</p>",
        "file": "",
        "language": "Lua",
        "name": "Timer",
        "namespace": "timer",
        "notes": [],
        "path": "script_timer.cpp",
        "type": "Defold Lua"
    }
}