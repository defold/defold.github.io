{
    "elements": [
        {
            "brief": "Adds a stream to a stream declaration",
            "description": "Adds a stream to a stream declaration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AddVertexStream",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the name of the stream",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "the size of the stream, i.e number of components",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data type of the stream",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "dmGraphics::Type"
                    ]
                },
                {
                    "doc": "true if the stream should be normalized in the 0..1 range",
                    "is_optional": "False",
                    "name": "normalize",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Adds a stream to a stream declaration",
            "description": "Adds a stream to a stream declaration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AddVertexStream",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the name hash of the stream",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "uint64_t"
                    ]
                },
                {
                    "doc": "the size of the stream, i.e number of components",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data type of the stream",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "dmGraphics::Type"
                    ]
                },
                {
                    "doc": "true if the stream should be normalized in the 0..1 range",
                    "is_optional": "False",
                    "name": "normalize",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "ATTACHMENT_OP_DONT_CARE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "ATTACHMENT_OP_LOAD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "ATTACHMENT_OP_STORE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "ATTACHMENT_OP_CLEAR",
                    "type": ""
                }
            ],
            "name": "AttachmentOp",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Blend factor",
            "description": "Blend factor",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ZERO",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_SRC_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_DST_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE_MINUS_DST_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_SRC_ALPHA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_DST_ALPHA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_SRC_ALPHA_SATURATE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_CONSTANT_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_CONSTANT_ALPHA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
                    "type": ""
                }
            ],
            "name": "BlendFactor",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "BUFFER_ACCESS_READ_ONLY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BUFFER_ACCESS_WRITE_ONLY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BUFFER_ACCESS_READ_WRITE",
                    "type": ""
                }
            ],
            "name": "BufferAccess",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "BUFFER_USAGE_STREAM_DRAW",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "BUFFER_USAGE_DYNAMIC_DRAW",
                    "type": ""
                },
                {
                    "doc": "    Preferred for buffers that never change",
                    "name": "BUFFER_USAGE_STATIC_DRAW",
                    "type": ""
                }
            ],
            "name": "BufferUsage",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_NEVER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_LESS",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_LEQUAL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_GREATER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_GEQUAL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_EQUAL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_NOTEQUAL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "COMPARE_FUNC_ALWAYS",
                    "type": ""
                }
            ],
            "name": "CompareFunc",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Delete the index buffer",
            "description": "Delete the index buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DeleteIndexBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "the index buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HIndexBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Delete vertex buffer",
            "description": "Delete vertex buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DeleteVertexBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "the buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HVertexBuffer"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Delete vertex declaration",
            "description": "Delete vertex declaration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DeleteVertexDeclaration",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vertex declaration",
                    "is_optional": "False",
                    "name": "vertex_declaration",
                    "types": [
                        "dmGraphics::HVertexDeclaration"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Delete vertex stream declaration",
            "description": "Delete vertex stream declaration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DeleteVertexStreamDeclaration",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vertex stream declaration",
                    "is_optional": "False",
                    "name": "stream_declaration",
                    "types": [
                        "dmGraphics::HVertexStreamDeclaration"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Android native jobject",
            "description": "Get Android native jobject. Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeAndroidActivity",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "jobject",
                    "types": [
                        "jobject"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Android app object",
            "description": "Get Android app object. Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeAndroidApp",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "app",
                    "types": [
                        "struct android_app*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Android EGLContext",
            "description": "Get Android EGLContext native handle (EGLContext). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeAndroidEGLContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "EGLContext",
                    "types": [
                        "EGLContext"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Android EGLSurface",
            "description": "Get Android EGLSurface native handle (EGLSurface). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeAndroidEGLSurface",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "EGLSurface",
                    "types": [
                        "EGLSurface"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Android native JavaVM",
            "description": "Get Android JavaVM ptr. Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeAndroidJavaVM",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "JavaVM*",
                    "types": [
                        "JavaVM*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get iOS EAGLContext",
            "description": "Get iOS EAGLContext native handle (id). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeiOSEAGLContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "id",
                    "types": [
                        "id"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get iOS UIView",
            "description": "Get iOS UIView native handle (id). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeiOSUIView",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "id",
                    "types": [
                        "id"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get iOS UIWindow",
            "description": "Get iOS UIWindow native handle (id). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeiOSUIWindow",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "id",
                    "types": [
                        "id"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get OSX NSOpenGLContext",
            "description": "Get OSX NSOpenGLContext native handle (id). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeOSXNSOpenGLContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "id",
                    "types": [
                        "id"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get OSX NSView",
            "description": "Get OSX NSView native handle (id). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeOSXNSView",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "id",
                    "types": [
                        "id"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get OSX NSWindow",
            "description": "Get OSX NSWindow native handle (id). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeOSXNSWindow",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "id",
                    "types": [
                        "id"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Win32 HGLRC",
            "description": "Get Win32 gl rendercontext native handle (HGLRC). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeWindowsHGLRC",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "HGLRC",
                    "types": [
                        "HGLRC"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Win32 HWND",
            "description": "Get Win32 windows native handle (HWND). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeWindowsHWND",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "HWND",
                    "types": [
                        "HWND"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Linux X11GLXContext",
            "description": "Get Linux X11GLXContext native handle (GLXContext). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeX11GLXContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "GLXContext",
                    "types": [
                        "GLXContext"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get Linux X11Window",
            "description": "Get Linux X11Window windows native handle (Window). Any other platform return zero.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "dmGraphics::GetNativeX11Window",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "native handle",
                    "name": "Window",
                    "types": [
                        "Window"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "FACE_WINDING_CCW",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "FACE_WINDING_CW",
                    "type": ""
                }
            ],
            "name": "FaceWinding",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Get the max number of indices allowed by the syste...",
            "description": "Get the max number of indices allowed by the system in an index buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetMaxElementsIndices",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the count",
                    "name": "count",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the max number of vertices allowed by the syst...",
            "description": "Get the max number of vertices allowed by the system in a vertex buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetMaxElementsVertices",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the count",
                    "name": "count",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNumSupportedExtensions",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the number of supported extensions",
                    "name": "count",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the attachment texture from a render target. R...",
            "description": "Get the attachment texture from a render target. Returns zero if no such attachment texture exists.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderTargetAttachment",
            "notes": [],
            "parameters": [
                {
                    "doc": "the render target",
                    "is_optional": "False",
                    "name": "render_target",
                    "types": [
                        "dmGraphics::HRenderTarget"
                    ]
                },
                {
                    "doc": "the attachment to get",
                    "is_optional": "False",
                    "name": "attachment_type",
                    "types": [
                        "dmGraphics::RenderTargetAttachment"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the attachment texture",
                    "name": "attachment",
                    "types": [
                        "dmGraphics::HTexture"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get the supported extension",
            "description": "get the supported extension",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetSupportedExtension",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the index of the extension",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the extension. 0 if index was out of bounds",
                    "name": "extension",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the native graphics API texture object from an...",
            "description": "Get the native graphics API texture object from an engine texture handle. This depends on the graphics backend and is not\nguaranteed to be implemented on the currently running adapter.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetTextureHandle",
            "notes": [],
            "parameters": [
                {
                    "doc": "the texture handle",
                    "is_optional": "False",
                    "name": "texture",
                    "types": [
                        "dmGraphics::HTexture"
                    ]
                },
                {
                    "doc": "a pointer to where the raw object should be stored",
                    "is_optional": "False",
                    "name": "out_handle",
                    "types": [
                        "void**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the result of the query",
                    "name": "handle_result",
                    "types": [
                        "dmGraphics::HandleResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the physical offset into the vertex data for a...",
            "description": "Get the physical offset into the vertex data for a particular stream",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetVertexStreamOffset",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vertex declaration",
                    "is_optional": "False",
                    "name": "vertex_declaration",
                    "types": [
                        "dmGraphics::HVertexDeclaration"
                    ]
                },
                {
                    "doc": "the name hash of the vertex stream (as passed into AddVertexStream())",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "uint64_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "in bytes into the vertex or INVALID_STREAM_OFFSET if not found",
                    "name": "Offset",
                    "types": [
                        ""
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get viewport's parameters",
            "description": "Get viewport's parameters",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetViewport",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "x-coordinate of the viewport's origin",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "y-coordinate of the viewport's origin",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "viewport's width",
                    "is_optional": "False",
                    "name": "width",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "viewport's height",
                    "is_optional": "False",
                    "name": "height",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "HANDLE_RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "HANDLE_RESULT_NOT_AVAILABLE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "HANDLE_RESULT_ERROR",
                    "type": ""
                }
            ],
            "name": "HandleResult",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Context handle",
            "description": "Context handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Index buffer handle",
            "description": "Index buffer handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HIndexBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "PipelineState handle",
            "description": "PipelineState handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HPipelineState",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Program handle",
            "description": "Program handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HProgram",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Rendertarget handle",
            "description": "Rendertarget handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HRenderTarget",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Storage buffer handle",
            "description": "Storage buffer handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HStorageBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Texture handle",
            "description": "Texture handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HTexture",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Uniform location handle",
            "description": "Uniform location handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HUniformLocation",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Vertex buffer handle",
            "description": "Vertex buffer handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HVertexBuffer",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Vertex declaration handle",
            "description": "Vertex declaration handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HVertexDeclaration",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Vertex stream declaration handle",
            "description": "Vertex stream declaration handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HVertexStreamDeclaration",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "INDEXBUFFER_FORMAT_16",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "INDEXBUFFER_FORMAT_32",
                    "type": ""
                }
            ],
            "name": "IndexBufferFormat",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Invalid stream offset",
            "description": "Invalid stream offset",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "INVALID_STREAM_OFFSET",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "check if an extension is supported",
            "description": "check if an extension is supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsExtensionSupported",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the extension.",
                    "is_optional": "False",
                    "name": "extension",
                    "types": [
                        "const char*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the extension was supported",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Check if the index format is supported",
            "description": "Check if the index format is supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsIndexBufferFormatSupported",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the format",
                    "is_optional": "False",
                    "name": "format",
                    "types": [
                        "dmGraphics::IndexBufferFormat"
                    ]
                },
                {
                    "doc": "true if the format is supoprted",
                    "is_optional": "False",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "check if a specific texture format is supported",
            "description": "check if a specific texture format is supported",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsTextureFormatSupported",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the texture format.",
                    "is_optional": "False",
                    "name": "format",
                    "types": [
                        "TextureFormat"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the texture format was supported",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Max buffer color attachments",
            "description": "Max buffer color attachments",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "MAX_BUFFER_COLOR_ATTACHMENTS",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Create new index buffer with initial data",
            "description": "Create new index buffer with initial data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewIndexBuffer",
            "notes": [
                "The caller need to track if the indices are 16 or 32 bit."
            ],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the size of the buffer (in bytes). May be 0",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "the usage",
                    "is_optional": "False",
                    "name": "buffer_usage",
                    "types": [
                        "dmGraphics::BufferUsage"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the index buffer",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HIndexBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create new vertex buffer with initial data",
            "description": "Create new vertex buffer with initial data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewVertexBuffer",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the size of the buffer (in bytes). May be 0",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "the usage",
                    "is_optional": "False",
                    "name": "buffer_usage",
                    "types": [
                        "dmGraphics::BufferUsage"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the vertex buffer",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HVertexBuffer"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create new vertex declaration from a vertex stream...",
            "description": "Create new vertex declaration from a vertex stream declaration",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewVertexDeclaration",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the vertex stream declaration",
                    "is_optional": "False",
                    "name": "stream_declaration",
                    "types": [
                        "dmGraphics::HVertexStreamDeclaration"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the vertex declaration",
                    "name": "declaration",
                    "types": [
                        "dmGraphics::HVertexDeclaration"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create new vertex declaration from a vertex stream...",
            "description": "Create new vertex declaration from a vertex stream declaration and an explicit stride value,\nwhere the stride is the number of bytes between each consecutive vertex in a vertex buffer",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewVertexDeclaration",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the vertex stream declaration",
                    "is_optional": "False",
                    "name": "stream_declaration",
                    "types": [
                        "dmGraphics::HVertexStreamDeclaration"
                    ]
                },
                {
                    "doc": "the stride between the start of each vertex (in bytes)",
                    "is_optional": "False",
                    "name": "stride",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the vertex declaration",
                    "name": "declaration",
                    "types": [
                        "dmGraphics::HVertexDeclaration"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create new vertex stream declaration. A stream dec...",
            "description": "Create new vertex stream declaration. A stream declaration contains a list of vertex streams\nthat should be used to create a vertex declaration from.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewVertexStreamDeclaration",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the vertex declaration",
                    "name": "declaration",
                    "types": [
                        "dmGraphics::HVertexStreamDeclaration"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Create new vertex stream declaration. A stream dec...",
            "description": "Create new vertex stream declaration. A stream declaration contains a list of vertex streams\nthat should be used to create a vertex declaration from.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewVertexStreamDeclaration",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the vertex step function to use",
                    "is_optional": "False",
                    "name": "step_function",
                    "types": [
                        "dmGraphics::VertexStepFunction"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the vertex declaration",
                    "name": "declaration",
                    "types": [
                        "dmGraphics::HVertexStreamDeclaration"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the OpenGL render target id from a render targ...",
            "description": "Get the OpenGL render target id from a render target",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "OpenGLGetRenderTargetId",
            "notes": [],
            "parameters": [
                {
                    "doc": "the OpenGL context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the render target to get the ID from",
                    "is_optional": "False",
                    "name": "render_target",
                    "types": [
                        "dmGraphics::HRenderTarget"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the OpenGL render target id",
                    "name": "id",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Primitive type",
            "description": "Primitive type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "PRIMITIVE_LINES",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PRIMITIVE_TRIANGLES",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PRIMITIVE_TRIANGLE_STRIP",
                    "type": ""
                }
            ],
            "name": "PrimitiveType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Read frame buffer pixels in BGRA format",
            "description": "Read frame buffer pixels in BGRA format",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ReadPixels",
            "notes": [],
            "parameters": [
                {
                    "doc": "the context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "x-coordinate of the starting position",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "y-coordinate of the starting position",
                    "is_optional": "False",
                    "name": "y",
                    "types": [
                        "int32_t"
                    ]
                },
                {
                    "doc": "width of the region",
                    "is_optional": "False",
                    "name": "width",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "height of the region",
                    "is_optional": "False",
                    "name": "height",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "buffer to read to",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "buffer size",
                    "is_optional": "False",
                    "name": "buffer_size",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "ATTACHMENT_COLOR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "ATTACHMENT_DEPTH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "ATTACHMENT_STENCIL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "MAX_ATTACHMENT_COUNT",
                    "type": ""
                }
            ],
            "name": "RenderTargetAttachment",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Set index buffer data",
            "description": "Set index buffer data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetIndexBufferData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HIndexBuffer"
                    ]
                },
                {
                    "doc": "the size of the buffer (in bytes). May be 0",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "the usage",
                    "is_optional": "False",
                    "name": "buffer_usage",
                    "types": [
                        "dmGraphics::BufferUsage"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set subset of index buffer data",
            "description": "Set subset of index buffer data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetIndexBufferSubData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HVertexBuffer"
                    ]
                },
                {
                    "doc": "the offset into the desination buffer (in bytes)",
                    "is_optional": "False",
                    "name": "offset",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the size of the buffer (in bytes). May be 0",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set vertex buffer data",
            "description": "Set vertex buffer data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetVertexBufferData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HVertexBuffer"
                    ]
                },
                {
                    "doc": "the size of the buffer (in bytes). May be 0",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "the usage",
                    "is_optional": "False",
                    "name": "buffer_usage",
                    "types": [
                        "dmGraphics::BufferUsage"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set subset of vertex buffer data",
            "description": "Set subset of vertex buffer data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetVertexBufferSubData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the buffer",
                    "is_optional": "False",
                    "name": "buffer",
                    "types": [
                        "dmGraphics::HVertexBuffer"
                    ]
                },
                {
                    "doc": "the offset into the desination buffer (in bytes)",
                    "is_optional": "False",
                    "name": "offset",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the size of the buffer (in bytes). May be 0",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "the data",
                    "is_optional": "False",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "STENCIL_OP_KEEP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_ZERO",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_REPLACE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_INCR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_INCR_WRAP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_DECR",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_DECR_WRAP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "STENCIL_OP_INVERT",
                    "type": ""
                }
            ],
            "name": "StencilOp",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_LUMINANCE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_LUMINANCE_ALPHA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB_16BPP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_16BPP",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_DEPTH",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_STENCIL",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB_PVRTC_2BPPV1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB_PVRTC_4BPPV1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB_ETC1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_R_ETC2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RG_ETC2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_ETC2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_ASTC_4x4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB_BC1",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_BC3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_R_BC4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RG_BC5",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA_BC7",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB16F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGB32F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA16F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA32F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_R16F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RG16F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_R32F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RG32F",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_RGBA32UI",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TEXTURE_FORMAT_COUNT",
                    "type": ""
                }
            ],
            "name": "TextureFormat",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Data type",
            "description": "Data type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "TYPE_BYTE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_UNSIGNED_BYTE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SHORT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_UNSIGNED_SHORT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_INT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_UNSIGNED_INT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT_VEC4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT_MAT4",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SAMPLER_2D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SAMPLER_CUBE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SAMPLER_2D_ARRAY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT_VEC2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT_VEC3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT_MAT2",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_FLOAT_MAT3",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_IMAGE_2D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_TEXTURE_2D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SAMPLER",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_TEXTURE_2D_ARRAY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_TEXTURE_CUBE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SAMPLER_3D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_TEXTURE_3D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_IMAGE_3D",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_SAMPLER_3D_ARRAY",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "TYPE_TEXTURE_3D_ARRAY",
                    "type": ""
                }
            ],
            "name": "Type",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Get the current swap chain texture",
            "description": "Get the current swap chain texture",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "VulkanGetActiveSwapChainTexture",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vulkan context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the swap chain texture for the current frame",
                    "name": "swapchain",
                    "types": [
                        "dmGraphics::HTexture"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the native MTLCommandQueue from the Vulkan con...",
            "description": "Get the native MTLCommandQueue from the Vulkan context. Only available when using Mac/iOS.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "VulkanGraphicsCommandQueueToMetal",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vulkan context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the Metal graphics queue wrapped with a (__bridge void*)",
                    "name": "mtl_queue",
                    "types": [
                        "id<MTLCommandQueue>"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get a native MTLTexture from a Vulkan HTexture. On...",
            "description": "Get a native MTLTexture from a Vulkan HTexture. Only available when using Mac/iOS.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "VulkanTextureToMetal",
            "notes": [],
            "parameters": [
                {
                    "doc": "the vulkan context",
                    "is_optional": "False",
                    "name": "context",
                    "types": [
                        "dmGraphics::HContext"
                    ]
                },
                {
                    "doc": "the texture",
                    "is_optional": "False",
                    "name": "texture",
                    "types": [
                        "dmGraphics::HTexture"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the Metal texture wrapped with a (__bridge void*)",
                    "name": "mtl_texture",
                    "types": [
                        "id<MTLTexture>"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Graphics API documentation",
        "description": "[file:<dmsdk/graphics/graphics.h>]\n\nGraphics API",
        "file": "dmsdk/graphics/graphics.h",
        "language": "C++",
        "name": "Graphics",
        "namespace": "dmGraphics",
        "notes": [],
        "path": "dmsdk/graphics/graphics.h",
        "type": "Defold C++"
    }
}