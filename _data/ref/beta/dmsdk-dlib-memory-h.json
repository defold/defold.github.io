{
    "elements": [
        {
            "brief": "Frees a block of memory that was allocated with dm...",
            "description": "Frees a block of memory that was allocated with dmMemory::AlignedMalloc",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AlignedFree",
            "notes": [],
            "parameters": [
                {
                    "doc": "A pointer to the memory block that was returned by dmMemory::AlignedMalloc",
                    "is_optional": "False",
                    "name": "memptr",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Allocate size bytes of uninitialized storage whose...",
            "description": "Allocate size bytes of uninitialized storage whose alignment is specified by alignment.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AlignedMalloc",
            "notes": [],
            "parameters": [
                {
                    "doc": "Pointer to a void* where the allocated pointer address should be stored.",
                    "is_optional": "False",
                    "name": "memptr",
                    "types": [
                        "void**"
                    ]
                },
                {
                    "doc": "The alignment value, which must be an integer power of 2.",
                    "is_optional": "False",
                    "name": "alignment",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "Size of the requested memory allocation.",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Returns RESULT_OK on success, RESULT_INVAL if alignment is not a power of 2 and RESULT_NOMEM if out of memory.",
                    "name": "result",
                    "types": [
                        "Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "aligned memory allocation result",
            "description": "Aligned memory allocation result",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "0",
                    "name": "dmMemory::RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "-1",
                    "name": "dmMemory::RESULT_INVAL",
                    "type": ""
                },
                {
                    "doc": "-2",
                    "name": "dmMemory::RESULT_NOMEM",
                    "type": ""
                }
            ],
            "name": "Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        }
    ],
    "info": {
        "brief": "SDK Memory API documentation",
        "description": "Memory allocation functions",
        "description_html": "<p>Memory allocation functions</p>",
        "file": "memory.h",
        "include": "dmsdk/dlib/memory.h",
        "language": "C++",
        "name": "Memory",
        "namespace": "dmMemory",
        "notes": [],
        "path": "dmsdk/dlib/memory.h",
        "type": "Defold C++"
    }
}