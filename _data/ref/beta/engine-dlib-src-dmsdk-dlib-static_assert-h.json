{
    "elements": [
        {
            "brief": "compile time assert",
            "description": "This is using C++11 <code>static_assert</code> on platforms that support it and use c++11. Otherwise\nit's using a c construct to check the condition.\nAs such, it is currently required to be used whithin a function scope.",
            "error": "",
            "examples": "Verify the size of a struct is within a limit\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">DM_STATIC_ASSERT</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">MyStruct</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Invalid_Struct_Size</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "DM_STATIC_ASSERT",
            "notes": [],
            "parameters": [
                {
                    "doc": "expression",
                    "is_optional": "False",
                    "name": "x",
                    "types": [
                        "bool"
                    ]
                },
                {
                    "doc": "expression",
                    "is_optional": "False",
                    "name": "xmsg",
                    "types": [
                        "string"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        }
    ],
    "info": {
        "brief": "Static assert",
        "description": "```cpp\nvoid test() {\n    DM_STATIC_ASSERT(sizeof(int) == 4, Invalid_int_size);\n}\n```",
        "description_html": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DM_STATIC_ASSERT</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Invalid_int_size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "file": "static_assert.h",
        "include": "dmsdk/dlib/static_assert.h",
        "language": "C++",
        "name": "Static Assert",
        "namespace": "dmStaticAssert",
        "notes": [],
        "path": "engine/dlib/src/dmsdk/dlib/static_assert.h",
        "type": "Defold C++"
    }
}