{
    "elements": [
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "    //!< 0",
                    "name": "ADJUST_MODE_FIT",
                    "type": ""
                },
                {
                    "doc": "   //!< 1",
                    "name": "ADJUST_MODE_ZOOM",
                    "type": ""
                },
                {
                    "doc": "//!< 2",
                    "name": "ADJUST_MODE_STRETCH",
                    "type": ""
                }
            ],
            "name": "AdjustMode",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "ADJUST_REFERENCE_PARENT",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "ADJUST_REFERENCE_DISABLED",
                    "type": ""
                }
            ],
            "name": "AdjustReference",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Defer delete a node",
            "description": "Defer delete a node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DeleteNode",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the node to delete",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get first child node",
            "description": "Get first child node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetFirstChildNode",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "Gets the first child node. If 0, gets the first top level node.",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The first child node",
                    "name": "child",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get next sibling",
            "description": "Get next sibling",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNextNode",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the current sibling",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the next sibling, or INVALID_HANDLE if no more siblings",
                    "name": "sibling",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get node custom type",
            "description": "get node custom type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeCustomData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the custom type. Or 0 if it is no custom type",
                    "name": "type",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get node custom data",
            "description": "get node custom data",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeCustomData",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the custom data created per node by the gui node type extension",
                    "name": "data",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the id of a node.",
            "description": "Get the id of a node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeId",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the id of the node",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Query if the node is a bone",
            "description": "Query if the node is a bone",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeIsBone",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the node is a bone",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the parent of a gui node",
            "description": "Get the parent of a gui node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeParent",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the parent, or INVALID_HANDLE is unsuccessful",
                    "name": "parent",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get property value",
            "description": "Get property value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "property enum",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "dmGui::Property"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "value",
                    "types": [
                        "dmVMath::Vector4"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "get node texture",
            "description": "get node texture",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetNodeTextureId",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the currently assigned texture",
                    "name": "texture",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets a resource by its resource alias.",
            "description": "Gets a resource by its resource alias.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetResource",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the resource alias",
                    "is_optional": "False",
                    "name": "resource_id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the hash of the suffix: hash(\".spinescenec\")",
                    "is_optional": "False",
                    "name": "suffix_with_dot",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the resource if successful",
                    "name": "resource",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "A handle to a gui context",
            "description": "A handle to a gui context",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HContext",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "A handle to a gui node",
            "description": "A handle to a gui node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HNode",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "A handle to a gui scene",
            "description": "A handle to a gui scene",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HScene",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "A handle to a gui script",
            "description": "A handle to a gui script",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HScript",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "A handle to a texture source, which can be a point...",
            "description": "A handle to a texture source, which can be a pointer to a resource,\na dmGraphics::HTexture or a dynamic texture created from a gui script.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HTextureSource",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Invalid node handle",
            "description": "Invalid node handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "INVALID_HANDLE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Pushes a dmGui::HNode to the stack",
            "description": "Pushes a dmGui::HNode to the stack",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "LuaPushNode",
            "notes": [],
            "parameters": [
                {
                    "doc": "the Lua scene",
                    "is_optional": "False",
                    "name": "L",
                    "types": [
                        "lua_State*"
                    ]
                },
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "HNode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "NewNode",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the position",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "dmVMath::Point3"
                    ]
                },
                {
                    "doc": "the size",
                    "is_optional": "False",
                    "name": "size",
                    "types": [
                        "dmVMath::Vector3"
                    ]
                },
                {
                    "doc": "the node type",
                    "is_optional": "False",
                    "name": "node_type",
                    "types": [
                        "dmGui::NodeType"
                    ]
                },
                {
                    "doc": "If node_type == dmGui::NODE_TYPE_CUSTOM, then this is used to create a custom node data for the registered custom type",
                    "is_optional": "False",
                    "name": "custom_type",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the created node",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "This enum denotes what kind of texture type the m_...",
            "description": "This enum denotes what kind of texture type the m_Texture pointer is referencing.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "NODE_TEXTURE_TYPE_NONE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "NODE_TEXTURE_TYPE_TEXTURE",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "NODE_TEXTURE_TYPE_TEXTURE_SET",
                    "type": ""
                }
            ],
            "name": "NodeTextureType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "PLAYBACK_ONCE_FORWARD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PLAYBACK_ONCE_BACKWARD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PLAYBACK_ONCE_PINGPONG",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PLAYBACK_LOOP_FORWARD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PLAYBACK_LOOP_BACKWARD",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PLAYBACK_LOOP_PINGPONG",
                    "type": ""
                },
                {
                    "doc": "",
                    "name": "PLAYBACK_NONE",
                    "type": ""
                }
            ],
            "name": "Playback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "   //!< 0",
                    "name": "PROPERTY_POSITION",
                    "type": ""
                },
                {
                    "doc": "   //!< 1",
                    "name": "PROPERTY_ROTATION",
                    "type": ""
                },
                {
                    "doc": "      //!< 2",
                    "name": "PROPERTY_SCALE",
                    "type": ""
                },
                {
                    "doc": "      //!< 3",
                    "name": "PROPERTY_COLOR",
                    "type": ""
                },
                {
                    "doc": "       //!< 4",
                    "name": "PROPERTY_SIZE",
                    "type": ""
                },
                {
                    "doc": "    //!< 5",
                    "name": "PROPERTY_OUTLINE",
                    "type": ""
                },
                {
                    "doc": "     //!< 6",
                    "name": "PROPERTY_SHADOW",
                    "type": ""
                },
                {
                    "doc": "     //!< 7",
                    "name": "PROPERTY_SLICE9",
                    "type": ""
                },
                {
                    "doc": " //!< 8",
                    "name": "PROPERTY_PIE_PARAMS",
                    "type": ""
                },
                {
                    "doc": "//!< 9",
                    "name": "PROPERTY_TEXT_PARAMS",
                    "type": ""
                },
                {
                    "doc": "      //!< 10",
                    "name": "PROPERTY_COUNT",
                    "type": ""
                }
            ],
            "name": "Property",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "//!< 0,",
                    "name": "NODE_TYPE_BOX",
                    "type": ""
                },
                {
                    "doc": "//!< 1,",
                    "name": "NODE_TYPE_TEXT",
                    "type": ""
                },
                {
                    "doc": "//!< 2,",
                    "name": "NODE_TYPE_PIE",
                    "type": ""
                },
                {
                    "doc": "//!< 3,",
                    "name": "NODE_TYPE_TEMPLATE",
                    "type": ""
                },
                {
                    "doc": "//!< 5,",
                    "name": "NODE_TYPE_PARTICLEFX",
                    "type": ""
                },
                {
                    "doc": "//!< 6,",
                    "name": "NODE_TYPE_CUSTOM",
                    "type": ""
                },
                {
                    "doc": "//!< 7,",
                    "name": "NODE_TYPE_COUNT",
                    "type": ""
                }
            ],
            "name": "Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "//!< 0",
                    "name": "RESULT_OK",
                    "type": ""
                },
                {
                    "doc": "//!< -1",
                    "name": "RESULT_SYNTAX_ERROR",
                    "type": ""
                },
                {
                    "doc": "//!< -2",
                    "name": "RESULT_SCRIPT_ERROR",
                    "type": ""
                },
                {
                    "doc": "//!< -4",
                    "name": "RESULT_OUT_OF_RESOURCES",
                    "type": ""
                },
                {
                    "doc": "//!< -5",
                    "name": "RESULT_RESOURCE_NOT_FOUND",
                    "type": ""
                },
                {
                    "doc": "//!< -6",
                    "name": "RESULT_TEXTURE_ALREADY_EXISTS",
                    "type": ""
                },
                {
                    "doc": "//!< -7",
                    "name": "RESULT_INVAL_ERROR",
                    "type": ""
                },
                {
                    "doc": "//!< -8",
                    "name": "RESULT_INF_RECURSION",
                    "type": ""
                },
                {
                    "doc": "//!< -9",
                    "name": "RESULT_DATA_ERROR",
                    "type": ""
                },
                {
                    "doc": "//!< -10",
                    "name": "RESULT_WRONG_TYPE",
                    "type": ""
                }
            ],
            "name": "Result",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Set adjust mode",
            "description": "Set adjust mode",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeAdjustMode",
            "notes": [],
            "parameters": [
                {
                    "doc": "scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "the adjust mode",
                    "is_optional": "False",
                    "name": "adjust_mode",
                    "types": [
                        "AdjustMode"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the id of a node.",
            "description": "Set the id of a node.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeId",
            "notes": [
                "The id must be unique"
            ],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "the id",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the bone state of the node",
            "description": "Set the bone state of the node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeIsBone",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "true if the node is ot be used as a bone",
                    "is_optional": "False",
                    "name": "is_bone",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the parent of a gui node",
            "description": "Set the parent of a gui node",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeParent",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "the new parent. May be null",
                    "is_optional": "False",
                    "name": "parent",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "true to keep the world position",
                    "is_optional": "False",
                    "name": "keep_scene_transform",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "dmGui::RESULT_OK is successful",
                    "name": "result",
                    "types": [
                        "dmGui::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set property value",
            "description": "Set property value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "dmGui::HNode"
                    ]
                },
                {
                    "doc": "property enum",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "dmGui::Property"
                    ]
                },
                {
                    "doc": "",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "dmVMath::Vector4"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set node texture",
            "description": "set node texture",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeTexture",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "HNode"
                    ]
                },
                {
                    "doc": "the texture id",
                    "is_optional": "False",
                    "name": "texture_id",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "set node texture",
            "description": "set node texture",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetNodeTexture",
            "notes": [],
            "parameters": [
                {
                    "doc": "the gui scene",
                    "is_optional": "False",
                    "name": "scene",
                    "types": [
                        "dmGui::HScene"
                    ]
                },
                {
                    "doc": "the gui node",
                    "is_optional": "False",
                    "name": "node",
                    "types": [
                        "HNode"
                    ]
                },
                {
                    "doc": "the type of texture",
                    "is_optional": "False",
                    "name": "type",
                    "types": [
                        "NodeTextureType"
                    ]
                },
                {
                    "doc": "A pointer to a e.g. dmGameSystem::TextureSetResource*",
                    "is_optional": "False",
                    "name": "texture",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Defold GUI system",
        "description": "Defold GUI system",
        "description_html": "<p>Defold GUI system</p>",
        "file": "gui.h",
        "include": "dmsdk/gui/gui.h",
        "language": "C++",
        "name": "Gui",
        "namespace": "dmGui",
        "notes": [],
        "path": "dmsdk/gui/gui.h",
        "type": "Defold C++"
    }
}