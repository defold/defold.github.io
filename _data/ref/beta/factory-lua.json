{
    "elements": [
        {
            "brief": "make a factory create a new game object",
            "description": "The URL identifies which factory should create the game object.\nIf the game object is created inside of the frame (e.g. from an update callback), the game object will be created instantly, but none of its component will be updated in the same frame.\nProperties defined in scripts in the created game object can be overridden through the properties-parameter below.\nSee go.property for more information on script properties.\n<span class=\"icon-attention\"></span> Calling <a href=\"/ref/factory#factory.create\">factory.create</a> on a factory that is marked as dynamic without having loaded resources\nusing <a href=\"/ref/factory#factory.load\">factory.load</a> will synchronously load and create resources which may affect application performance.",
            "error": "",
            "examples": "How to create a new game object:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- create a new game object and provide property values</span>\n    <span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_created_object</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">&quot;#factory&quot;</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">my_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n    <span class=\"c1\">-- communicate with the object</span>\n    <span class=\"n\">msg</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">.</span><span class=\"n\">my_created_object</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>\n\nAnd then let the new game object have a script attached:\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">property</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_value&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n    <span class=\"c1\">-- do something with self.my_value which is now one</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "factory.create",
            "notes": [],
            "parameters": [
                {
                    "doc": "the factory that should create a game object.",
                    "is_optional": "False",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "the position of the new game object, the position of the game object calling <code>factory.create()</code> is used by default, or if the value is <code>nil</code>.",
                    "is_optional": "True",
                    "name": "position",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "the rotation of the new game object, the rotation of the game object calling <code>factory.create()</code> is used by default, or if the value is <code>nil</code>.",
                    "is_optional": "True",
                    "name": "rotation",
                    "types": [
                        "quaternion"
                    ]
                },
                {
                    "doc": "the properties defined in a script attached to the new game object.",
                    "is_optional": "True",
                    "name": "properties",
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "the scale of the new game object (must be greater than 0), the scale of the game object containing the factory is used by default, or if the value is <code>nil</code>",
                    "is_optional": "True",
                    "name": "scale",
                    "types": [
                        "number",
                        "vector3"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the global id of the spawned game object",
                    "name": "id",
                    "types": [
                        "hash"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get factory status",
            "description": "This returns status of the factory.\nCalling this function when the factory is not marked as dynamic loading always returns\nfactory.STATUS_LOADED.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "factory.get_status",
            "notes": [],
            "parameters": [
                {
                    "doc": "the factory component to get status from",
                    "is_optional": "True",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "status of the factory component\n<ul>\n<li><code>factory.STATUS_UNLOADED</code></li>\n<li><code>factory.STATUS_LOADING</code></li>\n<li><code>factory.STATUS_LOADED</code></li>\n</ul>",
                    "name": "status",
                    "types": [
                        "constant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Load resources of a factory prototype.",
            "description": "Resources are referenced by the factory component until the existing (parent) collection is destroyed or factory.unload is called.\nCalling this function when the factory is not marked as dynamic loading does nothing.",
            "error": "",
            "examples": "How to load resources of a factory prototype.\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;#factory&quot;</span><span class=\"p\">,</span> <span class=\"kr\">function</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"kr\">end</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "factory.load",
            "notes": [],
            "parameters": [
                {
                    "doc": "the factory component to load",
                    "is_optional": "True",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "function to call when resources are loaded.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>url</code></dt>\n<dd><span class=\"type\">url</span> url of the factory component</dd>\n<dt><code>result</code></dt>\n<dd><span class=\"type\">boolean</span> True if resources were loaded successfully</dd>\n</dl>",
                    "is_optional": "True",
                    "name": "complete_function",
                    "types": [
                        "function(self, url, result)"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "changes the prototype for the factory",
            "description": "Changes the prototype for the factory.",
            "error": "",
            "examples": "How to unload the previous prototypes resources, and then spawn a new game object\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">unload</span><span class=\"p\">(</span><span class=\"s2\">&quot;#factory&quot;</span><span class=\"p\">)</span> <span class=\"c1\">-- unload the previous resources</span>\n<span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">set_prototype</span><span class=\"p\">(</span><span class=\"s2\">&quot;#factory&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/main/levels/enemyA.goc&quot;</span><span class=\"p\">)</span>\n<span class=\"kd\">local</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">&quot;#factory&quot;</span><span class=\"p\">,</span> <span class=\"n\">go</span><span class=\"p\">.</span><span class=\"n\">get_world_position</span><span class=\"p\">(),</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">quat</span><span class=\"p\">())</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "factory.set_prototype",
            "notes": [
                "- Requires the factory to have the \"Dynamic Prototype\" set\n  - Cannot be set when the state is COMP_FACTORY_STATUS_LOADING\n  - Setting the prototype to `nil` will revert back to the original prototype."
            ],
            "parameters": [
                {
                    "doc": "the factory component",
                    "is_optional": "True",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                },
                {
                    "doc": "the path to the new prototype, or <code>nil</code>",
                    "is_optional": "True",
                    "name": "prototype",
                    "types": [
                        "string",
                        "nil"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "loaded",
            "description": "loaded",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "factory.STATUS_LOADED",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "loading",
            "description": "loading",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "factory.STATUS_LOADING",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "unloaded",
            "description": "unloaded",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "factory.STATUS_UNLOADED",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Unload resources previously loaded using factory.load",
            "description": "This decreases the reference count for each resource loaded with factory.load. If reference is zero, the resource is destroyed.\nCalling this function when the factory is not marked as dynamic loading does nothing.",
            "error": "",
            "examples": "How to unload resources of a factory prototype loaded with factory.load\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">factory</span><span class=\"p\">.</span><span class=\"n\">unload</span><span class=\"p\">(</span><span class=\"s2\">&quot;#factory&quot;</span><span class=\"p\">)</span>\n</code></pre></div>",
            "language": "",
            "members": [],
            "name": "factory.unload",
            "notes": [],
            "parameters": [
                {
                    "doc": "the factory component to unload",
                    "is_optional": "True",
                    "name": "url",
                    "types": [
                        "string",
                        "hash",
                        "url"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Factory API documentation",
        "description": "Functions for controlling factory components which are used to\ndynamically spawn game objects into the runtime.",
        "description_html": "<p>Functions for controlling factory components which are used to\ndynamically spawn game objects into the runtime.</p>",
        "file": "",
        "language": "Lua",
        "name": "Factory",
        "namespace": "factory",
        "notes": [],
        "path": "scripts/script_factory.cpp",
        "type": "Defold Lua"
    }
}