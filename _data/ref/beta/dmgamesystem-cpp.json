{
    "elements": [
        {
            "brief": "check if the constants have changed",
            "description": "check if the constants have changed",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AreRenderConstantsUpdated",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "non zero if the constants were changed",
                    "name": "result",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Removes a render constant from the container",
            "description": "Removes a render constant from the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ClearRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hashed name of the constant",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "non zero if the constant was removed",
                    "name": "result",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Used in GetMaterialConstant to resolve a render co...",
            "description": "Used in GetMaterialConstant to resolve a render constant's value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompGetConstantCallback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Gui component node type create/destroy context",
            "description": "Gui component node type create/destroy context",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompGuiNodeTypeCtx",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Used in SetMaterialConstant to set a render consta...",
            "description": "Used in SetMaterialConstant to set a render constant's value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompSetConstantCallback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Create a new HComponentRenderConstants container",
            "description": "Create a new HComponentRenderConstants container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CreateRenderConstants",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Destroys a render constants container",
            "description": "Destroys a render constants container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DestroyRenderConstants",
            "notes": [],
            "parameters": [
                {
                    "doc": "(must not be 0)",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Registers a new gui node type to the Gui component",
            "description": "Registers a new gui node type to the Gui component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_DECLARE_COMPGUI_TYPE",
            "notes": [],
            "parameters": [
                {
                    "doc": "The unique C++ symbol name",
                    "is_optional": "False",
                    "name": "symbol",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The name of the node type",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "the create function",
                    "is_optional": "False",
                    "name": "type_create_fn",
                    "types": [
                        "GuiNodeTypeCreateFunction"
                    ]
                },
                {
                    "doc": "the destroy function. May be 0",
                    "is_optional": "False",
                    "name": "type_destroy_fn",
                    "types": [
                        "GuiNodeTypeDestroyFunction"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set the constants of a render object",
            "description": "set the constants of a render object",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "EnableRenderObjectConstants",
            "notes": [],
            "parameters": [
                {
                    "doc": "the render object",
                    "is_optional": "False",
                    "name": "ro",
                    "types": [
                        "dmRender::RenderObject*"
                    ]
                },
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Represents a glyph",
            "description": "Represents a glyph.\nIf there's an associated image, it is of size width * height * channels.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "The glyph bounding width",
                    "name": "m_Width",
                    "type": "float"
                },
                {
                    "doc": "The glyph bounding height",
                    "name": "m_Height",
                    "type": "float"
                },
                {
                    "doc": "The glyph image width",
                    "name": "m_ImageWidth",
                    "type": "int16_t"
                },
                {
                    "doc": "The glyph image height",
                    "name": "m_ImageHeight",
                    "type": "int16_t"
                },
                {
                    "doc": "The glyph image height",
                    "name": "m_Channels",
                    "type": "int16_t"
                },
                {
                    "doc": "The advance step of the glyph (in pixels)",
                    "name": "m_Advance",
                    "type": "float"
                },
                {
                    "doc": "The left bearing of the glyph (in pixels)",
                    "name": "m_LeftBearing",
                    "type": "float"
                },
                {
                    "doc": "The ascent of the glyph. (in pixels)",
                    "name": "m_Ascent",
                    "type": "float"
                },
                {
                    "doc": "The descent of the glyph. Positive! (in pixels)",
                    "name": "m_Descent",
                    "type": "float"
                }
            ],
            "name": "FontGlyph",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Describes what compression is used for the glyph i...",
            "description": "Describes what compression is used for the glyph image",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "     No compression",
                    "name": "FONT_GLYPH_COMPRESSION_NONE",
                    "type": ""
                },
                {
                    "doc": "  Data is compressed using the deflate() algorithm",
                    "name": "FONT_GLYPH_COMPRESSION_DEFLATE",
                    "type": ""
                }
            ],
            "name": "FontGlyphCompression",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Used to retrieve the information of a font.",
            "description": "Used to retrieve the information of a font.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "",
                    "name": "m_Size",
                    "type": "uint32_t"
                },
                {
                    "doc": "",
                    "name": "m_Antialias",
                    "type": "uint32_t"
                },
                {
                    "doc": "",
                    "name": "m_ShadowX",
                    "type": "float"
                },
                {
                    "doc": "",
                    "name": "m_ShadowY",
                    "type": "float"
                },
                {
                    "doc": "",
                    "name": "m_ShadowBlur",
                    "type": "uint32_t"
                },
                {
                    "doc": "",
                    "name": "m_ShadowAlpha",
                    "type": "float"
                },
                {
                    "doc": "",
                    "name": "m_Alpha",
                    "type": "float"
                },
                {
                    "doc": "",
                    "name": "m_OutlineAlpha",
                    "type": "float"
                },
                {
                    "doc": "",
                    "name": "m_OutlineWidth",
                    "type": "float"
                }
            ],
            "name": "FontInfo",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Handle to font resource",
            "description": "Handle to font resource",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "FontResource",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Destroys a render constants container",
            "description": "Destroys a render constants container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hashed name of the property",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the pointer where to store the constant",
                    "is_optional": "False",
                    "name": "out_constant",
                    "types": [
                        "dmRender::Constant**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "returns true if the constant exists",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get a render constant by index",
            "description": "Get a render constant by index",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the pointer where to store the constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the number of render constants",
            "description": "Get the number of render constants",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderConstantCount",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "returns the number of set constants",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the resource path hash",
            "description": "Gets the resource path hash",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetResourceProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the property",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "const PropVector4&"
                    ]
                },
                {
                    "doc": "the resource to get the",
                    "is_optional": "False",
                    "name": "resource",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "the out property",
                    "is_optional": "False",
                    "name": "out_value",
                    "types": [
                        "dmGameObject::PropertyDesc&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gui component node type",
            "description": "Gui component node type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GuiNodeType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GuiNodeTypeCreateFunction",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GuiNodeTypeDestroyFunction",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Hashes the constants",
            "description": "Hashes the constants",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HashRenderConstants",
            "notes": [
                "Also updates the internal state of the constants container. After a call to this function, the `AreRenderConstantsUpdated` will always return false."
            ],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hash state to update",
                    "is_optional": "False",
                    "name": "state",
                    "types": [
                        "HashState32*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Found in hash.h",
            "description": "Found in hash.h",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HashState32",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Render constants handle",
            "description": "Render constants handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HComponentRenderConstants",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Checks if the name matches any field in the proper...",
            "description": "Checks if the name matches any field in the property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsReferencingProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the property",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "const PropVector3&"
                    ]
                },
                {
                    "doc": "the name to look for (e.g. hash(\"pos.x\"))",
                    "is_optional": "False",
                    "name": "query",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the property contains the name",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Checks if the name matches any field in the proper...",
            "description": "Checks if the name matches any field in the property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsReferencingProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the property",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "const PropVector4&"
                    ]
                },
                {
                    "doc": "the name to look for (e.g. hash(\"pos.x\"))",
                    "is_optional": "False",
                    "name": "query",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the property contains the name",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropVector3",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropVector4",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontAddGlyph",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The glyph codepoint",
                    "is_optional": "False",
                    "name": "codepoint",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The glyph meta data",
                    "is_optional": "False",
                    "name": "glyph",
                    "types": [
                        "FontGlyph*"
                    ]
                },
                {
                    "doc": "The bitmap or sdf data. May be null for e.g. white space characters. The font will now own this data.",
                    "is_optional": "False",
                    "name": "imagedata",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetCacheCellSize",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The cache cell width",
                    "is_optional": "False",
                    "name": "width",
                    "types": [
                        "uint32_t*"
                    ]
                },
                {
                    "doc": "The cache cell height",
                    "is_optional": "False",
                    "name": "height",
                    "types": [
                        "uint32_t*"
                    ]
                },
                {
                    "doc": "The distance from the top of the cell to the baseline.",
                    "is_optional": "False",
                    "name": "max_ascent",
                    "types": [
                        "uint32_t*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetHandle",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Handle to a font if successful. 0 otherwise.",
                    "name": "result",
                    "types": [
                        "dmRender::HFont"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetInfo",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The output info",
                    "is_optional": "False",
                    "name": "info",
                    "types": [
                        "FontInfo*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the font line height (max_ascent + max_descent...",
            "description": "Get the font line height (max_ascent + max_descent)",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetLineHeight",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The max distance above the base line of any glyph",
                    "is_optional": "False",
                    "name": "max_ascent",
                    "types": [
                        "float*"
                    ]
                },
                {
                    "doc": "The max distance below the base line of any glyph",
                    "is_optional": "False",
                    "name": "max_descent",
                    "types": [
                        "float*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontHasGlyph",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The glyph codepoint",
                    "is_optional": "False",
                    "name": "codepoint",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the glyph already exists",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontRemoveGlyph",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The glyph codepoint",
                    "is_optional": "False",
                    "name": "codepoint",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Resets the glyph cache and sets the cell size.",
            "description": "Resets the glyph cache and sets the cell size.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontSetCacheCellSize",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The width of a glyph cache cell",
                    "is_optional": "False",
                    "name": "cell_width",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The height of a glyph cache cell",
                    "is_optional": "False",
                    "name": "cell_height",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The height of a glyph cache cell",
                    "is_optional": "False",
                    "name": "max_ascent",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set the font line height, by specifying the max as...",
            "description": "Set the font line height, by specifying the max ascent and descent",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontSetLineHeight",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The max distance above the base line of any glyph",
                    "is_optional": "False",
                    "name": "max_ascent",
                    "types": [
                        "float"
                    ]
                },
                {
                    "doc": "The max distance below the base line of any glyph",
                    "is_optional": "False",
                    "name": "max_descent",
                    "types": [
                        "float"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set a render constant by name. The constant must e...",
            "description": "Set a render constant by name. The constant must exist in the material",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the render constants buffer",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the material to get default values from if constant didn't already exist in the render constants buffer",
                    "is_optional": "False",
                    "name": "material",
                    "types": [
                        "dmRender::HMaterial"
                    ]
                },
                {
                    "doc": "the hashed name of the constant",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "index of the constant value to set, if the constant is an array",
                    "is_optional": "False",
                    "name": "value_index",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "pointer to the index of the element (in range [0,3]). May be 0",
                    "is_optional": "False",
                    "name": "element_index",
                    "types": [
                        "uint32_t*"
                    ]
                },
                {
                    "doc": "the constant value",
                    "is_optional": "False",
                    "name": "var",
                    "types": [
                        "const dmGameObject::PropertyVar&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set a render constant by name. The constant must e...",
            "description": "Set a render constant by name. The constant must exist in the material",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hashed name of the constant",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the values",
                    "is_optional": "False",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                },
                {
                    "doc": "number of values in the array",
                    "is_optional": "False",
                    "name": "num_values",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Updates the reference count of the resources, and ...",
            "description": "Updates the reference count of the resources, and returns the new resource.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetResourceProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the factory",
                    "is_optional": "False",
                    "name": "factory",
                    "types": [
                        "dmGameObject::HFactory"
                    ]
                },
                {
                    "doc": "the property containing the hash of the resources to get",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "const dmGameObject::PropertyVar&"
                    ]
                },
                {
                    "doc": "the hash of the resource file suffix (without the \".\"). E.g. hash(\"spritec\")",
                    "is_optional": "False",
                    "name": "ext",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "pointer to the current resource. Will also get the pointer to the new resource.",
                    "is_optional": "False",
                    "name": "out_resource",
                    "types": [
                        "void**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "SDK Gui Component API documentation",
        "description": "Built-in scripting functions.",
        "file": "dmsdk/gamesys/gui.h",
        "language": "C++",
        "name": "GameSystem Gui",
        "namespace": "dmGameSystem",
        "notes": [],
        "path": "dmsdk/gamesys/gui.h",
        "type": "Defold C++"
    }
}