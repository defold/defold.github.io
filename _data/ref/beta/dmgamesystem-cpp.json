{
    "elements": [
        {
            "brief": "check if the constants have changed",
            "description": "check if the constants have changed",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "AreRenderConstantsUpdated",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "non zero if the constants were changed",
                    "name": "result",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Removes a render constant from the container",
            "description": "Removes a render constant from the container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ClearRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hashed name of the constant",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "non zero if the constant was removed",
                    "name": "result",
                    "types": [
                        "int"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Spawns a collection of gameobjects in a collection...",
            "description": "Spawns a collection of gameobjects in a collection using a collection factory component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompCollectionFactorySpawn",
            "notes": [],
            "parameters": [
                {
                    "doc": "Collection factory world",
                    "is_optional": "False",
                    "name": "world",
                    "types": [
                        "HCollectionFactoryWorld"
                    ]
                },
                {
                    "doc": "Collection factory component",
                    "is_optional": "False",
                    "name": "component",
                    "types": [
                        "HCollectionFactoryComponent"
                    ]
                },
                {
                    "doc": "Gameobject collection to spawn into",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "HCollection"
                    ]
                },
                {
                    "doc": "Prefix for the spawned instance identifiers. Must start with a forward slash (/). Must be unique within the collection. Pass nullptr to automatically generate a unique identifier prefix (e.g. /collection1, /collection2 etc.).",
                    "is_optional": "False",
                    "name": "id_prefix",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "Position of the spawned objects",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "dmVMath::Point3"
                    ]
                },
                {
                    "doc": "Rotation of the spawned objects",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "dmVMath::Quat"
                    ]
                },
                {
                    "doc": "Scale of the spawned objects",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "dmVMath::Vector3"
                    ]
                },
                {
                    "doc": "Property containers with override properties",
                    "is_optional": "False",
                    "name": "properties",
                    "types": [
                        "dmGameObject::InstancePropertyContainers"
                    ]
                },
                {
                    "doc": "A map with the spawned instance id's",
                    "is_optional": "False",
                    "name": "out_instances",
                    "types": [
                        "dmGameObject::InstanceIdMap"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Result of the operation",
                    "name": "result",
                    "types": [
                        "dmGameObject::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Spawns a new gameobject instance in a collection u...",
            "description": "Spawns a new gameobject instance in a collection using a factory component.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompFactorySpawn",
            "notes": [],
            "parameters": [
                {
                    "doc": "Factory world",
                    "is_optional": "False",
                    "name": "world",
                    "types": [
                        "HFactoryWorld"
                    ]
                },
                {
                    "doc": "Factory component",
                    "is_optional": "False",
                    "name": "component",
                    "types": [
                        "HFactoryComponent"
                    ]
                },
                {
                    "doc": "Gameobject collection to spawn into",
                    "is_optional": "False",
                    "name": "collection",
                    "types": [
                        "HCollection"
                    ]
                },
                {
                    "doc": "Identifier for the new instance. Must be unique within the collection. Pass 0 to automatically generate a unique identifier (e.g. /instance1, /instance2 etc.).",
                    "is_optional": "False",
                    "name": "id",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "Position of the spawned object",
                    "is_optional": "False",
                    "name": "position",
                    "types": [
                        "dmVMath::Point3"
                    ]
                },
                {
                    "doc": "Rotation of the spawned object",
                    "is_optional": "False",
                    "name": "rotation",
                    "types": [
                        "dmVMath::Quat"
                    ]
                },
                {
                    "doc": "Scale of the spawned object",
                    "is_optional": "False",
                    "name": "scale",
                    "types": [
                        "dmVMath::Vector3"
                    ]
                },
                {
                    "doc": "Property container with override properties",
                    "is_optional": "False",
                    "name": "properties",
                    "types": [
                        "dmGameObject::HPropertyContainer"
                    ]
                },
                {
                    "doc": "Output parameter for the new instance",
                    "is_optional": "False",
                    "name": "out_instance",
                    "types": [
                        "dmGameObject::HInstance"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Result of the operation",
                    "name": "result",
                    "types": [
                        "dmGameObject::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Used in GetMaterialConstant to resolve a render co...",
            "description": "Used in GetMaterialConstant to resolve a render constant's value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompGetConstantCallback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Gui component node type create/destroy context",
            "description": "Gui component node type create/destroy context",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompGuiNodeTypeCtx",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Used in SetMaterialConstant to set a render consta...",
            "description": "Used in SetMaterialConstant to set a render constant's value",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CompSetConstantCallback",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Create a new HComponentRenderConstants container",
            "description": "Create a new HComponentRenderConstants container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "CreateRenderConstants",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Destroys a render constants container",
            "description": "Destroys a render constants container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DestroyRenderConstants",
            "notes": [],
            "parameters": [
                {
                    "doc": "(must not be 0)",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Registers a new gui node type to the Gui component",
            "description": "Registers a new gui node type to the Gui component",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "DM_DECLARE_COMPGUI_TYPE",
            "notes": [],
            "parameters": [
                {
                    "doc": "The unique C++ symbol name",
                    "is_optional": "False",
                    "name": "symbol",
                    "types": [
                        "symbol"
                    ]
                },
                {
                    "doc": "The name of the node type",
                    "is_optional": "False",
                    "name": "name",
                    "types": [
                        "const char*"
                    ]
                },
                {
                    "doc": "the create function",
                    "is_optional": "False",
                    "name": "type_create_fn",
                    "types": [
                        "GuiNodeTypeCreateFunction"
                    ]
                },
                {
                    "doc": "the destroy function. May be 0",
                    "is_optional": "False",
                    "name": "type_destroy_fn",
                    "types": [
                        "GuiNodeTypeDestroyFunction"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "MACRO"
        },
        {
            "brief": "set the constants of a render object",
            "description": "set the constants of a render object",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "EnableRenderObjectConstants",
            "notes": [],
            "parameters": [
                {
                    "doc": "the render object",
                    "is_optional": "False",
                    "name": "ro",
                    "types": [
                        "dmRender::RenderObject*"
                    ]
                },
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Represents a glyph",
            "description": "Represents a glyph.\nIf there's an associated image, it is of size width * height * channels.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "The glyph bounding width",
                    "name": "m_Width",
                    "type": "float"
                },
                {
                    "doc": "The glyph bounding height",
                    "name": "m_Height",
                    "type": "float"
                },
                {
                    "doc": "The glyph image width",
                    "name": "m_ImageWidth",
                    "type": "int16_t"
                },
                {
                    "doc": "The glyph image height",
                    "name": "m_ImageHeight",
                    "type": "int16_t"
                },
                {
                    "doc": "The glyph image height",
                    "name": "m_Channels",
                    "type": "int16_t"
                },
                {
                    "doc": "The advance step of the glyph (in pixels)",
                    "name": "m_Advance",
                    "type": "float"
                },
                {
                    "doc": "The left bearing of the glyph (in pixels)",
                    "name": "m_LeftBearing",
                    "type": "float"
                },
                {
                    "doc": "The ascent of the glyph. (in pixels)",
                    "name": "m_Ascent",
                    "type": "float"
                },
                {
                    "doc": "The descent of the glyph. Positive! (in pixels)",
                    "name": "m_Descent",
                    "type": "float"
                }
            ],
            "name": "FontGlyph",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Describes what compression is used for the glyph i...",
            "description": "Describes what compression is used for the glyph image",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "     No compression",
                    "name": "FONT_GLYPH_COMPRESSION_NONE",
                    "type": ""
                },
                {
                    "doc": "  Data is compressed using the deflate() algorithm",
                    "name": "FONT_GLYPH_COMPRESSION_DEFLATE",
                    "type": ""
                }
            ],
            "name": "FontGlyphCompression",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "ENUM"
        },
        {
            "brief": "Used to retrieve the information of a font.",
            "description": "Used to retrieve the information of a font.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [
                {
                    "doc": "The size of the font (in points)",
                    "name": "m_Size",
                    "type": "uint32_t"
                },
                {
                    "doc": "The shadow distance in X-axis (in pixels)",
                    "name": "m_ShadowX",
                    "type": "float"
                },
                {
                    "doc": "The shadow distance in Y-axis (in pixels)",
                    "name": "m_ShadowY",
                    "type": "float"
                },
                {
                    "doc": "The shadow blur spread [0.255] (in pixels)",
                    "name": "m_ShadowBlur",
                    "type": "uint32_t"
                },
                {
                    "doc": "The shadow alpha value [0..255]",
                    "name": "m_ShadowAlpha",
                    "type": "float"
                },
                {
                    "doc": "The alpha value [0..255]",
                    "name": "m_Alpha",
                    "type": "float"
                },
                {
                    "doc": "The outline alpha value [0..255]",
                    "name": "m_OutlineAlpha",
                    "type": "float"
                },
                {
                    "doc": "The outline size (in pixels)",
                    "name": "m_OutlineWidth",
                    "type": "float"
                },
                {
                    "doc": "The type of font (bitmap or distance field)",
                    "name": "m_OutputFormat",
                    "type": "dmRenderDDF::FontTextureFormat"
                },
                {
                    "doc": "Single or multi channel",
                    "name": "m_RenderMode",
                    "type": "dmRenderDDF::FontRenderMode"
                }
            ],
            "name": "FontInfo",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Handle to font resource",
            "description": "Handle to font resource",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "FontResource",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "Destroys a render constants container",
            "description": "Destroys a render constants container",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hashed name of the property",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the pointer where to store the constant",
                    "is_optional": "False",
                    "name": "out_constant",
                    "types": [
                        "dmRender::Constant**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "returns true if the constant exists",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get a render constant by index",
            "description": "Get a render constant by index",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the index",
                    "is_optional": "False",
                    "name": "index",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "the pointer where to store the constant",
                    "name": "constant",
                    "types": [
                        "dmRender::HConstant"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Get the number of render constants",
            "description": "Get the number of render constants",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetRenderConstantCount",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "returns the number of set constants",
                    "name": "size",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gets the resource path hash",
            "description": "Gets the resource path hash",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GetResourceProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the property",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "const PropVector4&"
                    ]
                },
                {
                    "doc": "the resource to get the",
                    "is_optional": "False",
                    "name": "resource",
                    "types": [
                        "void*"
                    ]
                },
                {
                    "doc": "the out property",
                    "is_optional": "False",
                    "name": "out_value",
                    "types": [
                        "dmGameObject::PropertyDesc&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Gui component node type",
            "description": "Gui component node type",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GuiNodeType",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GuiNodeTypeCreateFunction",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "GuiNodeTypeDestroyFunction",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Hashes the constants",
            "description": "Hashes the constants",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HashRenderConstants",
            "notes": [
                "Also updates the internal state of the constants container. After a call to this function, the `AreRenderConstantsUpdated` will always return false."
            ],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hash state to update",
                    "is_optional": "False",
                    "name": "state",
                    "types": [
                        "HashState32*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Found in hash.h",
            "description": "Found in hash.h",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HashState32",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Render constants handle",
            "description": "Render constants handle",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "HComponentRenderConstants",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "TYPEDEF"
        },
        {
            "brief": "Checks if the name matches any field in the proper...",
            "description": "Checks if the name matches any field in the property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsReferencingProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the property",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "const PropVector3&"
                    ]
                },
                {
                    "doc": "the name to look for (e.g. hash(\"pos.x\"))",
                    "is_optional": "False",
                    "name": "query",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the property contains the name",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Checks if the name matches any field in the proper...",
            "description": "Checks if the name matches any field in the property",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsReferencingProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the property",
                    "is_optional": "False",
                    "name": "property",
                    "types": [
                        "const PropVector4&"
                    ]
                },
                {
                    "doc": "the name to look for (e.g. hash(\"pos.x\"))",
                    "is_optional": "False",
                    "name": "query",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if the property contains the name",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Checks if a codepoint is a whitespace",
            "description": "Checks if a codepoint is a whitespace",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "IsWhiteSpace",
            "notes": [],
            "parameters": [
                {
                    "doc": "the codepoint",
                    "is_optional": "False",
                    "name": "c",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "true if it's a whitespace",
                    "name": "result",
                    "types": [
                        "bool"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropVector3",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "PropVector4",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "STRUCT"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontAddGlyph",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The glyph codepoint",
                    "is_optional": "False",
                    "name": "codepoint",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The glyph meta data",
                    "is_optional": "False",
                    "name": "glyph",
                    "types": [
                        "FontGlyph*"
                    ]
                },
                {
                    "doc": "The bitmap or sdf data. May be null for e.g. white space characters. The font will now own this data.",
                    "is_optional": "False",
                    "name": "imagedata",
                    "types": [
                        "void*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "add a new glyph range",
            "description": "Add a new glyph range",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontAddGlyphSource",
            "notes": [],
            "parameters": [
                {
                    "doc": "The factory",
                    "is_optional": "False",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "The font path hash (.fontc)",
                    "is_optional": "False",
                    "name": "fontc_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The ttf  path hash (.ttf)",
                    "is_optional": "False",
                    "name": "ttf_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The glyph minimum codepoint (inclusive)",
                    "is_optional": "False",
                    "name": "codepoint_min",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "The glyph maximum codepoint (inclusive)",
                    "is_optional": "False",
                    "name": "codepoint_max",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetHandle",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "Handle to a font if successful. 0 otherwise.",
                    "name": "result",
                    "types": [
                        "dmRender::HFont"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetInfo",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource to modify",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The output info",
                    "is_optional": "False",
                    "name": "info",
                    "types": [
                        "FontInfo*"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontGetTTFResourceFromCodepoint",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The codepoint to query",
                    "is_optional": "False",
                    "name": "codepoint",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "The ttfresource if successful. 0 otherwise.",
                    "name": "ttfresource",
                    "types": [
                        "TTFResource*"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "",
            "description": "",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontRemoveGlyph",
            "notes": [],
            "parameters": [
                {
                    "doc": "The font resource",
                    "is_optional": "False",
                    "name": "font",
                    "types": [
                        "FontResource*"
                    ]
                },
                {
                    "doc": "The glyph codepoint",
                    "is_optional": "False",
                    "name": "codepoint",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "removes all glyph ranges associated with a ttfresource",
            "description": "Removes all glyph ranges associated with a ttfresource",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "ResFontRemoveGlyphSource",
            "notes": [],
            "parameters": [
                {
                    "doc": "The factory",
                    "is_optional": "False",
                    "name": "factory",
                    "types": [
                        "dmResource::HFactory"
                    ]
                },
                {
                    "doc": "The font path hash (.fontc)",
                    "is_optional": "False",
                    "name": "fontc_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "The ttf  path hash (.ttf)",
                    "is_optional": "False",
                    "name": "ttf_hash",
                    "types": [
                        "dmhash_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmResource::Result"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "The edge value of an sdf glyph bitmap",
            "description": "The edge value of an sdf glyph bitmap",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SDF_EDGE_VALUE",
            "notes": [],
            "parameters": [],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "CONSTANT"
        },
        {
            "brief": "Set a render constant by name. The constant must e...",
            "description": "Set a render constant by name. The constant must exist in the material",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the render constants buffer",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the material to get default values from if constant didn't already exist in the render constants buffer",
                    "is_optional": "False",
                    "name": "material",
                    "types": [
                        "dmRender::HMaterial"
                    ]
                },
                {
                    "doc": "the hashed name of the constant",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "index of the constant value to set, if the constant is an array",
                    "is_optional": "False",
                    "name": "value_index",
                    "types": [
                        "uint32_t"
                    ]
                },
                {
                    "doc": "pointer to the index of the element (in range [0,3]). May be 0",
                    "is_optional": "False",
                    "name": "element_index",
                    "types": [
                        "uint32_t*"
                    ]
                },
                {
                    "doc": "the constant value",
                    "is_optional": "False",
                    "name": "var",
                    "types": [
                        "const dmGameObject::PropertyVar&"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Set a render constant by name. The constant must e...",
            "description": "Set a render constant by name. The constant must exist in the material",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetRenderConstant",
            "notes": [],
            "parameters": [
                {
                    "doc": "the constants",
                    "is_optional": "False",
                    "name": "constants",
                    "types": [
                        "dmGameSystem::HComponentRenderConstants"
                    ]
                },
                {
                    "doc": "the hashed name of the constant",
                    "is_optional": "False",
                    "name": "name_hash",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "the values",
                    "is_optional": "False",
                    "name": "values",
                    "types": [
                        "dmVMath::Vector4*"
                    ]
                },
                {
                    "doc": "number of values in the array",
                    "is_optional": "False",
                    "name": "num_values",
                    "types": [
                        "uint32_t"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [],
            "tparams": [],
            "type": "FUNCTION"
        },
        {
            "brief": "Updates the reference count of the resources, and ...",
            "description": "Updates the reference count of the resources, and returns the new resource.",
            "error": "",
            "examples": "",
            "language": "",
            "members": [],
            "name": "SetResourceProperty",
            "notes": [],
            "parameters": [
                {
                    "doc": "the factory",
                    "is_optional": "False",
                    "name": "factory",
                    "types": [
                        "dmGameObject::HFactory"
                    ]
                },
                {
                    "doc": "the property containing the hash of the resources to get",
                    "is_optional": "False",
                    "name": "value",
                    "types": [
                        "const dmGameObject::PropertyVar&"
                    ]
                },
                {
                    "doc": "the hash of the resource file suffix (without the \".\"). E.g. hash(\"spritec\")",
                    "is_optional": "False",
                    "name": "ext",
                    "types": [
                        "dmhash_t"
                    ]
                },
                {
                    "doc": "pointer to the current resource. Will also get the pointer to the new resource.",
                    "is_optional": "False",
                    "name": "out_resource",
                    "types": [
                        "void**"
                    ]
                }
            ],
            "replaces": "",
            "returnvalues": [
                {
                    "doc": "RESULT_OK if successful",
                    "name": "result",
                    "types": [
                        "dmGameObject::PropertyResult"
                    ]
                }
            ],
            "tparams": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "brief": "Collection factory component functions",
        "description": "API for spawning collections from a collection factory component.",
        "description_html": "<p>API for spawning collections from a collection factory component.</p>",
        "file": "dmsdk/gamesys/components/comp_collection_factory.h",
        "language": "C++",
        "name": "Collection factory",
        "namespace": "dmGameSystem",
        "notes": [],
        "path": "dmsdk/gamesys/components/comp_collection_factory.h",
        "type": "Defold C++"
    }
}