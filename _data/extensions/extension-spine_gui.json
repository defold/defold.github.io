{
    "elements": [
        {
            "description": "Dynamically create a new spine node.",
            "examples": "",
            "name": "gui.new_spine_node",
            "parameters": [
                {
                    "doc": "node position",
                    "name": "pos",
                    "types": [
                        "vector3",
                        "vector4"
                    ]
                },
                {
                    "doc": "spine scene id",
                    "name": "spine_scene",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Starts a spine animation.",
            "examples": "",
            "name": "gui.play_spine_anim",
            "parameters": [
                {
                    "doc": "spine node that should play the animation",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "id of the animation to play",
                    "name": "animation_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "playback mode - `gui.PLAYBACK_ONCE_FORWARD` - `gui.PLAYBACK_ONCE_BACKWARD` - `gui.PLAYBACK_ONCE_PINGPONG` - `gui.PLAYBACK_LOOP_FORWARD` - `gui.PLAYBACK_LOOP_BACKWARD` - `gui.PLAYBACK_LOOP_PINGPONG`",
                    "name": "playback",
                    "types": [
                        "constant"
                    ]
                },
                {
                    "doc": "optional table with properties",
                    "name": "play_properties",
                    "parameters": [
                        {
                            "doc": "The duration of a linear blend between the current and new animation",
                            "name": "blend_duration",
                            "types": [
                                "number"
                            ]
                        },
                        {
                            "doc": "The normalized initial value of the animation cursor when the animation starts playing",
                            "name": "offset",
                            "types": [
                                "number"
                            ]
                        },
                        {
                            "doc": "The rate with which the animation will be played. Must be positive",
                            "name": "playback_rate",
                            "types": [
                                "number"
                            ]
                        }
                    ],
                    "types": [
                        "table"
                    ]
                },
                {
                    "doc": "function to call when the animation has completed",
                    "name": "complete_function",
                    "types": [
                        "function(self, node)"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "cancel a spine animation",
            "examples": "",
            "name": "gui.cancel_spine",
            "parameters": [
                {
                    "doc": "spine node that should cancel its animation",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "The returned node can be used for parenting and transform queries. This function has complexity O(n), where n is the number of bones in the spine model skeleton.",
            "examples": "",
            "name": "gui.get_spine_bone",
            "parameters": [
                {
                    "doc": "spine node to query for bone node",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "id of the corresponding bone",
                    "name": "bone_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Set the spine scene on a spine node. The spine scene must be mapped to the gui scene in the gui editor.",
            "examples": "",
            "name": "gui.set_spine_scene",
            "parameters": [
                {
                    "doc": "node to set spine scene for",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "spine scene id",
                    "name": "spine_scene",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Returns the spine scene id of the supplied node. This is currently only useful for spine nodes. The returned spine scene must be mapped to the gui scene in the gui editor.",
            "examples": "",
            "name": "gui.get_spine_scene",
            "parameters": [
                {
                    "doc": "node to get texture from",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Sets the spine skin on a spine node.",
            "examples": "<p>Change skin of a Spine node</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_spine_skin</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;monster&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.set_spine_skin",
            "parameters": [
                {
                    "doc": "node to set the spine skin on",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "spine skin id",
                    "name": "spine_skin",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Add a spine skin on a spine node to another skin on the same node.",
            "examples": "<p>Add skin of a Spine node to another skin</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">add_spine_skin</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;monster_head&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;monster_body&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.add_spine_skin",
            "parameters": [
                {
                    "doc": "node having both skins",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "spine skin id that recieves other skin",
                    "name": "spine_skin_a",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "spine skin id that will be added",
                    "name": "spine_skin_b",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Copy a spine skin on a spine node to another skin on the same node.",
            "examples": "<p>Copy skin of a Spine node to another skin</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">copy_spine_skin</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;monster_head&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;monster_body&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.copy_spine_skin",
            "parameters": [
                {
                    "doc": "node having both skins",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "spine skin id that copies other skin",
                    "name": "spine_skin_a",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "spine skin id that will be copied",
                    "name": "spine_skin_b",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Clear a spine skin on a spine node of all attachments and constraints",
            "examples": "<p>Clear skin of a Spine node</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">clear_spine_skin</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;monster&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.clear_spine_skin",
            "parameters": [
                {
                    "doc": "node having both skins",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "spine skin id",
                    "name": "spine_skin",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Gets the spine skin of a spine node",
            "examples": "",
            "name": "gui.get_spine_skin",
            "parameters": [
                {
                    "doc": "node to get spine skin from",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Gets the playing animation on a spine node",
            "examples": "",
            "name": "gui.get_spine_animation",
            "parameters": [
                {
                    "doc": "node to get spine skin from",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "This is only useful for spine nodes. The cursor is normalized.",
            "examples": "",
            "name": "gui.set_spine_cursor",
            "parameters": [
                {
                    "doc": "spine node to set the cursor for",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "cursor value",
                    "name": "cursor",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "This is only useful for spine nodes. Gets the normalized cursor of the animation on a spine node.",
            "examples": "",
            "name": "gui.get_spine_cursor",
            "parameters": [
                {
                    "doc": "spine node to get the cursor for (node)",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "This is only useful for spine nodes. Sets the playback rate of the animation on a spine node. Must be positive.",
            "examples": "",
            "name": "gui.set_spine_playback_rate",
            "parameters": [
                {
                    "doc": "spine node to set the cursor for",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "playback rate",
                    "name": "playback_rate",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "This is only useful for spine nodes. Gets the playback rate of the animation on a spine node.",
            "examples": "",
            "name": "gui.get_spine_playback_rate",
            "parameters": [
                {
                    "doc": "spine node to set the cursor for",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "This is only useful for spine nodes. Sets an attachment to a slot on a spine node.",
            "examples": "",
            "name": "gui.set_spine_attachment",
            "parameters": [
                {
                    "doc": "spine node to set the slot for",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "slot name",
                    "name": "slot",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "attachment name. May be nil.",
                    "name": "attachment",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "This is only useful for spine nodes. Sets a tint for all attachments on a slot",
            "examples": "",
            "name": "gui.set_spine_slot_color",
            "parameters": [
                {
                    "doc": "spine node to set the slot for",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "slot name",
                    "name": "slot",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "target color.",
                    "name": "color",
                    "types": [
                        "vector4"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Apply a physics-based translation to the Spine GUI node.",
            "examples": "",
            "name": "gui.spine_physics_translate",
            "parameters": [
                {
                    "doc": "The Spine GUI node to translate.",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "The translation vector to apply to the Spine GUI node.",
                    "name": "translation",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Apply a physics-based rotation to the Spine GUI node.",
            "examples": "",
            "name": "gui.spine_physics_rotate",
            "parameters": [
                {
                    "doc": "The Spine GUI node to rotate.",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "The center point around which to rotate.",
                    "name": "center",
                    "types": [
                        "vector3"
                    ]
                },
                {
                    "doc": "The rotation angle in degrees.",
                    "name": "degrees",
                    "types": [
                        "number"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Sets a static (vector3) target position of an inverse kinematic (IK) object.",
            "examples": "<p>The following example assumes that the Spine GUI node has id \"spine_node\".</p>\n<p>How to set the target IK position of the right_hand_constraint constraint object of the player object</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">vmath</span><span class=\"p\">.</span><span class=\"n\">vector3</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_spine_ik_target_position</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;right_hand_constraint&quot;</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.set_spine_ik_target_position",
            "parameters": [
                {
                    "doc": "the Spine GUI node containing the object",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "id of the corresponding IK constraint object",
                    "name": "ik_constraint_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "target position",
                    "name": "position",
                    "types": [
                        "vector3"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Sets a GUI node as target position of an inverse kinematic (IK) object. As the target GUI node's position is updated, the constraint object is updated with the new position.",
            "examples": "<p>The following example assumes that the Spine GUI node has id \"spine_node\".</p>\n<p>How to set the target IK position of the right_hand_constraint constraint object to follow the position of GUI node with id \"target_node\"</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">spine_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">)</span>\n  <span class=\"kd\">local</span> <span class=\"n\">target_node</span> <span class=\"o\">=</span> <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;target_node&quot;</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">set_spine_ik_target</span><span class=\"p\">(</span><span class=\"n\">spine_node</span><span class=\"p\">,</span> <span class=\"s2\">&quot;right_hand_constraint&quot;</span><span class=\"p\">,</span> <span class=\"n\">target_node</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.set_spine_ik_target",
            "parameters": [
                {
                    "doc": "the Spine GUI node containing the object",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "id of the corresponding IK constraint object",
                    "name": "ik_constraint_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                },
                {
                    "doc": "target GUI node",
                    "name": "target_node",
                    "types": [
                        "node"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        },
        {
            "description": "Resets any previously set IK target of a Spine GUI node, the position will be reset to the original position from the spine scene.",
            "examples": "<p>The following example assumes that the Spine GUI node has id \"spine_node\".</p>\n<p>A player no longer has an item in hand, that previously was controlled through IK, let's reset the IK of the right hand.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">function</span> <span class=\"nf\">player_lost_item</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">)</span>\n  <span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">reset_spine_ik_target</span><span class=\"p\">(</span><span class=\"n\">gui</span><span class=\"p\">.</span><span class=\"n\">get_node</span><span class=\"p\">(</span><span class=\"s2\">&quot;spine_node&quot;</span><span class=\"p\">),</span> <span class=\"s2\">&quot;right_hand_constraint&quot;</span><span class=\"p\">)</span>\n<span class=\"kr\">end</span>\n</code></pre></div>",
            "name": "gui.reset_spine_ik_target",
            "parameters": [
                {
                    "doc": "the Spine GUI node containing the object",
                    "name": "node",
                    "types": [
                        "node"
                    ]
                },
                {
                    "doc": "id of the corresponding IK constraint object",
                    "name": "ik_constraint_id",
                    "types": [
                        "string",
                        "hash"
                    ]
                }
            ],
            "returnvalues": [],
            "type": "FUNCTION"
        }
    ],
    "info": {
        "api": "extension-spine/gui_api",
        "brief": "gui",
        "description": "Functions and constants for interacting with Spine models in GUI",
        "group": "EXTENSIONS",
        "language": "Lua",
        "name": "extension-spine",
        "namespace": "gui",
        "type": "Extension"
    }
}